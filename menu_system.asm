;--------------------------------------------------------
; File Created by SDCC : free open source ANSI-C Compiler
; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
; This file was generated Mon Dec 16 14:25:07 2013
;--------------------------------------------------------
; PIC16 port for the Microchip 16-bit core micros
;--------------------------------------------------------
	list	p=18f4620
	radix	dec


;--------------------------------------------------------
; public variables in this module
;--------------------------------------------------------
	global	_buffer
	global	_do_menu_update
	global	_lcd_print
	global	_button_pressed
	global	_button_released
	global	_lcd_plotpixel
	global	_font8x5

;--------------------------------------------------------
; extern variables in this module
;--------------------------------------------------------
	extern	__gptrget1
	extern	_stdin
	extern	_stdout
	extern	_PORTAbits
	extern	_PORTBbits
	extern	_PORTCbits
	extern	_PORTDbits
	extern	_PORTEbits
	extern	_LATAbits
	extern	_LATBbits
	extern	_LATCbits
	extern	_LATDbits
	extern	_LATEbits
	extern	_DDRAbits
	extern	_TRISAbits
	extern	_DDRBbits
	extern	_TRISBbits
	extern	_DDRCbits
	extern	_TRISCbits
	extern	_DDRDbits
	extern	_TRISDbits
	extern	_DDREbits
	extern	_TRISEbits
	extern	_OSCTUNEbits
	extern	_PIE1bits
	extern	_PIR1bits
	extern	_IPR1bits
	extern	_PIE2bits
	extern	_PIR2bits
	extern	_IPR2bits
	extern	_EECON1bits
	extern	_RCSTAbits
	extern	_TXSTAbits
	extern	_T3CONbits
	extern	_CMCONbits
	extern	_CVRCONbits
	extern	_ECCP1ASbits
	extern	_PWM1CONbits
	extern	_BAUDCONbits
	extern	_BAUDCTLbits
	extern	_CCP2CONbits
	extern	_CCP1CONbits
	extern	_ADCON2bits
	extern	_ADCON1bits
	extern	_ADCON0bits
	extern	_SSPCON2bits
	extern	_SSPCON1bits
	extern	_SSPSTATbits
	extern	_T2CONbits
	extern	_T1CONbits
	extern	_RCONbits
	extern	_WDTCONbits
	extern	_HLVDCONbits
	extern	_LVDCONbits
	extern	_OSCCONbits
	extern	_T0CONbits
	extern	_STATUSbits
	extern	_INTCON3bits
	extern	_INTCON2bits
	extern	_INTCONbits
	extern	_STKPTRbits
	extern	_PORTA
	extern	_PORTB
	extern	_PORTC
	extern	_PORTD
	extern	_PORTE
	extern	_LATA
	extern	_LATB
	extern	_LATC
	extern	_LATD
	extern	_LATE
	extern	_DDRA
	extern	_TRISA
	extern	_DDRB
	extern	_TRISB
	extern	_DDRC
	extern	_TRISC
	extern	_DDRD
	extern	_TRISD
	extern	_DDRE
	extern	_TRISE
	extern	_OSCTUNE
	extern	_PIE1
	extern	_PIR1
	extern	_IPR1
	extern	_PIE2
	extern	_PIR2
	extern	_IPR2
	extern	_EECON1
	extern	_EECON2
	extern	_EEDATA
	extern	_EEADR
	extern	_EEADRH
	extern	_RCSTA
	extern	_TXSTA
	extern	_TXREG
	extern	_RCREG
	extern	_SPBRG
	extern	_SPBRGH
	extern	_T3CON
	extern	_TMR3
	extern	_TMR3L
	extern	_TMR3H
	extern	_CMCON
	extern	_CVRCON
	extern	_ECCP1AS
	extern	_PWM1CON
	extern	_BAUDCON
	extern	_BAUDCTL
	extern	_CCP2CON
	extern	_CCPR2
	extern	_CCPR2L
	extern	_CCPR2H
	extern	_CCP1CON
	extern	_CCPR1
	extern	_CCPR1L
	extern	_CCPR1H
	extern	_ADCON2
	extern	_ADCON1
	extern	_ADCON0
	extern	_ADRES
	extern	_ADRESL
	extern	_ADRESH
	extern	_SSPCON2
	extern	_SSPCON1
	extern	_SSPSTAT
	extern	_SSPADD
	extern	_SSPBUF
	extern	_T2CON
	extern	_PR2
	extern	_TMR2
	extern	_T1CON
	extern	_TMR1
	extern	_TMR1L
	extern	_TMR1H
	extern	_RCON
	extern	_WDTCON
	extern	_HLVDCON
	extern	_LVDCON
	extern	_OSCCON
	extern	_T0CON
	extern	_TMR0
	extern	_TMR0L
	extern	_TMR0H
	extern	_STATUS
	extern	_FSR2L
	extern	_FSR2H
	extern	_PLUSW2
	extern	_PREINC2
	extern	_POSTDEC2
	extern	_POSTINC2
	extern	_INDF2
	extern	_BSR
	extern	_FSR1L
	extern	_FSR1H
	extern	_PLUSW1
	extern	_PREINC1
	extern	_POSTDEC1
	extern	_POSTINC1
	extern	_INDF1
	extern	_WREG
	extern	_FSR0L
	extern	_FSR0H
	extern	_PLUSW0
	extern	_PREINC0
	extern	_POSTDEC0
	extern	_POSTINC0
	extern	_INDF0
	extern	_INTCON3
	extern	_INTCON2
	extern	_INTCON
	extern	_PROD
	extern	_PRODL
	extern	_PRODH
	extern	_TABLAT
	extern	_TBLPTR
	extern	_TBLPTRL
	extern	_TBLPTRH
	extern	_TBLPTRU
	extern	_PC
	extern	_PCL
	extern	_PCLATH
	extern	_PCLATU
	extern	_STKPTR
	extern	_TOS
	extern	_TOSL
	extern	_TOSH
	extern	_TOSU
	extern	_strcat
	extern	_strcpy

;--------------------------------------------------------
;	Equates to used internal registers
;--------------------------------------------------------
STATUS	equ	0xfd8
WREG	equ	0xfe8
TBLPTRL	equ	0xff6
TBLPTRH	equ	0xff7
TBLPTRU	equ	0xff8
TABLAT	equ	0xff5
FSR0L	equ	0xfe9
FSR1L	equ	0xfe1
FSR2L	equ	0xfd9
POSTINC1	equ	0xfe6
POSTDEC1	equ	0xfe5
PREINC1	equ	0xfe4
PLUSW2	equ	0xfdb
PRODL	equ	0xff3
PRODH	equ	0xff4


	idata
_menu	db	0x00, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x69, 0x74
	db	0x65, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
	db	0x49, 0x74, 0x65, 0x6d, 0x20, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4f
	db	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x53, 0x65
	db	0x74, 0x74, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x57, 0x6f, 0x6f
	db	0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x4f, 0x78, 0x79, 0x67
	db	0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61
	db	0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x00, 0x00


; Internal registers
.registers	udata_ovr	0x0000
r0x00	res	1
r0x01	res	1
r0x02	res	1
r0x03	res	1
r0x04	res	1
r0x05	res	1
r0x06	res	1
r0x07	res	1
r0x08	res	1
r0x09	res	1
r0x0a	res	1
r0x0b	res	1
r0x0c	res	1
r0x0d	res	1
r0x0e	res	1
r0x0f	res	1
r0x10	res	1
r0x11	res	1
r0x12	res	1
r0x13	res	1
r0x14	res	1
r0x15	res	1
r0x16	res	1

udata_menu_system_0	udata
_buffer	res	8192

udata_menu_system_1	udata
_do_menu_update_menu_item_1_84	res	22

;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
; I code from now on!
; ; Starting pCode block
S_menu_system__lcd_plotpixel	code
_lcd_plotpixel:
;	.line	80; menu_system.c	void lcd_plotpixel(unsigned char x, unsigned char y) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
;	.line	88; menu_system.c	}
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_menu_system__button_released	code
_button_released:
;	.line	75; menu_system.c	void button_released(unsigned char button) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
;	.line	77; menu_system.c	}
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_menu_system__button_pressed	code
_button_pressed:
;	.line	71; menu_system.c	void button_pressed(unsigned char button) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
;	.line	73; menu_system.c	}
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_menu_system__lcd_print	code
_lcd_print:
;	.line	47; menu_system.c	void lcd_print(char *s, unsigned char line, unsigned char inverted) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVFF	r0x02, POSTDEC1
	MOVFF	r0x03, POSTDEC1
	MOVFF	r0x04, POSTDEC1
	MOVFF	r0x05, POSTDEC1
	MOVFF	r0x06, POSTDEC1
	MOVFF	r0x07, POSTDEC1
	MOVFF	r0x08, POSTDEC1
	MOVFF	r0x09, POSTDEC1
	MOVFF	r0x0a, POSTDEC1
	MOVFF	r0x0b, POSTDEC1
	MOVFF	r0x0c, POSTDEC1
	MOVFF	r0x0d, POSTDEC1
	MOVFF	r0x0e, POSTDEC1
	MOVFF	r0x0f, POSTDEC1
	MOVFF	r0x10, POSTDEC1
	MOVFF	r0x11, POSTDEC1
	MOVFF	r0x12, POSTDEC1
	MOVFF	r0x13, POSTDEC1
	MOVFF	r0x14, POSTDEC1
	MOVFF	r0x15, POSTDEC1
	MOVFF	r0x16, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
	MOVLW	0x04
	MOVFF	PLUSW2, r0x02
	MOVLW	0x05
	MOVFF	PLUSW2, r0x03
	MOVLW	0x06
	MOVFF	PLUSW2, r0x04
; ;multiply lit val:0x08 by variable r0x03 and store in r0x03
;	.line	53; menu_system.c	for (n = 0; s[n]; n++) {
	MOVF	r0x03, W
	MULLW	0x08
	MOVFF	PRODL, r0x03
	CLRF	r0x05
	CLRF	r0x06
	CLRF	r0x07
_00134_DS_:
	MOVF	r0x05, W
	ADDWF	r0x00, W
	MOVWF	r0x08
	CLRF	WREG
	ADDWFC	r0x01, W
	MOVWF	r0x09
	CLRF	WREG
	ADDWFC	r0x02, W
	MOVWF	r0x0a
	MOVFF	r0x08, FSR0L
	MOVFF	r0x09, PRODL
	MOVF	r0x0a, W
	CALL	__gptrget1
	MOVWF	r0x0b
	MOVF	r0x0b, W
	BTFSC	STATUS, 2
	BRA	_00136_DS_
;	.line	54; menu_system.c	for (x = 0; x < FONT_WIDTH; x++) {
	MOVFF	r0x08, r0x0b
	MOVFF	r0x09, r0x0c
	MOVFF	r0x0a, r0x0d
	CLRF	r0x0e
_00142_DS_:
;	.line	55; menu_system.c	for (y = 0; y < FONT_HEIGHT; y++) {
	MOVF	r0x06, W
	ADDWF	r0x0e, W
	MOVWF	r0x0f
	MOVF	r0x07, W
	ADDWF	r0x0e, W
	MOVWF	r0x10
	CLRF	r0x11
_00129_DS_:
;	.line	56; menu_system.c	if (inverted) {
	MOVF	r0x04, W
	BTFSC	STATUS, 2
	BRA	_00124_DS_
;	.line	57; menu_system.c	if (!((font8x5[ s[n] ][x] & (1 << y)) >> y)) {
	MOVFF	r0x08, FSR0L
	MOVFF	r0x09, PRODL
	MOVF	r0x0a, W
	CALL	__gptrget1
	MOVWF	r0x12
; ;multiply lit val:0x06 by variable r0x12 and store in r0x12
	MOVF	r0x12, W
	MULLW	0x06
	MOVF	PRODH, W
	BTFSC	r0x12, 7
	SUBLW	0x06
	MOVWF	r0x13
	MOVFF	PRODL, r0x12
	MOVLW	0x00
	BTFSC	r0x13, 7
	MOVLW	0xff
	MOVWF	r0x15
	MOVWF	r0x14
	MOVLW	LOW(_font8x5)
	ADDWF	r0x12, F
	MOVLW	HIGH(_font8x5)
	ADDWFC	r0x13, F
	MOVLW	UPPER(_font8x5)
	ADDWFC	r0x14, F
	MOVF	r0x0e, W
	ADDWF	r0x12, F
	CLRF	WREG
	ADDWFC	r0x13, F
	CLRF	WREG
	ADDWFC	r0x14, F
	MOVLW	0x01
	MOVWF	r0x15
	MOVLW	0x00
	MOVWF	r0x16
	MOVF	r0x11, W
	BZ	_00168_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00169_DS_:
	RLCF	r0x15, F
	RLCF	r0x16, F
	ADDLW	0x01
	BNC	_00169_DS_
_00168_DS_:
	MOVFF	r0x12, TBLPTRL
	MOVFF	r0x13, TBLPTRH
	MOVFF	r0x14, TBLPTRU
	TBLRD*+	
	MOVFF	TABLAT, r0x12
	CLRF	r0x13
	MOVF	r0x12, W
	ANDWF	r0x15, F
	MOVF	r0x13, W
	ANDWF	r0x16, F
	MOVF	r0x11, W
	BZ	_00171_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00172_DS_:
	BTFSC	r0x16, 7
	BSF	STATUS, 0
	RRCF	r0x16, F
	RRCF	r0x15, F
	ADDLW	0x01
	BNC	_00172_DS_
_00171_DS_:
	MOVF	r0x15, W
	IORWF	r0x16, W
	BTFSS	STATUS, 2
	BRA	_00130_DS_
;	.line	58; menu_system.c	lcd_plotpixel(x + n * FONT_WIDTH, y + line * FONT_HEIGHT);
	MOVF	r0x03, W
	ADDWF	r0x11, W
	MOVWF	r0x12
	MOVF	r0x12, W
	MOVWF	POSTDEC1
	MOVF	r0x10, W
	MOVWF	POSTDEC1
	CALL	_lcd_plotpixel
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BRA	_00130_DS_
_00124_DS_:
;	.line	62; menu_system.c	if ((font8x5[ s[n] ][x] & (1 << y)) >> y) {
	MOVFF	r0x0b, FSR0L
	MOVFF	r0x0c, PRODL
	MOVF	r0x0d, W
	CALL	__gptrget1
	MOVWF	r0x12
; ;multiply lit val:0x06 by variable r0x12 and store in r0x12
	MOVF	r0x12, W
	MULLW	0x06
	MOVF	PRODH, W
	BTFSC	r0x12, 7
	SUBLW	0x06
	MOVWF	r0x13
	MOVFF	PRODL, r0x12
	MOVLW	0x00
	BTFSC	r0x13, 7
	MOVLW	0xff
	MOVWF	r0x15
	MOVWF	r0x14
	MOVLW	LOW(_font8x5)
	ADDWF	r0x12, F
	MOVLW	HIGH(_font8x5)
	ADDWFC	r0x13, F
	MOVLW	UPPER(_font8x5)
	ADDWFC	r0x14, F
	MOVF	r0x0e, W
	ADDWF	r0x12, F
	CLRF	WREG
	ADDWFC	r0x13, F
	CLRF	WREG
	ADDWFC	r0x14, F
	MOVLW	0x01
	MOVWF	r0x15
	MOVLW	0x00
	MOVWF	r0x16
	MOVF	r0x11, W
	BZ	_00173_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00174_DS_:
	RLCF	r0x15, F
	RLCF	r0x16, F
	ADDLW	0x01
	BNC	_00174_DS_
_00173_DS_:
	MOVFF	r0x12, TBLPTRL
	MOVFF	r0x13, TBLPTRH
	MOVFF	r0x14, TBLPTRU
	TBLRD*+	
	MOVFF	TABLAT, r0x12
	CLRF	r0x13
	MOVF	r0x12, W
	ANDWF	r0x15, F
	MOVF	r0x13, W
	ANDWF	r0x16, F
	MOVF	r0x11, W
	BZ	_00176_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00177_DS_:
	BTFSC	r0x16, 7
	BSF	STATUS, 0
	RRCF	r0x16, F
	RRCF	r0x15, F
	ADDLW	0x01
	BNC	_00177_DS_
_00176_DS_:
	MOVF	r0x15, W
	IORWF	r0x16, W
	BZ	_00130_DS_
;	.line	63; menu_system.c	lcd_plotpixel(x + n * FONT_WIDTH, y + line * FONT_HEIGHT);
	MOVF	r0x03, W
	ADDWF	r0x11, W
	MOVWF	r0x12
	MOVF	r0x12, W
	MOVWF	POSTDEC1
	MOVF	r0x0f, W
	MOVWF	POSTDEC1
	CALL	_lcd_plotpixel
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
_00130_DS_:
;	.line	55; menu_system.c	for (y = 0; y < FONT_HEIGHT; y++) {
	INCF	r0x11, F
	MOVLW	0x08
	SUBWF	r0x11, W
	BTFSS	STATUS, 0
	BRA	_00129_DS_
;	.line	54; menu_system.c	for (x = 0; x < FONT_WIDTH; x++) {
	INCF	r0x0e, F
	MOVLW	0x06
	SUBWF	r0x0e, W
	BTFSS	STATUS, 0
	BRA	_00142_DS_
;	.line	53; menu_system.c	for (n = 0; s[n]; n++) {
	MOVLW	0x06
	ADDWF	r0x06, F
	MOVLW	0x06
	ADDWF	r0x07, F
	INCF	r0x05, F
	BRA	_00134_DS_
_00136_DS_:
	MOVFF	PREINC1, r0x16
	MOVFF	PREINC1, r0x15
	MOVFF	PREINC1, r0x14
	MOVFF	PREINC1, r0x13
	MOVFF	PREINC1, r0x12
	MOVFF	PREINC1, r0x11
	MOVFF	PREINC1, r0x10
	MOVFF	PREINC1, r0x0f
	MOVFF	PREINC1, r0x0e
	MOVFF	PREINC1, r0x0d
	MOVFF	PREINC1, r0x0c
	MOVFF	PREINC1, r0x0b
	MOVFF	PREINC1, r0x0a
	MOVFF	PREINC1, r0x09
	MOVFF	PREINC1, r0x08
	MOVFF	PREINC1, r0x07
	MOVFF	PREINC1, r0x06
	MOVFF	PREINC1, r0x05
	MOVFF	PREINC1, r0x04
	MOVFF	PREINC1, r0x03
	MOVFF	PREINC1, r0x02
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_menu_system__do_menu_update	code
_do_menu_update:
;	.line	36; menu_system.c	void do_menu_update() {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVFF	r0x02, POSTDEC1
	MOVFF	r0x03, POSTDEC1
	MOVFF	r0x04, POSTDEC1
	MOVFF	r0x05, POSTDEC1
	MOVFF	r0x06, POSTDEC1
	MOVFF	r0x07, POSTDEC1
	MOVFF	r0x08, POSTDEC1
;	.line	40; menu_system.c	for (i = 0; i < (sizeof(menu)/sizeof(struct menu_item_t)); i++) {
	CLRF	r0x00
	CLRF	r0x01
	CLRF	r0x02
_00106_DS_:
;	.line	41; menu_system.c	strcpy(menu_item, " ");
	MOVLW	HIGH(_do_menu_update_menu_item_1_84)
	MOVWF	r0x04
	MOVLW	LOW(_do_menu_update_menu_item_1_84)
	MOVWF	r0x03
	MOVLW	0x80
	MOVWF	r0x05
	MOVLW	UPPER(__str_0)
	MOVWF	r0x08
	MOVLW	HIGH(__str_0)
	MOVWF	r0x07
	MOVLW	LOW(__str_0)
	MOVWF	r0x06
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	CALL	_strcpy
	MOVLW	0x06
	ADDWF	FSR1L, F
;	.line	42; menu_system.c	strcat(menu_item, menu[i].name);
	MOVLW	HIGH(_do_menu_update_menu_item_1_84)
	MOVWF	r0x04
	MOVLW	LOW(_do_menu_update_menu_item_1_84)
	MOVWF	r0x03
	MOVLW	0x80
	MOVWF	r0x05
	MOVLW	LOW(_menu)
	ADDWF	r0x01, W
	MOVWF	r0x06
	MOVLW	HIGH(_menu)
	ADDWFC	r0x02, W
	MOVWF	r0x07
	INFSNZ	r0x06, F
	INCF	r0x07, F
	MOVF	r0x07, W
	MOVWF	r0x07
	MOVF	r0x06, W
	MOVWF	r0x06
	MOVLW	0x80
	MOVWF	r0x08
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	CALL	_strcat
	MOVLW	0x06
	ADDWF	FSR1L, F
;	.line	43; menu_system.c	lcd_print(menu_item, i, NON_INVERTED);
	MOVLW	HIGH(_do_menu_update_menu_item_1_84)
	MOVWF	r0x04
	MOVLW	LOW(_do_menu_update_menu_item_1_84)
	MOVWF	r0x03
	MOVLW	0x80
	MOVWF	r0x05
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	CALL	_lcd_print
	MOVLW	0x05
	ADDWF	FSR1L, F
;	.line	40; menu_system.c	for (i = 0; i < (sizeof(menu)/sizeof(struct menu_item_t)); i++) {
	MOVLW	0x17
	ADDWF	r0x01, F
	BTFSC	STATUS, 0
	INCF	r0x02, F
	INCF	r0x00, F
	MOVLW	0x07
	SUBWF	r0x00, W
	BTFSS	STATUS, 0
	BRA	_00106_DS_
	MOVFF	PREINC1, r0x08
	MOVFF	PREINC1, r0x07
	MOVFF	PREINC1, r0x06
	MOVFF	PREINC1, r0x05
	MOVFF	PREINC1, r0x04
	MOVFF	PREINC1, r0x03
	MOVFF	PREINC1, r0x02
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block for Ival
	code
_font8x5:
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x18, 0x04, 0x64, 0x18
	DB	0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c, 0x00, 0x0c, 0x30, 0x40, 0x30, 0x0c
	DB	0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c, 0x00, 0x00, 0x3e, 0x1c, 0x08, 0x00
	DB	0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04, 0x00, 0x10, 0x3c, 0x7c, 0x3c, 0x10
	DB	0x00, 0x20, 0x40, 0x3e, 0x01, 0x02, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22
	DB	0x00, 0x00, 0x38, 0x28, 0x38, 0x00, 0x00, 0x00, 0x10, 0x38, 0x10, 0x00
	DB	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x78, 0x08, 0x00, 0x00
	DB	0x00, 0x00, 0x15, 0x15, 0x0a, 0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01
	DB	0x00, 0x10, 0x20, 0x7f, 0x01, 0x01, 0x00, 0x04, 0x04, 0x00, 0x01, 0x1f
	DB	0x00, 0x00, 0x19, 0x15, 0x12, 0x00, 0x00, 0x40, 0x60, 0x50, 0x48, 0x44
	DB	0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x0f, 0x02, 0x01, 0x01, 0x00
	DB	0x00, 0x00, 0x01, 0x1f, 0x01, 0x00, 0x00, 0x44, 0x44, 0x4a, 0x4a, 0x51
	DB	0x00, 0x14, 0x74, 0x1c, 0x17, 0x14, 0x00, 0x51, 0x4a, 0x4a, 0x44, 0x44
	DB	0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x7c, 0x54, 0x54, 0x44
	DB	0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08, 0x00, 0x7c, 0x00, 0x7c, 0x44, 0x7c
	DB	0x00, 0x04, 0x02, 0x7f, 0x02, 0x04, 0x00, 0x10, 0x20, 0x7f, 0x20, 0x10
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00
	DB	0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14
	DB	0x00, 0x00, 0x07, 0x04, 0x1e, 0x00, 0x00, 0x23, 0x13, 0x08, 0x64, 0x62
	DB	0x00, 0x36, 0x49, 0x56, 0x20, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00
	DB	0x00, 0x00, 0x1c, 0x22, 0x41, 0x00, 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00
	DB	0x00, 0x14, 0x08, 0x3e, 0x08, 0x14, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08
	DB	0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08
	DB	0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02
	DB	0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e, 0x00, 0x00, 0x42, 0x7f, 0x40, 0x00
	DB	0x00, 0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x21, 0x41, 0x45, 0x4b, 0x31
	DB	0x00, 0x18, 0x14, 0x12, 0x7f, 0x10, 0x00, 0x27, 0x45, 0x45, 0x45, 0x39
	DB	0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30, 0x00, 0x01, 0x71, 0x09, 0x05, 0x03
	DB	0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x06, 0x49, 0x49, 0x29, 0x1e
	DB	0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x56, 0x36, 0x00, 0x00
	DB	0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x14, 0x14, 0x14, 0x14, 0x14
	DB	0x00, 0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x02, 0x01, 0x51, 0x09, 0x06
	DB	0x00, 0x3e, 0x41, 0x5d, 0x49, 0x4e, 0x00, 0x7e, 0x09, 0x09, 0x09, 0x7e
	DB	0x00, 0x7f, 0x49, 0x49, 0x49, 0x36, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x22
	DB	0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x7f, 0x49, 0x49, 0x49, 0x41
	DB	0x00, 0x7f, 0x09, 0x09, 0x09, 0x01, 0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a
	DB	0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x41, 0x7f, 0x41, 0x00
	DB	0x00, 0x20, 0x40, 0x41, 0x3f, 0x01, 0x00, 0x7f, 0x08, 0x14, 0x22, 0x41
	DB	0x00, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f
	DB	0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e
	DB	0x00, 0x7f, 0x09, 0x09, 0x09, 0x06, 0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e
	DB	0x00, 0x7f, 0x09, 0x19, 0x29, 0x46, 0x00, 0x46, 0x49, 0x49, 0x49, 0x31
	DB	0x00, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f
	DB	0x00, 0x0f, 0x30, 0x40, 0x30, 0x0f, 0x00, 0x3f, 0x40, 0x30, 0x40, 0x3f
	DB	0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x07, 0x08, 0x70, 0x08, 0x07
	DB	0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x3c, 0x4a, 0x49, 0x29, 0x1e
	DB	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x41, 0x7f, 0x00, 0x00
	DB	0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40
	DB	0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x20, 0x54, 0x54, 0x54, 0x78
	DB	0x00, 0x7f, 0x48, 0x44, 0x44, 0x38, 0x00, 0x38, 0x44, 0x44, 0x44, 0x20
	DB	0x00, 0x38, 0x44, 0x44, 0x48, 0x7f, 0x00, 0x38, 0x54, 0x54, 0x54, 0x18
	DB	0x00, 0x08, 0x7e, 0x09, 0x01, 0x02, 0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e
	DB	0x00, 0x7f, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00, 0x44, 0x7d, 0x40, 0x00
	DB	0x00, 0x20, 0x40, 0x44, 0x3d, 0x00, 0x00, 0x00, 0x7f, 0x10, 0x28, 0x44
	DB	0x00, 0x00, 0x41, 0x7f, 0x40, 0x00, 0x00, 0x7c, 0x04, 0x18, 0x04, 0x78
	DB	0x00, 0x7c, 0x08, 0x04, 0x04, 0x78, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38
	DB	0x00, 0x7c, 0x14, 0x14, 0x14, 0x08, 0x00, 0x08, 0x14, 0x14, 0x18, 0x7c
	DB	0x00, 0x7c, 0x08, 0x04, 0x04, 0x08, 0x00, 0x48, 0x54, 0x54, 0x54, 0x20
	DB	0x00, 0x04, 0x3f, 0x44, 0x40, 0x20, 0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c
	DB	0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c, 0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c
	DB	0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c
	DB	0x00, 0x44, 0x64, 0x54, 0x4c, 0x44, 0x00, 0x00, 0x08, 0x36, 0x41, 0x41
	DB	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x41, 0x41, 0x36, 0x08, 0x00
	DB	0x00, 0x04, 0x02, 0x04, 0x08, 0x04, 0x00, 0x7f, 0x6b, 0x6b, 0x6b, 0x7f
	DB	0x00, 0x00, 0x7c, 0x44, 0x7c, 0x00, 0x00, 0x00, 0x08, 0x7c, 0x00, 0x00
	DB	0x00, 0x00, 0x64, 0x54, 0x48, 0x00, 0x00, 0x00, 0x44, 0x54, 0x28, 0x00
	DB	0x00, 0x00, 0x1c, 0x10, 0x78, 0x00, 0x00, 0x00, 0x5c, 0x54, 0x24, 0x00
	DB	0x00, 0x00, 0x78, 0x54, 0x74, 0x00, 0x00, 0x00, 0x64, 0x14, 0x0c, 0x00
	DB	0x00, 0x00, 0x7c, 0x54, 0x7c, 0x00, 0x00, 0x00, 0x5c, 0x54, 0x3c, 0x00
	DB	0x00, 0x78, 0x24, 0x26, 0x25, 0x78, 0x00, 0x78, 0x25, 0x26, 0x24, 0x78
	DB	0x00, 0x70, 0x2a, 0x29, 0x2a, 0x70, 0x00, 0x78, 0x25, 0x24, 0x25, 0x78
	DB	0x00, 0x20, 0x54, 0x56, 0x55, 0x78, 0x00, 0x20, 0x55, 0x56, 0x54, 0x78
	DB	0x00, 0x20, 0x56, 0x55, 0x56, 0x78, 0x00, 0x20, 0x55, 0x54, 0x55, 0x78
	DB	0x00, 0x7c, 0x54, 0x56, 0x55, 0x44, 0x00, 0x7c, 0x55, 0x56, 0x54, 0x44
	DB	0x00, 0x7c, 0x56, 0x55, 0x56, 0x44, 0x00, 0x7c, 0x55, 0x54, 0x55, 0x44
	DB	0x00, 0x38, 0x54, 0x56, 0x55, 0x18, 0x00, 0x38, 0x55, 0x56, 0x54, 0x18
	DB	0x00, 0x38, 0x56, 0x55, 0x56, 0x18, 0x00, 0x38, 0x55, 0x54, 0x55, 0x18
	DB	0x00, 0x00, 0x44, 0x7e, 0x45, 0x00, 0x00, 0x00, 0x45, 0x7e, 0x44, 0x00
	DB	0x00, 0x00, 0x46, 0x7d, 0x46, 0x00, 0x00, 0x00, 0x45, 0x7c, 0x45, 0x00
	DB	0x00, 0x00, 0x48, 0x7a, 0x41, 0x00, 0x00, 0x00, 0x49, 0x7a, 0x40, 0x00
	DB	0x00, 0x00, 0x4a, 0x79, 0x42, 0x00, 0x00, 0x00, 0x49, 0x78, 0x41, 0x00
	DB	0x00, 0x38, 0x44, 0x46, 0x45, 0x38, 0x00, 0x38, 0x45, 0x46, 0x44, 0x38
	DB	0x00, 0x38, 0x46, 0x45, 0x46, 0x38, 0x00, 0x38, 0x45, 0x44, 0x45, 0x38
	DB	0x00, 0x30, 0x48, 0x4a, 0x49, 0x30, 0x00, 0x30, 0x49, 0x4a, 0x48, 0x30
	DB	0x00, 0x30, 0x4a, 0x49, 0x4a, 0x30, 0x00, 0x30, 0x49, 0x48, 0x49, 0x30
	DB	0x00, 0x3c, 0x40, 0x42, 0x41, 0x3c, 0x00, 0x3c, 0x41, 0x42, 0x40, 0x3c
	DB	0x00, 0x3c, 0x42, 0x41, 0x42, 0x3c, 0x00, 0x3c, 0x41, 0x40, 0x41, 0x3c
	DB	0x00, 0x3c, 0x40, 0x42, 0x21, 0x7c, 0x00, 0x3c, 0x41, 0x42, 0x20, 0x7c
	DB	0x00, 0x38, 0x42, 0x41, 0x22, 0x78, 0x00, 0x3c, 0x41, 0x40, 0x21, 0x7c
	DB	0x00, 0x4e, 0x51, 0x71, 0x11, 0x0a, 0x00, 0x58, 0x64, 0x64, 0x24, 0x10
	DB	0x00, 0x7c, 0x0a, 0x11, 0x22, 0x7d, 0x00, 0x78, 0x12, 0x09, 0x0a, 0x71
	DB	0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00
	DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x30, 0x48, 0x45, 0x40, 0x20
	DB	0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x38, 0x44
	DB	0x00, 0x40, 0x3e, 0x49, 0x49, 0x36, 0x00, 0x08, 0x04, 0x08, 0x70, 0x0c
	DB	0x00, 0x60, 0x50, 0x48, 0x50, 0x60, 0x00, 0x20, 0x52, 0x55, 0x59, 0x30
	DB	0x00, 0x38, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x41, 0x00
	DB	0x00, 0x40, 0x22, 0x14, 0x18, 0x60, 0x00, 0x7c, 0x20, 0x20, 0x1c, 0x20
	DB	0x00, 0x44, 0x3c, 0x04, 0x7c, 0x44, 0x00, 0x40, 0x3c, 0x12, 0x12, 0x0c
	DB	0x00, 0x41, 0x63, 0x55, 0x49, 0x41, 0x00, 0x38, 0x44, 0x44, 0x3c, 0x04
	DB	0x00, 0x08, 0x04, 0x3c, 0x44, 0x24, 0x00, 0x08, 0x14, 0x7f, 0x14, 0x08
	DB	0x00, 0x4e, 0x71, 0x01, 0x71, 0x4e, 0x00, 0x45, 0x29, 0x11, 0x29, 0x45
	DB	0x00, 0x0d, 0x51, 0x51, 0x51, 0x3d, 0x00, 0x00, 0x00, 0x05, 0x02, 0x05
	DB	0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0x1c, 0x3e, 0x00
	DB	0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x08, 0x07, 0x00
	DB	0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x1d, 0x15, 0x17, 0x00
	DB	0x00, 0x00, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00, 0x11, 0x15, 0x0a, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 0x41, 0x20, 0x00
	DB	0x00, 0x7c, 0x16, 0x15, 0x16, 0x08, 0x00, 0x21, 0x16, 0x08, 0x34, 0x42
	DB	0x00, 0x7f, 0x09, 0x1d, 0x01, 0x03, 0x00, 0x38, 0x54, 0x54, 0x14, 0x08
	DB	0x00, 0x00, 0x00, 0x7c, 0x40, 0x40, 0x00, 0x7f, 0x0e, 0x1c, 0x38, 0x7f
	DB	0x00, 0x41, 0x22, 0x5d, 0x22, 0x1c, 0x00, 0x1c, 0x3e, 0x1c, 0x08, 0x00
	DB	0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x77, 0x7b, 0x01, 0x7b, 0x77
	DB	0x00, 0x7f, 0x43, 0x75, 0x43, 0x7f, 0x00, 0x7f, 0x6f, 0x55, 0x43, 0x7f
	DB	0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x44, 0x42, 0x5f, 0x42, 0x44
	DB	0x00, 0x40, 0x5e, 0x45, 0x5e, 0x40, 0x00, 0x40, 0x48, 0x55, 0x5e, 0x40
	DB	0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x00, 0x03, 0x07, 0x0e, 0x1c, 0x38
	DB	0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x00, 0x7c, 0x78, 0x70, 0x60, 0x40
	DB	0x00, 0x08, 0x08, 0x1c, 0x22, 0x1c, 0x00, 0x00, 0x1c, 0x22, 0x1c, 0x00
	DB	0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x04, 0x3e, 0x3f, 0x3e, 0x04
	DB	0x00, 0x10, 0x3e, 0x7e, 0x3e, 0x10, 0x00, 0x55, 0x2a, 0x55, 0x2a, 0x55
	DB	0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
; ; Starting pCode block
__str_0:
	DB	0x20, 0x00


; Statistics:
; code size:	 1264 (0x04f0) bytes ( 0.96%)
;           	  632 (0x0278) words
; udata size:	 8214 (0x2016) bytes (213.91%)
; access size:	   23 (0x0017) bytes


	end
