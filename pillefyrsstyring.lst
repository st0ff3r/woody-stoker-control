gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-12-2013  04:00:40
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Thu Dec 12 04:00:40 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_last_button
                                           	global	_lcd_buf
                                           	global	_chimney_temp
                                           	global	_smoke_temp
                                           	global	_boiler_temp
                                           	global	_i
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	__debug
                                           	global	_timer_2
                                           	global	_last_inputs
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_usart_open
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_lcd_init
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _boiler_temp	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _smoke_temp	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _chimney_temp	res	2
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _lcd_buf	res	22
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _last_button	res	1
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _timer_2	res	4
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _last_inputs	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_timer_control	code	0X000008
                                           ivec_0x1_timer_control:
000008   ef84     goto    0x508            	GOTO	_timer_control
00000a   f002
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	27; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000370   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000372   0bfc     andlw   0xfc             	ANDLW	0xfc
000374   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	28; pillefyrsstyring.c	OSCCONbits.IRCF = 0x6;	// 4 MHz
000376   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000378   0b8f     andlw   0x8f             	ANDLW	0x8f
00037a   0960     iorlw   0x60             	IORLW	0x60
00037c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
00037e   0100     movlb   0                	BANKSEL	_timer_2
                                           ;	.line	30; pillefyrsstyring.c	timer_2 = 0;
000380   6b96     clrf    0x96, 0x1        	CLRF	_timer_2, B
000382   0100     movlb   0                	BANKSEL	(_timer_2 + 1)
000384   6b97     clrf    0x97, 0x1        	CLRF	(_timer_2 + 1), B
000386   0100     movlb   0                	BANKSEL	(_timer_2 + 2)
000388   6b98     clrf    0x98, 0x1        	CLRF	(_timer_2 + 2), B
00038a   0100     movlb   0                	BANKSEL	(_timer_2 + 3)
00038c   6b99     clrf    0x99, 0x1        	CLRF	(_timer_2 + 3), B
00038e   0100     movlb   0                	BANKSEL	_boiler_temp
                                           ;	.line	31; pillefyrsstyring.c	boiler_temp = 0;
000390   6bb0     clrf    0xb0, 0x1        	CLRF	_boiler_temp, B
000392   0100     movlb   0                	BANKSEL	(_boiler_temp + 1)
000394   6bb1     clrf    0xb1, 0x1        	CLRF	(_boiler_temp + 1), B
000396   0100     movlb   0                	BANKSEL	_smoke_temp
                                           ;	.line	32; pillefyrsstyring.c	smoke_temp = 0;
000398   6bb2     clrf    0xb2, 0x1        	CLRF	_smoke_temp, B
00039a   0100     movlb   0                	BANKSEL	(_smoke_temp + 1)
00039c   6bb3     clrf    0xb3, 0x1        	CLRF	(_smoke_temp + 1), B
00039e   0100     movlb   0                	BANKSEL	_chimney_temp
                                           ;	.line	33; pillefyrsstyring.c	chimney_temp = 0;
0003a0   6bb4     clrf    0xb4, 0x1        	CLRF	_chimney_temp, B
0003a2   0100     movlb   0                	BANKSEL	(_chimney_temp + 1)
0003a4   6bb5     clrf    0xb5, 0x1        	CLRF	(_chimney_temp + 1), B
                                           ;	.line	35; pillefyrsstyring.c	init_timers();
0003a6   ec87     call    0xb0e, 0         	CALL	_init_timers
0003a8   f005
                                           ;	.line	42; pillefyrsstyring.c	12     // 19200 kbps @ 4 MHz
0003aa   0e00     movlw   0                	MOVLW	0x00
0003ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003ae   0e0c     movlw   0xc              	MOVLW	0x0c
0003b0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003b2   0e7c     movlw   0x7c             	MOVLW	0x7c
0003b4   ec13     call    0x626, 0         	CALL	_usart_open
0003b6   f003
0003b8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0003ba   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	59; pillefyrsstyring.c	init_latches();
0003bc   ec17     call    0xc2e, 0         	CALL	_init_latches
0003be   f006
                                           ;	.line	60; pillefyrsstyring.c	lcd_init();
0003c0   ec7c     call    0x8f8, 0         	CALL	_lcd_init
0003c2   f004
                                           ;	.line	62; pillefyrsstyring.c	sleep_ms(1000);
0003c4   0e00     movlw   0                	MOVLW	0x00
0003c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003c8   0e00     movlw   0                	MOVLW	0x00
0003ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003cc   0e03     movlw   0x3              	MOVLW	0x03
0003ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003d0   0ee8     movlw   0xe8             	MOVLW	0xe8
0003d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003d4   ec10     call    0x220, 0         	CALL	_sleep_ms
0003d6   f001
0003d8   0e04     movlw   0x4              	MOVLW	0x04
0003da   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	63; pillefyrsstyring.c	set_ac_power(0x00, 0x00);
0003dc   0e00     movlw   0                	MOVLW	0x00
0003de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003e0   0e00     movlw   0                	MOVLW	0x00
0003e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003e4   ec9d     call    0x93a, 0         	CALL	_set_ac_power
0003e6   f004
0003e8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0003ea   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	64; pillefyrsstyring.c	RELAY = 1;
0003ec   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
                                           ;	.line	66; pillefyrsstyring.c	last_inputs = get_inputs();
0003ee   ec05     call    0xc0a, 0         	CALL	_get_inputs
0003f0   f006
0003f2   0100     movlb   0                	BANKSEL	_last_inputs
0003f4   6fb7     movwf   0xb7, 0x1        	MOVWF	_last_inputs, B
                                           _00108_DS_:
                                           ;	.line	71; pillefyrsstyring.c	if (get_inputs() != last_inputs) {
0003f6   ec05     call    0xc0a, 0         	CALL	_get_inputs
0003f8   f006
0003fa   6e00     movwf   0, 0             	MOVWF	r0x00
0003fc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0003fe   0100     movlb   0                	BANKSEL	_last_inputs
000400   19b7     xorwf   0xb7, 0, 0x1     	XORWF	_last_inputs, W, B
000402   e006     bz      0x410            	BZ	_00106_DS_
                                           ;	.line	72; pillefyrsstyring.c	last_inputs = get_inputs();
000404   ec05     call    0xc0a, 0         	CALL	_get_inputs
000406   f006
000408   0100     movlb   0                	BANKSEL	_last_inputs
00040a   6fb7     movwf   0xb7, 0x1        	MOVWF	_last_inputs, B
                                           ;	.line	73; pillefyrsstyring.c	_debug();
00040c   ecc3     call    0x786, 0         	CALL	__debug
00040e   f003
                                           _00106_DS_:
                                           ;	.line	75; pillefyrsstyring.c	set_ac_power(/* EXT_FEEDER_L1 | */ FAN_L2 | INT_FEEDER_L3 | L5 | L6, 0xff);
000410   0eff     movlw   0xff             	MOVLW	0xff
000412   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000414   0e36     movlw   0x36             	MOVLW	0x36
000416   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000418   ec9d     call    0x93a, 0         	CALL	_set_ac_power
00041a   f004
00041c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00041e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	76; pillefyrsstyring.c	sleep_ms(200);
000420   0e00     movlw   0                	MOVLW	0x00
000422   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000424   0e00     movlw   0                	MOVLW	0x00
000426   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000428   0e00     movlw   0                	MOVLW	0x00
00042a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00042c   0ec8     movlw   0xc8             	MOVLW	0xc8
00042e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000430   ec10     call    0x220, 0         	CALL	_sleep_ms
000432   f001
000434   0e04     movlw   0x4              	MOVLW	0x04
000436   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	77; pillefyrsstyring.c	set_ac_power(/* EXT_FEEDER_L1 | */ FAN_L2 | INT_FEEDER_L3 | L5 | L6, 0x00);
000438   0e00     movlw   0                	MOVLW	0x00
00043a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00043c   0e36     movlw   0x36             	MOVLW	0x36
00043e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000440   ec9d     call    0x93a, 0         	CALL	_set_ac_power
000442   f004
000444   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000446   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	78; pillefyrsstyring.c	sleep_ms(200);
000448   0e00     movlw   0                	MOVLW	0x00
00044a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00044c   0e00     movlw   0                	MOVLW	0x00
00044e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000450   0e00     movlw   0                	MOVLW	0x00
000452   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000454   0ec8     movlw   0xc8             	MOVLW	0xc8
000456   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000458   ec10     call    0x220, 0         	CALL	_sleep_ms
00045a   f001
00045c   0e04     movlw   0x4              	MOVLW	0x04
00045e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000460   d7ca     bra     0x3f6            	BRA	_00108_DS_
000462   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	173; pillefyrsstyring.c	void _debug() {
000786   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000788   ffe5
00078a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00078c   ffd9
                                           ;	.line	174; pillefyrsstyring.c	latched_lcd_power(1);
00078e   0e01     movlw   0x1              	MOVLW	0x01
000790   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000792   ec6a     call    0xad4, 0         	CALL	_latched_lcd_power
000794   f005
000796   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	175; pillefyrsstyring.c	sleep_ms(500);
000798   0e00     movlw   0                	MOVLW	0x00
00079a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00079c   0e00     movlw   0                	MOVLW	0x00
00079e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007a0   0e01     movlw   0x1              	MOVLW	0x01
0007a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007a4   0ef4     movlw   0xf4             	MOVLW	0xf4
0007a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007a8   ec10     call    0x220, 0         	CALL	_sleep_ms
0007aa   f001
0007ac   0e04     movlw   0x4              	MOVLW	0x04
0007ae   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	176; pillefyrsstyring.c	latched_lcd_power(0);
0007b0   0e00     movlw   0                	MOVLW	0x00
0007b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007b4   ec6a     call    0xad4, 0         	CALL	_latched_lcd_power
0007b6   f005
0007b8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	177; pillefyrsstyring.c	sleep_ms(500);
0007ba   0e00     movlw   0                	MOVLW	0x00
0007bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007be   0e00     movlw   0                	MOVLW	0x00
0007c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007c2   0e01     movlw   0x1              	MOVLW	0x01
0007c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007c6   0ef4     movlw   0xf4             	MOVLW	0xf4
0007c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007ca   ec10     call    0x220, 0         	CALL	_sleep_ms
0007cc   f001
0007ce   0e04     movlw   0x4              	MOVLW	0x04
0007d0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0007d2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0007d4   ffd9
0007d6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	161; pillefyrsstyring.c	unsigned char get_inputs() {
000c0a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000c0c   ffe5
000c0e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000c10   ffd9
000c12   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000c14   ffe5
                                           ;	.line	165; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
000c16   0eff     movlw   0xff             	MOVLW	0xff
000c18   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	166; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
000c1a   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	167; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
000c1c   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
000c1e   f000
                                           ;	.line	168; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
000c20   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	170; pillefyrsstyring.c	return data;
000c22   5000     movf    0, 0, 0          	MOVF	r0x00, W
000c24   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000c26   f000
000c28   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000c2a   ffd9
000c2c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	151; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
00093a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00093c   ffe5
00093e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000940   ffd9
000942   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000944   ffe5
000946   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000948   ffe5
00094a   0e02     movlw   0x2              	MOVLW	0x02
00094c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00094e   f000
000950   0e03     movlw   0x3              	MOVLW	0x03
000952   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000954   f001
                                           ;	.line	152; pillefyrsstyring.c	header_mask &= 0b00111111;		// only 6 outputs on this hardware
000956   0e3f     movlw   0x3f             	MOVLW	0x3f
000958   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	153; pillefyrsstyring.c	value &= header_mask;
00095a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00095c   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	154; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
00095e   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	155; pillefyrsstyring.c	LATCH_DATA = value;
000960   c001     movff   0x1, 0xf8c       	MOVFF	r0x01, _LATD
000962   ff8c
                                           ;	.line	156; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
000964   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	157; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
000966   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	158; pillefyrsstyring.c	LATCH_DATA = 0x00;
000968   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00096a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00096c   f001
00096e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000970   f000
000972   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000974   ffd9
000976   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	132; pillefyrsstyring.c	void init_latches() {
000c2e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000c30   ffe5
000c32   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000c34   ffd9
                                           ;	.line	133; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
000c36   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	134; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
000c38   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	135; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
000c3a   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	137; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
000c3c   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	138; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
000c3e   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	140; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
000c40   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	141; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
000c42   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	143; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
000c44   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	144; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
000c46   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	146; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
000c48   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	147; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
000c4a   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
000c4c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000c4e   ffd9
000c50   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	105; pillefyrsstyring.c	void init_timers() {
000b0e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b10   ffe5
000b12   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b14   ffd9
                                           ;	.line	107; pillefyrsstyring.c	T2CONbits.T2CKPS0 = 1;
000b16   80ca     bsf     0xca, 0, 0       	BSF	_T2CONbits, 0
                                           ;	.line	108; pillefyrsstyring.c	T2CONbits.T2CKPS1 = 0;
000b18   92ca     bcf     0xca, 0x1, 0     	BCF	_T2CONbits, 1
                                           ;	.line	109; pillefyrsstyring.c	T2CONbits.T2OUTPS0 = 1;
000b1a   86ca     bsf     0xca, 0x3, 0     	BSF	_T2CONbits, 3
                                           ;	.line	110; pillefyrsstyring.c	T2CONbits.T2OUTPS1 = 0;
000b1c   98ca     bcf     0xca, 0x4, 0     	BCF	_T2CONbits, 4
                                           ;	.line	111; pillefyrsstyring.c	T2CONbits.T2OUTPS2 = 0;
000b1e   9aca     bcf     0xca, 0x5, 0     	BCF	_T2CONbits, 5
                                           ;	.line	112; pillefyrsstyring.c	T2CONbits.T2OUTPS3 = 1;
000b20   8cca     bsf     0xca, 0x6, 0     	BSF	_T2CONbits, 6
                                           ;	.line	113; pillefyrsstyring.c	IPR1bits.TMR2IP = 1;		// high priority
000b22   829f     bsf     0x9f, 0x1, 0     	BSF	_IPR1bits, 1
                                           ;	.line	114; pillefyrsstyring.c	PIR1bits.TMR2IF = 1;
000b24   829e     bsf     0x9e, 0x1, 0     	BSF	_PIR1bits, 1
                                           ;	.line	115; pillefyrsstyring.c	T2CONbits.TMR2ON = 1;
000b26   84ca     bsf     0xca, 0x2, 0     	BSF	_T2CONbits, 2
                                           ;	.line	116; pillefyrsstyring.c	PIE1bits.TMR2IE = 1;
000b28   829d     bsf     0x9d, 0x1, 0     	BSF	_PIE1bits, 1
                                           ;	.line	119; pillefyrsstyring.c	T3CONbits.RD16 = 1;
000b2a   8eb1     bsf     0xb1, 0x7, 0     	BSF	_T3CONbits, 7
                                           ;	.line	120; pillefyrsstyring.c	T3CONbits.TMR3CS = 0;	// internal clock source
000b2c   92b1     bcf     0xb1, 0x1, 0     	BCF	_T3CONbits, 1
                                           ;	.line	121; pillefyrsstyring.c	T3CONbits.T3CKPS0 = 1;
000b2e   88b1     bsf     0xb1, 0x4, 0     	BSF	_T3CONbits, 4
                                           ;	.line	122; pillefyrsstyring.c	T3CONbits.T3CKPS0 = 1;
000b30   88b1     bsf     0xb1, 0x4, 0     	BSF	_T3CONbits, 4
                                           ;	.line	123; pillefyrsstyring.c	IPR2bits.TMR3IP = 0;		// low priority
000b32   92a2     bcf     0xa2, 0x1, 0     	BCF	_IPR2bits, 1
                                           ;	.line	124; pillefyrsstyring.c	T3CONbits.TMR3ON = 1;
000b34   80b1     bsf     0xb1, 0, 0       	BSF	_T3CONbits, 0
                                           ;	.line	126; pillefyrsstyring.c	PIR2bits.TMR3IF = 1;
000b36   82a1     bsf     0xa1, 0x1, 0     	BSF	_PIR2bits, 1
                                           ;	.line	128; pillefyrsstyring.c	INTCONbits.PEIE = 1;
000b38   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	129; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
000b3a   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
000b3c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b3e   ffd9
000b40   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	95; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
000220   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000222   ffe5
000224   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000226   ffd9
000228   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00022a   ffe5
00022c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00022e   ffe5
000230   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000232   ffe5
000234   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000236   ffe5
000238   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00023a   ffe5
00023c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00023e   ffe5
000240   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000242   ffe5
000244   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000246   ffe5
000248   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00024a   ffe5
00024c   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
00024e   ffe5
000250   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000252   ffe5
000254   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000256   ffe5
000258   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00025a   ffe5
00025c   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
00025e   ffe5
000260   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
000262   ffe5
000264   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
000266   ffe5
000268   0e02     movlw   0x2              	MOVLW	0x02
00026a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00026c   f000
00026e   0e03     movlw   0x3              	MOVLW	0x03
000270   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000272   f001
000274   0e04     movlw   0x4              	MOVLW	0x04
000276   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000278   f002
00027a   0e05     movlw   0x5              	MOVLW	0x05
00027c   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00027e   f003
                                           ;	.line	97; pillefyrsstyring.c	start_timer_2 = timer_2;	
000280   c096     movff   0x96, 0x4        	MOVFF	_timer_2, r0x04
000282   f004
000284   c097     movff   0x97, 0x5        	MOVFF	(_timer_2 + 1), r0x05
000286   f005
000288   c098     movff   0x98, 0x6        	MOVFF	(_timer_2 + 2), r0x06
00028a   f006
00028c   c099     movff   0x99, 0x7        	MOVFF	(_timer_2 + 3), r0x07
00028e   f007
                                           _00141_DS_:
                                           ;	.line	100; pillefyrsstyring.c	while ( (((signed long)(timer_2 - start_timer_2) < 0) ? (-1 * (timer_2 - start_timer_2)) : (timer_2 - start_timer_2)) < ms) {
000290   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000292   0100     movlb   0                	BANKSEL	_timer_2
000294   5d96     subwf   0x96, 0, 0x1     	SUBWF	_timer_2, W, B
000296   6e08     movwf   0x8, 0           	MOVWF	r0x08
000298   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00029a   0100     movlb   0                	BANKSEL	(_timer_2 + 1)
00029c   5997     subwfb  0x97, 0, 0x1     	SUBWFB	(_timer_2 + 1), W, B
00029e   6e09     movwf   0x9, 0           	MOVWF	r0x09
0002a0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0002a2   0100     movlb   0                	BANKSEL	(_timer_2 + 2)
0002a4   5998     subwfb  0x98, 0, 0x1     	SUBWFB	(_timer_2 + 2), W, B
0002a6   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0002a8   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0002aa   0100     movlb   0                	BANKSEL	(_timer_2 + 3)
0002ac   5999     subwfb  0x99, 0, 0x1     	SUBWFB	(_timer_2 + 3), W, B
0002ae   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
0002b0   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0002b2   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0002b4   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0002b6   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
0002b8   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0002ba   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
0002bc   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0002be   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
0002c0   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
0002c2   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
0002c4   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
0002c6   e31c     bnc     0x300            	BNC	_00146_DS_
0002c8   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0002ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002cc   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0002ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002d0   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0002d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002d4   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0002d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002d8   0eff     movlw   0xff             	MOVLW	0xff
0002da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002dc   0eff     movlw   0xff             	MOVLW	0xff
0002de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002e0   0eff     movlw   0xff             	MOVLW	0xff
0002e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002e4   0eff     movlw   0xff             	MOVLW	0xff
0002e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002e8   ec06     call    0xc, 0           	CALL	__mullong
0002ea   f000
0002ec   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0002ee   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
0002f0   f00d
0002f2   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
0002f4   f00e
0002f6   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
0002f8   f00f
0002fa   0e08     movlw   0x8              	MOVLW	0x08
0002fc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0002fe   d008     bra     0x310            	BRA	_00147_DS_
                                           _00146_DS_:
000300   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
000302   f00c
000304   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
000306   f00d
000308   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
00030a   f00e
00030c   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
00030e   f00f
                                           _00147_DS_:
000310   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000312   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
000314   e108     bnz     0x326            	BNZ	_00154_DS_
000316   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000318   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
00031a   e105     bnz     0x326            	BNZ	_00154_DS_
00031c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00031e   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
000320   e102     bnz     0x326            	BNZ	_00154_DS_
000322   5000     movf    0, 0, 0          	MOVF	r0x00, W
000324   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00154_DS_:
000326   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000328   d7b3     bra     0x290            	BRA	_00141_DS_
00032a   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
00032c   f00f
00032e   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
000330   f00e
000332   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
000334   f00d
000336   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000338   f00c
00033a   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
00033c   f00b
00033e   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
000340   f00a
000342   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000344   f009
000346   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000348   f008
00034a   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00034c   f007
00034e   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000350   f006
000352   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000354   f005
000356   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000358   f004
00035a   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00035c   f003
00035e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000360   f002
000362   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000364   f001
000366   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000368   f000
00036a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00036c   ffd9
00036e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__timer_control	code
                                           _timer_control:
                                           ;	.line	82; pillefyrsstyring.c	static void timer_control(void) __interrupt 1 {
000508   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
00050a   ffe5
00050c   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00050e   ffe5
000510   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000512   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
000514   ffe5
000516   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
000518   ffe5
00051a   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
00051c   ffe5
00051e   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
000520   ffe5
000522   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
000524   ffe5
000526   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
000528   ffe5
00052a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00052c   ffe5
00052e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000530   ffd9
000532   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000534   ffe5
                                           ;	.line	83; pillefyrsstyring.c	if (PIR1bits.TMR2IF) {
000536   a29e     btfss   0x9e, 0x1, 0     	BTFSS	_PIR1bits, 1
000538   d00e     bra     0x556            	BRA	_00125_DS_
                                           ;	.line	84; pillefyrsstyring.c	PR2 = TIMER2_RELOAD;		// 1 ms delay at 4 MHz
00053a   0e18     movlw   0x18             	MOVLW	0x18
00053c   6ecb     movwf   0xcb, 0          	MOVWF	_PR2
                                           ;	.line	85; pillefyrsstyring.c	PIR1bits.TMR2IF = 0;
00053e   929e     bcf     0x9e, 0x1, 0     	BCF	_PIR1bits, 1
000540   0100     movlb   0                	BANKSEL	_timer_2
                                           ;	.line	86; pillefyrsstyring.c	timer_2++;
000542   2b96     incf    0x96, 0x1, 0x1   	INCF	_timer_2, F, B
000544   e308     bnc     0x556            	BNC	_00125_DS_
000546   0100     movlb   0                	BANKSEL	(_timer_2 + 1)
000548   2b97     incf    0x97, 0x1, 0x1   	INCF	(_timer_2 + 1), F, B
00054a   e305     bnc     0x556            	BNC	_00125_DS_
00054c   0100     movlb   0                	BANKSEL	(_timer_2 + 2)
00054e   3f98     incfsz  0x98, 0x1, 0x1   	INCFSZ	(_timer_2 + 2), F, B
000550   d002     bra     0x556            	BRA	_10179_DS_
000552   0100     movlb   0                	BANKSEL	(_timer_2 + 3)
000554   2b99     incf    0x99, 0x1, 0x1   	INCF	(_timer_2 + 3), F, B
                                           _10179_DS_:
                                           _00136_DS_:
                                           _00125_DS_:
                                           ;	.line	89; pillefyrsstyring.c	if (usart_drdy()) {
000556   ec43     call    0xc86, 0         	CALL	_usart_drdy
000558   f006
00055a   6e00     movwf   0, 0             	MOVWF	r0x00
00055c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00055e   e006     bz      0x56c            	BZ	_00128_DS_
                                           ;	.line	91; pillefyrsstyring.c	usart_putc(usart_getc());
000560   ecde     call    0xbbc, 0         	CALL	_usart_getc
000562   f005
000564   6e00     movwf   0, 0             	MOVWF	r0x00
000566   5000     movf    0, 0, 0          	MOVF	r0x00, W
000568   ec3b     call    0xc76, 0         	CALL	_usart_putc
00056a   f006
                                           _00128_DS_:
00056c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00056e   f000
000570   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000572   ffd9
000574   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
000576   fffb
000578   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00057a   fffa
00057c   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00057e   ffea
000580   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
000582   ffe9
000584   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
000586   fff4
000588   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
00058a   fff3
00058c   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
00058e   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
000590   ffe0
000592   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
000594   ffd8
000596   0010     retfie  0                	RETFIE	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  994 (0x03e2) bytes ( 0.76%)
                                           ;           	  497 (0x01f1) words
                                           ; udata size:	   36 (0x0024) bytes ( 0.94%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Thu Dec 12 04:00:40 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	363; glcd.c	void latched_lcd_data(unsigned char value) {
000b6c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b6e   ffe5
000b70   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b72   ffd9
000b74   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000b76   ffe5
000b78   0e02     movlw   0x2              	MOVLW	0x02
000b7a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000b7c   f000
                                           ;	.line	364; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000b7e   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	365; glcd.c	LATCH_DATA = value;
000b80   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
000b82   ff8c
                                           ;	.line	366; glcd.c	LATCH_4 = LATCH_4_ENABLED;
000b84   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	367; glcd.c	LATCH_4 = LATCH_4_DISABLED;
000b86   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	368; glcd.c	LATCH_DATA = 0x00;
000b88   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000b8a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000b8c   f000
000b8e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b90   ffd9
000b92   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	348; glcd.c	void latched_lcd_cs1(unsigned char value) {
000978   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00097a   ffe5
00097c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00097e   ffd9
000980   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000982   ffe5
000984   0e02     movlw   0x2              	MOVLW	0x02
000986   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000988   f000
                                           ;	.line	349; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00098a   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	350; glcd.c	if (value) {	// set it
00098c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00098e   e005     bz      0x99a            	BZ	_00290_DS_
000990   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	351; glcd.c	_latch_3_data |= 0b00100000;
000992   8bb9     bsf     0xb9, 0x5, 0x1   	BSF	__latch_3_data, 5, B
                                           ;	.line	352; glcd.c	LATCH_DATA = _latch_3_data;
000994   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000996   ff8c
000998   d004     bra     0x9a2            	BRA	_00291_DS_
                                           _00290_DS_:
00099a   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data &= 0b11011111;
00099c   9bb9     bcf     0xb9, 0x5, 0x1   	BCF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
00099e   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009a0   ff8c
                                           _00291_DS_:
                                           ;	.line	358; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0009a2   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	359; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0009a4   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	360; glcd.c	LATCH_DATA = 0x00;
0009a6   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0009a8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009aa   f000
0009ac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0009ae   ffd9
0009b0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	333; glcd.c	void latched_lcd_cs2(unsigned char value) {
0009b2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0009b4   ffe5
0009b6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0009b8   ffd9
0009ba   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0009bc   ffe5
0009be   0e02     movlw   0x2              	MOVLW	0x02
0009c0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0009c2   f000
                                           ;	.line	334; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0009c4   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	335; glcd.c	if (value) {	// set it
0009c6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c8   e005     bz      0x9d4            	BZ	_00282_DS_
0009ca   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	336; glcd.c	_latch_3_data |= 0b00010000;
0009cc   89b9     bsf     0xb9, 0x4, 0x1   	BSF	__latch_3_data, 4, B
                                           ;	.line	337; glcd.c	LATCH_DATA = _latch_3_data;
0009ce   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009d0   ff8c
0009d2   d004     bra     0x9dc            	BRA	_00283_DS_
                                           _00282_DS_:
0009d4   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data &= 0b11101111;
0009d6   99b9     bcf     0xb9, 0x4, 0x1   	BCF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
0009d8   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009da   ff8c
                                           _00283_DS_:
                                           ;	.line	343; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0009dc   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	344; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0009de   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	345; glcd.c	LATCH_DATA = 0x00;
0009e0   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0009e2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009e4   f000
0009e6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0009e8   ffd9
0009ea   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	318; glcd.c	void latched_lcd_rst(unsigned char value) {
0009ec   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0009ee   ffe5
0009f0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0009f2   ffd9
0009f4   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0009f6   ffe5
0009f8   0e02     movlw   0x2              	MOVLW	0x02
0009fa   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0009fc   f000
                                           ;	.line	319; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0009fe   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	320; glcd.c	if (value) {	// set it
000a00   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a02   e005     bz      0xa0e            	BZ	_00274_DS_
000a04   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	321; glcd.c	_latch_3_data |= 0b00001000;
000a06   87b9     bsf     0xb9, 0x3, 0x1   	BSF	__latch_3_data, 3, B
                                           ;	.line	322; glcd.c	LATCH_DATA = _latch_3_data;
000a08   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000a0a   ff8c
000a0c   d004     bra     0xa16            	BRA	_00275_DS_
                                           _00274_DS_:
000a0e   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data &= 0b11110111;
000a10   97b9     bcf     0xb9, 0x3, 0x1   	BCF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
000a12   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000a14   ff8c
                                           _00275_DS_:
                                           ;	.line	328; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000a16   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	329; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000a18   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	330; glcd.c	LATCH_DATA = 0x00;
000a1a   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000a1c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000a1e   f000
000a20   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a22   ffd9
000a24   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	303; glcd.c	void latched_lcd_rw(unsigned char value) {
000a26   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a28   ffe5
000a2a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000a2c   ffd9
000a2e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000a30   ffe5
000a32   0e02     movlw   0x2              	MOVLW	0x02
000a34   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000a36   f000
                                           ;	.line	304; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000a38   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	305; glcd.c	if (value) {	// set it
000a3a   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a3c   e005     bz      0xa48            	BZ	_00266_DS_
000a3e   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	306; glcd.c	_latch_3_data |= 0b00000100;
000a40   85b9     bsf     0xb9, 0x2, 0x1   	BSF	__latch_3_data, 2, B
                                           ;	.line	307; glcd.c	LATCH_DATA = _latch_3_data;
000a42   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000a44   ff8c
000a46   d004     bra     0xa50            	BRA	_00267_DS_
                                           _00266_DS_:
000a48   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data &= 0b11111011;
000a4a   95b9     bcf     0xb9, 0x2, 0x1   	BCF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
000a4c   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000a4e   ff8c
                                           _00267_DS_:
                                           ;	.line	313; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000a50   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	314; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000a52   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	315; glcd.c	LATCH_DATA = 0x00;
000a54   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000a56   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000a58   f000
000a5a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a5c   ffd9
000a5e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	288; glcd.c	void latched_lcd_di(unsigned char value) {
000a60   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a62   ffe5
000a64   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000a66   ffd9
000a68   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000a6a   ffe5
000a6c   0e02     movlw   0x2              	MOVLW	0x02
000a6e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000a70   f000
                                           ;	.line	289; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000a72   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	290; glcd.c	if (value) {	// set it
000a74   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a76   e005     bz      0xa82            	BZ	_00258_DS_
000a78   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	291; glcd.c	_latch_3_data |= 0b00000010;
000a7a   83b9     bsf     0xb9, 0x1, 0x1   	BSF	__latch_3_data, 1, B
                                           ;	.line	292; glcd.c	LATCH_DATA = _latch_3_data;
000a7c   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000a7e   ff8c
000a80   d004     bra     0xa8a            	BRA	_00259_DS_
                                           _00258_DS_:
000a82   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data &= 0b11111101;
000a84   93b9     bcf     0xb9, 0x1, 0x1   	BCF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
000a86   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000a88   ff8c
                                           _00259_DS_:
                                           ;	.line	298; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000a8a   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	299; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000a8c   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	300; glcd.c	LATCH_DATA = 0x00;
000a8e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000a90   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000a92   f000
000a94   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a96   ffd9
000a98   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	273; glcd.c	void latched_lcd_enable(unsigned char value) {
000a9a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a9c   ffe5
000a9e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000aa0   ffd9
000aa2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000aa4   ffe5
000aa6   0e02     movlw   0x2              	MOVLW	0x02
000aa8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000aaa   f000
                                           ;	.line	274; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000aac   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	275; glcd.c	if (value) {	// set it
000aae   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ab0   e005     bz      0xabc            	BZ	_00250_DS_
000ab2   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	276; glcd.c	_latch_3_data |= 0b00000001;
000ab4   81b9     bsf     0xb9, 0, 0x1     	BSF	__latch_3_data, 0, B
                                           ;	.line	277; glcd.c	LATCH_DATA = _latch_3_data;
000ab6   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000ab8   ff8c
000aba   d004     bra     0xac4            	BRA	_00251_DS_
                                           _00250_DS_:
000abc   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data &= 0b11111110;
000abe   91b9     bcf     0xb9, 0, 0x1     	BCF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
000ac0   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000ac2   ff8c
                                           _00251_DS_:
                                           ;	.line	283; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000ac4   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	284; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000ac6   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	285; glcd.c	LATCH_DATA = 0x00;
000ac8   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000aca   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000acc   f000
000ace   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000ad0   ffd9
000ad2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	258; glcd.c	void latched_lcd_power(unsigned char value) {
000ad4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000ad6   ffe5
000ad8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ada   ffd9
000adc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000ade   ffe5
000ae0   0e02     movlw   0x2              	MOVLW	0x02
000ae2   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000ae4   f000
                                           ;	.line	259; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000ae6   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	260; glcd.c	if (value) {	// set it
000ae8   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aea   e005     bz      0xaf6            	BZ	_00242_DS_
000aec   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	261; glcd.c	_latch_3_data |= 0b10000000;
000aee   8fb9     bsf     0xb9, 0x7, 0x1   	BSF	__latch_3_data, 7, B
                                           ;	.line	262; glcd.c	LATCH_DATA = _latch_3_data;
000af0   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000af2   ff8c
000af4   d004     bra     0xafe            	BRA	_00243_DS_
                                           _00242_DS_:
000af6   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data &= 0b01111111;
000af8   9fb9     bcf     0xb9, 0x7, 0x1   	BCF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
000afa   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000afc   ff8c
                                           _00243_DS_:
                                           ;	.line	268; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000afe   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	269; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000b00   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	270; glcd.c	LATCH_DATA = 0x00;
000b02   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000b04   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000b06   f000
000b08   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b0a   ffd9
000b0c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	238; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
000464   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000466   ffe5
000468   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00046a   ffd9
00046c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00046e   ffe5
000470   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000472   ffe5
000474   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000476   ffe5
000478   0e02     movlw   0x2              	MOVLW	0x02
00047a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00047c   f000
00047e   0e03     movlw   0x3              	MOVLW	0x03
000480   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000482   f001
                                           ;	.line	243; glcd.c	if (rx & 64) {
000484   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
000486   d006     bra     0x494            	BRA	_00225_DS_
                                           ;	.line	244; glcd.c	lcd_selectside(LCD_RIGHT);
000488   0e02     movlw   0x2              	MOVLW	0x02
00048a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00048c   ecec     call    0x7d8, 0         	CALL	_lcd_selectside
00048e   f003
000490   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000492   d005     bra     0x49e            	BRA	_00226_DS_
                                           _00225_DS_:
                                           ;	.line	247; glcd.c	lcd_selectside(LCD_LEFT);
000494   0e01     movlw   0x1              	MOVLW	0x01
000496   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000498   ecec     call    0x7d8, 0         	CALL	_lcd_selectside
00049a   f003
00049c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00226_DS_:
                                           ;	.line	250; glcd.c	lcd_setpage( ry >> 3);		// fast /8
00049e   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
0004a0   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0004a2   0b1f     andlw   0x1f             	ANDLW	0x1f
0004a4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0004a6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0004a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004aa   ec38     call    0x870, 0         	CALL	_lcd_setpage
0004ac   f004
0004ae   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	251; glcd.c	lcd_setyaddr( rx & 0b00111111);
0004b0   0e3f     movlw   0x3f             	MOVLW	0x3f
0004b2   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
0004b4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004b6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004b8   ec14     call    0x828, 0         	CALL	_lcd_setyaddr
0004ba   f004
0004bc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	252; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
0004be   ec33     call    0xc66, 0         	CALL	_lcd_read
0004c0   f006
                                           ;	.line	253; glcd.c	d = lcd_read();				// read again to transfer to pic
0004c2   ec33     call    0xc66, 0         	CALL	_lcd_read
0004c4   f006
0004c6   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	254; glcd.c	lcd_setyaddr( rx & 0b00111111); 
0004c8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004cc   ec14     call    0x828, 0         	CALL	_lcd_setyaddr
0004ce   f004
0004d0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
0004d2   0e07     movlw   0x7              	MOVLW	0x07
0004d4   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
0004d6   0e01     movlw   0x1              	MOVLW	0x01
0004d8   6e00     movwf   0, 0             	MOVWF	r0x00
0004da   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0004dc   e005     bz      0x4e8            	BZ	_00235_DS_
0004de   6ce8     negf    0xe8, 0          	NEGF	WREG
0004e0   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00236_DS_:
0004e2   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
0004e4   0f01     addlw   0x1              	ADDLW	0x01
0004e6   e3fd     bnc     0x4e2            	BNC	_00236_DS_
                                           _00235_DS_:
0004e8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004ea   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
0004ec   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0004ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004f0   ec5b     call    0x8b6, 0         	CALL	_lcd_write
0004f2   f004
0004f4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0004f6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0004f8   f002
0004fa   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0004fc   f001
0004fe   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000500   f000
000502   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000504   ffd9
000506   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	222; glcd.c	unsigned char lcd_read (void) {
000c66   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000c68   ffe5
000c6a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000c6c   ffd9
                                           ;	.line	234; glcd.c	return 1;
000c6e   0e01     movlw   0x1              	MOVLW	0x01
000c70   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000c72   ffd9
000c74   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	197; glcd.c	void lcd_selectside(unsigned char sides) {
0007d8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0007da   ffe5
0007dc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0007de   ffd9
0007e0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0007e2   ffe5
0007e4   0e02     movlw   0x2              	MOVLW	0x02
0007e6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0007e8   f000
                                           ;	.line	200; glcd.c	if (sides & LCD_LEFT) {
0007ea   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
0007ec   d006     bra     0x7fa            	BRA	_00200_DS_
                                           ;	.line	202; glcd.c	latched_lcd_cs1(0);
0007ee   0e00     movlw   0                	MOVLW	0x00
0007f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007f2   ecbc     call    0x978, 0         	CALL	_latched_lcd_cs1
0007f4   f004
0007f6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0007f8   d005     bra     0x804            	BRA	_00201_DS_
                                           _00200_DS_:
                                           ;	.line	206; glcd.c	latched_lcd_cs1(1);
0007fa   0e01     movlw   0x1              	MOVLW	0x01
0007fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007fe   ecbc     call    0x978, 0         	CALL	_latched_lcd_cs1
000800   f004
000802   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00201_DS_:
                                           ;	.line	209; glcd.c	if (sides & LCD_RIGHT) {
000804   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
000806   d006     bra     0x814            	BRA	_00203_DS_
                                           ;	.line	211; glcd.c	latched_lcd_cs2(0);
000808   0e00     movlw   0                	MOVLW	0x00
00080a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00080c   ecd9     call    0x9b2, 0         	CALL	_latched_lcd_cs2
00080e   f004
000810   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000812   d005     bra     0x81e            	BRA	_00205_DS_
                                           _00203_DS_:
                                           ;	.line	215; glcd.c	latched_lcd_cs2(1);
000814   0e01     movlw   0x1              	MOVLW	0x01
000816   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000818   ecd9     call    0x9b2, 0         	CALL	_latched_lcd_cs2
00081a   f004
00081c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00205_DS_:
00081e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000820   f000
000822   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000824   ffd9
000826   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	184; glcd.c	void lcd_write (unsigned char d) {
0008b6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0008b8   ffe5
0008ba   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0008bc   ffd9
0008be   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0008c0   ffe5
0008c2   0e02     movlw   0x2              	MOVLW	0x02
0008c4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0008c6   f000
                                           ;	.line	185; glcd.c	lcd_waitbusy();
0008c8   ecf2     call    0xbe4, 0         	CALL	_lcd_waitbusy
0008ca   f005
                                           ;	.line	187; glcd.c	latched_lcd_di(1);
0008cc   0e01     movlw   0x1              	MOVLW	0x01
0008ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d0   ec30     call    0xa60, 0         	CALL	_latched_lcd_di
0008d2   f005
0008d4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	189; glcd.c	latched_lcd_rw(0);
0008d6   0e00     movlw   0                	MOVLW	0x00
0008d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008da   ec13     call    0xa26, 0         	CALL	_latched_lcd_rw
0008dc   f005
0008de   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	192; glcd.c	latched_lcd_data(d);
0008e0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e4   ecb6     call    0xb6c, 0         	CALL	_latched_lcd_data
0008e6   f005
0008e8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	lcd_enable();
0008ea   eca1     call    0xb42, 0         	CALL	_lcd_enable
0008ec   f005
0008ee   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0008f0   f000
0008f2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0008f4   ffd9
0008f6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
000be4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000be6   ffe5
000be8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000bea   ffd9
000bec   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000bee   ffe5
                                           _00178_DS_:
                                           ;	.line	178; glcd.c	while (lcd_status() & 0b10000000) {
000bf0   ecca     call    0xb94, 0         	CALL	_lcd_status
000bf2   f005
000bf4   6e00     movwf   0, 0             	MOVWF	r0x00
000bf6   ae00     btfss   0, 0x7, 0        	BTFSS	r0x00, 7
000bf8   d003     bra     0xc00            	BRA	_00181_DS_
                                           _00189_DS_:
000bfa   0000     nop                      	nop 
000bfc   0000     nop                      	nop 
000bfe   d7f8     bra     0xbf0            	BRA	_00178_DS_
                                           _00181_DS_:
000c00   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000c02   f000
000c04   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000c06   ffd9
000c08   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
000828   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00082a   ffe5
00082c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00082e   ffd9
000830   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000832   ffe5
000834   0e02     movlw   0x2              	MOVLW	0x02
000836   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000838   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
00083a   ecf2     call    0xbe4, 0         	CALL	_lcd_waitbusy
00083c   f005
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
00083e   0e00     movlw   0                	MOVLW	0x00
000840   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000842   ec30     call    0xa60, 0         	CALL	_latched_lcd_di
000844   f005
000846   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
000848   0e00     movlw   0                	MOVLW	0x00
00084a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00084c   ec13     call    0xa26, 0         	CALL	_latched_lcd_rw
00084e   f005
000850   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
000852   0e3f     movlw   0x3f             	MOVLW	0x3f
000854   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
000856   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
000858   5000     movf    0, 0, 0          	MOVF	r0x00, W
00085a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00085c   ecb6     call    0xb6c, 0         	CALL	_latched_lcd_data
00085e   f005
000860   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
000862   eca1     call    0xb42, 0         	CALL	_lcd_enable
000864   f005
000866   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000868   f000
00086a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00086c   ffd9
00086e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
000870   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000872   ffe5
000874   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000876   ffd9
000878   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00087a   ffe5
00087c   0e02     movlw   0x2              	MOVLW	0x02
00087e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000880   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
000882   ecf2     call    0xbe4, 0         	CALL	_lcd_waitbusy
000884   f005
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
000886   0e00     movlw   0                	MOVLW	0x00
000888   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00088a   ec30     call    0xa60, 0         	CALL	_latched_lcd_di
00088c   f005
00088e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
000890   0e00     movlw   0                	MOVLW	0x00
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   ec13     call    0xa26, 0         	CALL	_latched_lcd_rw
000896   f005
000898   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
00089a   0eb8     movlw   0xb8             	MOVLW	0xb8
00089c   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
00089e   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008a2   ecb6     call    0xb6c, 0         	CALL	_latched_lcd_data
0008a4   f005
0008a6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
0008a8   eca1     call    0xb42, 0         	CALL	_lcd_enable
0008aa   f005
0008ac   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0008ae   f000
0008b0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0008b2   ffd9
0008b4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
000598   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00059a   ffe5
00059c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00059e   ffd9
0005a0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0005a2   ffe5
0005a4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0005a6   ffe5
0005a8   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0005aa   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
0005ac   0e03     movlw   0x3              	MOVLW	0x03
0005ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005b0   ecec     call    0x7d8, 0         	CALL	_lcd_selectside
0005b2   f003
0005b4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
0005b6   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00146_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
0005b8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0005ba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005bc   ec38     call    0x870, 0         	CALL	_lcd_setpage
0005be   f004
0005c0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
0005c2   0e00     movlw   0                	MOVLW	0x00
0005c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005c6   ec14     call    0x828, 0         	CALL	_lcd_setyaddr
0005c8   f004
0005ca   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
0005cc   0e00     movlw   0                	MOVLW	0x00
0005ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005d0   ecb6     call    0xb6c, 0         	CALL	_latched_lcd_data
0005d2   f005
0005d4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
0005d6   0e00     movlw   0                	MOVLW	0x00
0005d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005da   ec13     call    0xa26, 0         	CALL	_latched_lcd_rw
0005dc   f005
0005de   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
0005e0   0e01     movlw   0x1              	MOVLW	0x01
0005e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005e4   ec30     call    0xa60, 0         	CALL	_latched_lcd_di
0005e6   f005
0005e8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
0005ea   0e40     movlw   0x40             	MOVLW	0x40
0005ec   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00145_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
0005ee   eca1     call    0xb42, 0         	CALL	_lcd_enable
0005f0   f005
0005f2   0000     nop                      	nop 
0005f4   0000     nop                      	nop 
0005f6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0005f8   6e02     movwf   0x2, 0           	MOVWF	r0x02
0005fa   0402     decf    0x2, 0, 0        	DECF	r0x02, W
0005fc   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
0005fe   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000600   e1f6     bnz     0x5ee            	BNZ	_00145_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
000602   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000604   0e08     movlw   0x8              	MOVLW	0x08
000606   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000608   e3d7     bnc     0x5b8            	BNC	_00146_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
00060a   0e01     movlw   0x1              	MOVLW	0x01
00060c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00060e   ecec     call    0x7d8, 0         	CALL	_lcd_selectside
000610   f003
000612   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000614   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000616   f002
000618   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00061a   f001
00061c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00061e   f000
000620   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000622   ffd9
000624   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
00072c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00072e   ffe5
000730   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000732   ffd9
000734   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000736   ffe5
000738   0e02     movlw   0x2              	MOVLW	0x02
00073a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00073c   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(0);
00073e   0e00     movlw   0                	MOVLW	0x00
000740   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000742   ecbc     call    0x978, 0         	CALL	_latched_lcd_cs1
000744   f004
000746   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(0);
000748   0e00     movlw   0                	MOVLW	0x00
00074a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00074c   ecd9     call    0x9b2, 0         	CALL	_latched_lcd_cs2
00074e   f004
000750   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
000752   0e00     movlw   0                	MOVLW	0x00
000754   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000756   ec13     call    0xa26, 0         	CALL	_latched_lcd_rw
000758   f005
00075a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
00075c   0e00     movlw   0                	MOVLW	0x00
00075e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000760   ec30     call    0xa60, 0         	CALL	_latched_lcd_di
000762   f005
000764   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
000766   0e01     movlw   0x1              	MOVLW	0x01
000768   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
00076a   0e3e     movlw   0x3e             	MOVLW	0x3e
00076c   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
00076e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000770   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000772   ecb6     call    0xb6c, 0         	CALL	_latched_lcd_data
000774   f005
000776   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
000778   eca1     call    0xb42, 0         	CALL	_lcd_enable
00077a   f005
00077c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00077e   f000
000780   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000782   ffd9
000784   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
0006ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0006b0   ffe5
0006b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0006b4   ffd9
0006b6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0006b8   ffe5
                                           ;	.line	86; glcd.c	sleep_ms(1);
0006ba   0e00     movlw   0                	MOVLW	0x00
0006bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006be   0e00     movlw   0                	MOVLW	0x00
0006c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006c2   0e00     movlw   0                	MOVLW	0x00
0006c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006c6   0e01     movlw   0x1              	MOVLW	0x01
0006c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006ca   ec10     call    0x220, 0         	CALL	_sleep_ms
0006cc   f001
0006ce   0e04     movlw   0x4              	MOVLW	0x04
0006d0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(1);
0006d2   0e01     movlw   0x1              	MOVLW	0x01
0006d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006d6   ecf6     call    0x9ec, 0         	CALL	_latched_lcd_rst
0006d8   f004
0006da   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
0006dc   0e00     movlw   0                	MOVLW	0x00
0006de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006e0   0e00     movlw   0                	MOVLW	0x00
0006e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006e4   0e00     movlw   0                	MOVLW	0x00
0006e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006e8   0e01     movlw   0x1              	MOVLW	0x01
0006ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006ec   ec10     call    0x220, 0         	CALL	_sleep_ms
0006ee   f001
0006f0   0e04     movlw   0x4              	MOVLW	0x04
0006f2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(0);
0006f4   0e00     movlw   0                	MOVLW	0x00
0006f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006f8   ecf6     call    0x9ec, 0         	CALL	_latched_lcd_rst
0006fa   f004
0006fc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00120_DS_:
                                           ;	.line	94; glcd.c	while (lcd_status() & 0b00010000) {
0006fe   ecca     call    0xb94, 0         	CALL	_lcd_status
000700   f005
000702   6e00     movwf   0, 0             	MOVWF	r0x00
000704   a800     btfss   0, 0x4, 0        	BTFSS	r0x00, 4
000706   d00d     bra     0x722            	BRA	_00123_DS_
                                           ;	.line	95; glcd.c	sleep_ms(1);
000708   0e00     movlw   0                	MOVLW	0x00
00070a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00070c   0e00     movlw   0                	MOVLW	0x00
00070e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000710   0e00     movlw   0                	MOVLW	0x00
000712   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000714   0e01     movlw   0x1              	MOVLW	0x01
000716   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000718   ec10     call    0x220, 0         	CALL	_sleep_ms
00071a   f001
00071c   0e04     movlw   0x4              	MOVLW	0x04
00071e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000720   d7ee     bra     0x6fe            	BRA	_00120_DS_
                                           _00123_DS_:
000722   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000724   f000
000726   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000728   ffd9
00072a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
000b94   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b96   ffe5
000b98   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b9a   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(100);	
000b9c   0e00     movlw   0                	MOVLW	0x00
000b9e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ba0   0e00     movlw   0                	MOVLW	0x00
000ba2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ba4   0e00     movlw   0                	MOVLW	0x00
000ba6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ba8   0e64     movlw   0x64             	MOVLW	0x64
000baa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bac   ec10     call    0x220, 0         	CALL	_sleep_ms
000bae   f001
000bb0   0e04     movlw   0x4              	MOVLW	0x04
000bb2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
000bb4   0e01     movlw   0x1              	MOVLW	0x01
000bb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000bb8   ffd9
000bba   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
000b42   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b44   ffe5
000b46   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b48   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
000b4a   0e01     movlw   0x1              	MOVLW	0x01
000b4c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b4e   ec4d     call    0xa9a, 0         	CALL	_latched_lcd_enable
000b50   f005
000b52   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000b54   0000     nop                      	nop 
000b56   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
000b58   0e00     movlw   0                	MOVLW	0x00
000b5a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5c   ec4d     call    0xa9a, 0         	CALL	_latched_lcd_enable
000b5e   f005
000b60   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000b62   0000     nop                      	nop 
000b64   0000     nop                      	nop 
000b66   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b68   ffd9
000b6a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
0008f8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0008fa   ffe5
0008fc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0008fe   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
000900   0e01     movlw   0x1              	MOVLW	0x01
000902   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000904   ec6a     call    0xad4, 0         	CALL	_latched_lcd_power
000906   f005
000908   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00090a   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
00090c   6bb9     clrf    0xb9, 0x1        	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(1);
00090e   0e01     movlw   0x1              	MOVLW	0x01
000910   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000912   ecbc     call    0x978, 0         	CALL	_latched_lcd_cs1
000914   f004
000916   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(1);
000918   0e01     movlw   0x1              	MOVLW	0x01
00091a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00091c   ecd9     call    0x9b2, 0         	CALL	_latched_lcd_cs2
00091e   f004
000920   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
000922   ec57     call    0x6ae, 0         	CALL	_lcd_reset
000924   f003
                                           ;	.line	38; glcd.c	lcd_screenon(1);
000926   0e01     movlw   0x1              	MOVLW	0x01
000928   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00092a   ec96     call    0x72c, 0         	CALL	_lcd_screenon
00092c   f003
00092e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
000930   eccc     call    0x598, 0         	CALL	_lcd_cls
000932   f002
000934   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000936   ffd9
000938   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1458 (0x05b2) bytes ( 1.11%)
                                           ;           	  729 (0x02d9) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
