gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-17-2013  02:45:32
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 17 02:45:31 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	WDTPS=8192
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	_my_usart_open
                                           	global	_fifo_in_use
                                           	global	_fifo_put
                                           	global	_fifo_get
                                           	global	_base64decode
                                           	global	_base64encode
                                           	global	_validate_command
                                           	global	_reset
                                           	global	__debug
                                           	global	_i
                                           	global	_timer_1_ms
                                           	global	_sensor_inputs
                                           	global	_last_inputs
                                           	global	_output_ac_power_pwm
                                           	global	_ac_power_pwm_counter
                                           	global	_ad_inputs
                                           	global	_fifo_head
                                           	global	_fifo_tail
                                           	global	_fifo_buffer
                                           	global	_command
                                           	global	_command_index
                                           	global	_valid_command
                                           	global	__latch_2_data
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_crc16
                                           	extern	_sprintf
                                           	extern	_strchr
                                           	extern	_memcpy
                                           	extern	_adc_open
                                           	extern	_adc_conv
                                           	extern	_adc_busy
                                           	extern	_adc_read
                                           	extern	_adc_setchannel
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_usart_puts
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           	extern	__moduint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _timer_1_ms	res	4
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _fifo_head	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _fifo_tail	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _command_index	res	1
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _output_ac_power_pwm	res	6
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _main_c_1_102	res	1
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _sensor_inputs	res	1
                                           
                                           udata_pillefyrsstyring_8	udata
                                           _command	res	21
                                           
                                           udata_pillefyrsstyring_9	udata
                                           _valid_command	res	7
                                           
                                           udata_pillefyrsstyring_10	udata
                                           _main_buffer_1_102	res	10
                                           
                                           udata_pillefyrsstyring_11	udata
                                           _ad_inputs	res	16
                                           
                                           udata_pillefyrsstyring_12	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_13	udata
                                           _ac_power_pwm_counter	res	1
                                           
                                           udata_pillefyrsstyring_14	udata
                                           __latch_2_data	res	1
                                           
                                           udata_pillefyrsstyring_15	udata
                                           _fifo_buffer	res	100
                                           
                                           udata_pillefyrsstyring_16	udata
                                           _base64decode_xlate_1_149	res	17
                                           
                                           udata_pillefyrsstyring_17	udata
                                           _validate_command_decoded_command_1_154	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_isr_high_prio	code	0X000008
                                           ivec_0x1_isr_high_prio:
000008   eff3     goto    0x13e6           	GOTO	_isr_high_prio
00000a   f009
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x2_isr_low_prio	code	0X000018
                                           ivec_0x2_isr_low_prio:
000018   ef58     goto    0x22b0           	GOTO	_isr_low_prio
00001a   f011
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	46; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000828   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00082a   0bfc     andlw   0xfc             	ANDLW	0xfc
00082c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	47; pillefyrsstyring.c	OSCCONbits.IRCF = 0x7;	// 8 MHz
00082e   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000830   0b8f     andlw   0x8f             	ANDLW	0x8f
000832   0970     iorlw   0x70             	IORLW	0x70
000834   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	48; pillefyrsstyring.c	WDTCONbits.SWDTEN = 1;	// enable watchdog
000836   80d1     bsf     0xd1, 0, 0       	BSF	_WDTCONbits, 0
000838   0004     clrwdt                   	clrwdt 
00083a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	51; pillefyrsstyring.c	timer_1_ms = 0;
00083c   6b67     clrf    0x67, 0x1        	CLRF	_timer_1_ms, B
00083e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
000840   6b68     clrf    0x68, 0x1        	CLRF	(_timer_1_ms + 1), B
000842   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
000844   6b69     clrf    0x69, 0x1        	CLRF	(_timer_1_ms + 2), B
000846   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
000848   6b6a     clrf    0x6a, 0x1        	CLRF	(_timer_1_ms + 3), B
00084a   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	53; pillefyrsstyring.c	fifo_head = 0;
00084c   6b03     clrf    0x3, 0x1         	CLRF	_fifo_head, B
00084e   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
000850   6b04     clrf    0x4, 0x1         	CLRF	(_fifo_head + 1), B
000852   0108     movlb   0x8              	BANKSEL	_fifo_tail
                                           ;	.line	54; pillefyrsstyring.c	fifo_tail = 0;
000854   6b05     clrf    0x5, 0x1         	CLRF	_fifo_tail, B
000856   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
000858   6b06     clrf    0x6, 0x1         	CLRF	(_fifo_tail + 1), B
00085a   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	55; pillefyrsstyring.c	command_index = 0;
00085c   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	58; pillefyrsstyring.c	RCONbits.IPEN = 1;
00085e   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	60; pillefyrsstyring.c	init_timers();
000860   ec4b     call    0x2a96, 0        	CALL	_init_timers
000862   f015
                                           ;	.line	63; pillefyrsstyring.c	IPR1bits.RCIP = 0;
000864   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	64; pillefyrsstyring.c	IPR1bits.TXIP = 0;
000866   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	75; pillefyrsstyring.c	my_usart_open();
000868   ec14     call    0x2c28, 0        	CALL	_my_usart_open
00086a   f016
                                           ;	.line	77; pillefyrsstyring.c	sleep_ms(1000);	// let stuff settle...
00086c   0e00     movlw   0                	MOVLW	0x00
00086e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000870   0e00     movlw   0                	MOVLW	0x00
000872   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000874   0e03     movlw   0x3              	MOVLW	0x03
000876   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000878   0ee8     movlw   0xe8             	MOVLW	0xe8
00087a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00087c   ec47     call    0x168e, 0        	CALL	_sleep_ms
00087e   f00b
000880   0e04     movlw   0x4              	MOVLW	0x04
000882   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	78; pillefyrsstyring.c	usart_puts("OpenStoker starting... serial working\n\r");
000884   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000886   6e02     movwf   0x2, 0           	MOVWF	r0x02
000888   0e14     movlw   0x14             	MOVLW	HIGH(__str_0)
00088a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00088c   0efa     movlw   0xfa             	MOVLW	LOW(__str_0)
00088e   6e00     movwf   0, 0             	MOVWF	r0x00
000890   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000896   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000898   5000     movf    0, 0, 0          	MOVF	r0x00, W
00089a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00089c   ec6e     call    0x24dc, 0        	CALL	_usart_puts
00089e   f012
0008a0   0e03     movlw   0x3              	MOVLW	0x03
0008a2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	120; pillefyrsstyring.c	adc_open(ADC_CHN_0, ADC_FOSC_64, ADC_CFG_12A, ADC_FRM_RJUST | ADC_INT_OFF | ADC_VCFG_AN3_AN2);
0008a4   0eb0     movlw   0xb0             	MOVLW	0xb0
0008a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008a8   0e03     movlw   0x3              	MOVLW	0x03
0008aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ac   0e06     movlw   0x6              	MOVLW	0x06
0008ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b0   0e00     movlw   0                	MOVLW	0x00
0008b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b4   ec30     call    0x2460, 0        	CALL	_adc_open
0008b6   f012
0008b8   0e04     movlw   0x4              	MOVLW	0x04
0008ba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	123; pillefyrsstyring.c	init_latches();
0008bc   ec29     call    0x2c52, 0        	CALL	_init_latches
0008be   f016
                                           _00105_DS_:
                                           ;	.line	127; pillefyrsstyring.c	while (!fifo_in_use()) {
0008c0   ecb7     call    0x2b6e, 0        	CALL	_fifo_in_use
0008c2   f015
0008c4   6e00     movwf   0, 0             	MOVWF	r0x00
0008c6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008c8   e123     bnz     0x910            	BNZ	_00107_DS_
                                           ;	.line	128; pillefyrsstyring.c	latched_lcd_power(1);
0008ca   0e01     movlw   0x1              	MOVLW	0x01
0008cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ce   ecf4     call    0x29e8, 0        	CALL	_latched_lcd_power
0008d0   f014
0008d2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	129; pillefyrsstyring.c	sleep_ms(1000);
0008d4   0e00     movlw   0                	MOVLW	0x00
0008d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d8   0e00     movlw   0                	MOVLW	0x00
0008da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008dc   0e03     movlw   0x3              	MOVLW	0x03
0008de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e0   0ee8     movlw   0xe8             	MOVLW	0xe8
0008e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e4   ec47     call    0x168e, 0        	CALL	_sleep_ms
0008e6   f00b
0008e8   0e04     movlw   0x4              	MOVLW	0x04
0008ea   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	130; pillefyrsstyring.c	latched_lcd_power(0);
0008ec   0e00     movlw   0                	MOVLW	0x00
0008ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f0   ecf4     call    0x29e8, 0        	CALL	_latched_lcd_power
0008f2   f014
0008f4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; pillefyrsstyring.c	sleep_ms(1000);
0008f6   0e00     movlw   0                	MOVLW	0x00
0008f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fa   0e00     movlw   0                	MOVLW	0x00
0008fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fe   0e03     movlw   0x3              	MOVLW	0x03
000900   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000902   0ee8     movlw   0xe8             	MOVLW	0xe8
000904   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000906   ec47     call    0x168e, 0        	CALL	_sleep_ms
000908   f00b
00090a   0e04     movlw   0x4              	MOVLW	0x04
00090c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00090e   d7d8     bra     0x8c0            	BRA	_00105_DS_
                                           _00107_DS_:
                                           ;	.line	133; pillefyrsstyring.c	latched_lcd_power(1);
000910   0e01     movlw   0x1              	MOVLW	0x01
000912   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000914   ecf4     call    0x29e8, 0        	CALL	_latched_lcd_power
000916   f014
000918   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	134; pillefyrsstyring.c	RELAY = 1;
00091a   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
                                           ;	.line	136; pillefyrsstyring.c	last_inputs = get_inputs();
00091c   ec8c     call    0x2d18, 0        	CALL	_get_inputs
00091e   f016
000920   0108     movlb   0x8              	BANKSEL	_last_inputs
000922   6f10     movwf   0x10, 0x1        	MOVWF	_last_inputs, B
000924   010f     movlb   0xf              	BANKSEL	_output_ac_power_pwm
                                           ;	.line	138; pillefyrsstyring.c	output_ac_power_pwm[0] = 0;
000926   6b61     clrf    0x61, 0x1        	CLRF	_output_ac_power_pwm, B
000928   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 1)
                                           ;	.line	139; pillefyrsstyring.c	output_ac_power_pwm[1] = 0;
00092a   6b62     clrf    0x62, 0x1        	CLRF	(_output_ac_power_pwm + 1), B
00092c   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 2)
                                           ;	.line	140; pillefyrsstyring.c	output_ac_power_pwm[2] = 0;
00092e   6b63     clrf    0x63, 0x1        	CLRF	(_output_ac_power_pwm + 2), B
000930   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 3)
                                           ;	.line	141; pillefyrsstyring.c	output_ac_power_pwm[3] = 0;
000932   6b64     clrf    0x64, 0x1        	CLRF	(_output_ac_power_pwm + 3), B
000934   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 4)
                                           ;	.line	142; pillefyrsstyring.c	output_ac_power_pwm[4] = 0;
000936   6b65     clrf    0x65, 0x1        	CLRF	(_output_ac_power_pwm + 4), B
000938   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 5)
                                           ;	.line	143; pillefyrsstyring.c	output_ac_power_pwm[5] = 0;
00093a   6b66     clrf    0x66, 0x1        	CLRF	(_output_ac_power_pwm + 5), B
                                           _00135_DS_:
                                           ;	.line	149; pillefyrsstyring.c	if (fifo_get(&c)) {
00093c   0e08     movlw   0x8              	MOVLW	HIGH(_main_c_1_102)
00093e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000940   0e11     movlw   0x11             	MOVLW	LOW(_main_c_1_102)
000942   6e00     movwf   0, 0             	MOVWF	r0x00
000944   0e80     movlw   0x80             	MOVLW	0x80
000946   6e02     movwf   0x2, 0           	MOVWF	r0x02
000948   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00094a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00094c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00094e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000950   5000     movf    0, 0, 0          	MOVF	r0x00, W
000952   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000954   ec12     call    0x2024, 0        	CALL	_fifo_get
000956   f010
000958   6e00     movwf   0, 0             	MOVWF	r0x00
00095a   0e03     movlw   0x3              	MOVLW	0x03
00095c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00095e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000960   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000962   d13c     bra     0xbdc            	BRA	_00127_DS_
000964   0108     movlb   0x8              	BANKSEL	_main_c_1_102
                                           ;	.line	150; pillefyrsstyring.c	if (c == '\n' || c == '.') {
000966   5111     movf    0x11, 0, 0x1     	MOVF	_main_c_1_102, W, B
000968   0a0a     xorlw   0xa              	XORLW	0x0a
00096a   e005     bz      0x976            	BZ	_00122_DS_
                                           _00208_DS_:
00096c   0108     movlb   0x8              	BANKSEL	_main_c_1_102
00096e   5111     movf    0x11, 0, 0x1     	MOVF	_main_c_1_102, W, B
000970   0a2e     xorlw   0x2e             	XORLW	0x2e
000972   e001     bz      0x976            	BZ	_00122_DS_
000974   d108     bra     0xb86            	BRA	_00123_DS_
                                           _00122_DS_:
000976   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	152; pillefyrsstyring.c	command_index = 0;
000978   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	153; pillefyrsstyring.c	if (validate_command(command, valid_command)) {
00097a   0e00     movlw   0                	MOVLW	HIGH(_command)
00097c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00097e   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000980   6e00     movwf   0, 0             	MOVWF	r0x00
000982   0e80     movlw   0x80             	MOVLW	0x80
000984   6e02     movwf   0x2, 0           	MOVWF	r0x02
000986   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000988   6e04     movwf   0x4, 0           	MOVWF	r0x04
00098a   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
00098c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00098e   0e80     movlw   0x80             	MOVLW	0x80
000990   6e05     movwf   0x5, 0           	MOVWF	r0x05
000992   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000994   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000996   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000998   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00099a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00099c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00099e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009aa   ec9e     call    0x153c, 0        	CALL	_validate_command
0009ac   f00a
0009ae   6e00     movwf   0, 0             	MOVWF	r0x00
0009b0   0e06     movlw   0x6              	MOVLW	0x06
0009b2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0009b4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009b6   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0009b8   d0e2     bra     0xb7e            	BRA	_00117_DS_
0009ba   0004     clrwdt                   	clrwdt 
0009bc   0100     movlb   0                	BANKSEL	_valid_command
                                           ;	.line	156; pillefyrsstyring.c	switch (valid_command[0]) {					// only look at first character
0009be   51f9     movf    0xf9, 0, 0x1     	MOVF	_valid_command, W, B
0009c0   6e00     movwf   0, 0             	MOVWF	r0x00
0009c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c4   0a61     xorlw   0x61             	XORLW	0x61
0009c6   e101     bnz     0x9ca            	BNZ	_00212_DS_
0009c8   d096     bra     0xaf6            	BRA	_00156_DS_
                                           _00212_DS_:
0009ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009cc   0a67     xorlw   0x67             	XORLW	0x67
0009ce   e101     bnz     0x9d2            	BNZ	_00214_DS_
0009d0   d03c     bra     0xa4a            	BRA	_00110_DS_
                                           _00214_DS_:
0009d2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d4   0a73     xorlw   0x73             	XORLW	0x73
0009d6   e005     bz      0x9e2            	BZ	_00108_DS_
0009d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009da   0a7a     xorlw   0x7a             	XORLW	0x7a
0009dc   e101     bnz     0x9e0            	BNZ	_00218_DS_
0009de   d069     bra     0xab2            	BRA	_00111_DS_
                                           _00218_DS_:
0009e0   d0ca     bra     0xb76            	BRA	_00114_DS_
                                           _00108_DS_:
                                           ;	.line	158; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009e2   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00137_DS_:
                                           ;	.line	159; pillefyrsstyring.c	output_ac_power_pwm[j] = valid_command[j + 1];
0009e4   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
0009e6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0009e8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0009ea   6a02     clrf    0x2, 0           	CLRF	r0x02
0009ec   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
0009ee   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009f0   2800     incf    0, 0, 0          	INCF	r0x00, W
0009f2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0009f4   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
0009f6   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0009f8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0009fa   6a05     clrf    0x5, 0           	CLRF	r0x05
0009fc   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
0009fe   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000a00   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000a02   ffe9
000a04   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000a06   ffea
000a08   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
000a0a   f004
000a0c   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000a0e   ffe9
000a10   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
000a12   ffea
000a14   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
000a16   ffef
                                           ;	.line	158; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
000a18   c003     movff   0x3, 0           	MOVFF	r0x03, r0x00
000a1a   f000
000a1c   0e06     movlw   0x6              	MOVLW	0x06
000a1e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000a20   e3e1     bnc     0x9e4            	BNC	_00137_DS_
                                           ;	.line	161; pillefyrsstyring.c	usart_putc('!');	// ok values set to ac power pwm system
000a22   0e21     movlw   0x21             	MOVLW	0x21
000a24   ec0e     call    0x2e1c, 0        	CALL	_usart_putc
000a26   f017
                                           ;	.line	162; pillefyrsstyring.c	usart_puts("\n\r");
000a28   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a2a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a2c   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000a2e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a30   0e22     movlw   0x22             	MOVLW	LOW(__str_1)
000a32   6e00     movwf   0, 0             	MOVWF	r0x00
000a34   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a38   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a3a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a3e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a40   ec6e     call    0x24dc, 0        	CALL	_usart_puts
000a42   f012
000a44   0e03     movlw   0x3              	MOVLW	0x03
000a46   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	163; pillefyrsstyring.c	break;
000a48   d0c9     bra     0xbdc            	BRA	_00127_DS_
                                           _00110_DS_:
                                           ;	.line	165; pillefyrsstyring.c	sprintf(buffer, "g%02x\n\r", sensor_inputs);
000a4a   c812     movff   0x812, 0         	MOVFF	_sensor_inputs, r0x00
000a4c   f000
000a4e   6a01     clrf    0x1, 0           	CLRF	r0x01
000a50   0e00     movlw   0                	MOVLW	UPPER(__str_2)
000a52   6e04     movwf   0x4, 0           	MOVWF	r0x04
000a54   0e15     movlw   0x15             	MOVLW	HIGH(__str_2)
000a56   6e03     movwf   0x3, 0           	MOVWF	r0x03
000a58   0e26     movlw   0x26             	MOVLW	LOW(__str_2)
000a5a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a5c   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a5e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a60   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a62   6e05     movwf   0x5, 0           	MOVWF	r0x05
000a64   0e80     movlw   0x80             	MOVLW	0x80
000a66   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a68   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a6c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a70   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a74   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a78   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a7c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a80   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a84   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a86   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a88   ecbd     call    0x1b7a, 0        	CALL	_sprintf
000a8a   f00d
000a8c   0e08     movlw   0x8              	MOVLW	0x08
000a8e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	166; pillefyrsstyring.c	usart_puts(buffer);
000a90   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a92   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a94   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a96   6e00     movwf   0, 0             	MOVWF	r0x00
000a98   0e80     movlw   0x80             	MOVLW	0x80
000a9a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a9c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a9e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aa2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aa6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa8   ec6e     call    0x24dc, 0        	CALL	_usart_puts
000aaa   f012
000aac   0e03     movlw   0x3              	MOVLW	0x03
000aae   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	167; pillefyrsstyring.c	break;
000ab0   d095     bra     0xbdc            	BRA	_00127_DS_
                                           _00111_DS_:
                                           ;	.line	169; pillefyrsstyring.c	usart_putc('z');
000ab2   0e7a     movlw   0x7a             	MOVLW	0x7a
000ab4   ec0e     call    0x2e1c, 0        	CALL	_usart_putc
000ab6   f017
                                           ;	.line	170; pillefyrsstyring.c	usart_puts("\n\r");
000ab8   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000aba   6e02     movwf   0x2, 0           	MOVWF	r0x02
000abc   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000abe   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ac0   0e22     movlw   0x22             	MOVLW	LOW(__str_1)
000ac2   6e00     movwf   0, 0             	MOVWF	r0x00
000ac4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ac6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000acc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ace   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad0   ec6e     call    0x24dc, 0        	CALL	_usart_puts
000ad2   f012
000ad4   0e03     movlw   0x3              	MOVLW	0x03
000ad6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	171; pillefyrsstyring.c	sleep_ms(100);
000ad8   0e00     movlw   0                	MOVLW	0x00
000ada   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000adc   0e00     movlw   0                	MOVLW	0x00
000ade   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae0   0e00     movlw   0                	MOVLW	0x00
000ae2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae4   0e64     movlw   0x64             	MOVLW	0x64
000ae6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae8   ec47     call    0x168e, 0        	CALL	_sleep_ms
000aea   f00b
000aec   0e04     movlw   0x4              	MOVLW	0x04
000aee   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	172; pillefyrsstyring.c	reset();
000af0   ec06     call    0x2e0c, 0        	CALL	_reset
000af2   f017
                                           ;	.line	173; pillefyrsstyring.c	break;
000af4   d073     bra     0xbdc            	BRA	_00127_DS_
                                           _00156_DS_:
                                           ;	.line	175; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000af6   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00139_DS_:
                                           ;	.line	176; pillefyrsstyring.c	sprintf(buffer, "ad%d: %04x\n\r", j, ad_inputs[0]);
000af8   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000afa   f001
000afc   6a02     clrf    0x2, 0           	CLRF	r0x02
000afe   0e00     movlw   0                	MOVLW	UPPER(__str_3)
000b00   6e05     movwf   0x5, 0           	MOVWF	r0x05
000b02   0e15     movlw   0x15             	MOVLW	HIGH(__str_3)
000b04   6e04     movwf   0x4, 0           	MOVWF	r0x04
000b06   0e2e     movlw   0x2e             	MOVLW	LOW(__str_3)
000b08   6e03     movwf   0x3, 0           	MOVWF	r0x03
000b0a   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000b0c   6e07     movwf   0x7, 0           	MOVWF	r0x07
000b0e   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000b10   6e06     movwf   0x6, 0           	MOVWF	r0x06
000b12   0e80     movlw   0x80             	MOVLW	0x80
000b14   6e08     movwf   0x8, 0           	MOVWF	r0x08
000b16   010f     movlb   0xf              	BANKSEL	(_ad_inputs + 1)
000b18   5132     movf    0x32, 0, 0x1     	MOVF	(_ad_inputs + 1), W, B
000b1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b1c   010f     movlb   0xf              	BANKSEL	_ad_inputs
000b1e   5131     movf    0x31, 0, 0x1     	MOVF	_ad_inputs, W, B
000b20   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b22   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b24   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b26   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b28   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b2c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b30   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b32   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b34   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b36   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000b38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b3a   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000b3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b3e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b42   ecbd     call    0x1b7a, 0        	CALL	_sprintf
000b44   f00d
000b46   0e0a     movlw   0xa              	MOVLW	0x0a
000b48   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	177; pillefyrsstyring.c	usart_puts(buffer);
000b4a   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000b4c   6e02     movwf   0x2, 0           	MOVWF	r0x02
000b4e   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000b50   6e01     movwf   0x1, 0           	MOVWF	r0x01
000b52   0e80     movlw   0x80             	MOVLW	0x80
000b54   6e03     movwf   0x3, 0           	MOVWF	r0x03
000b56   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b58   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b62   ec6e     call    0x24dc, 0        	CALL	_usart_puts
000b64   f012
000b66   0e03     movlw   0x3              	MOVLW	0x03
000b68   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	175; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000b6a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000b6c   0e08     movlw   0x8              	MOVLW	0x08
000b6e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000b70   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000b72   d7c2     bra     0xaf8            	BRA	_00139_DS_
                                           ;	.line	179; pillefyrsstyring.c	break;
000b74   d033     bra     0xbdc            	BRA	_00127_DS_
                                           _00114_DS_:
                                           ;	.line	181; pillefyrsstyring.c	usart_putc('?');	// unknown command
000b76   0e3f     movlw   0x3f             	MOVLW	0x3f
000b78   ec0e     call    0x2e1c, 0        	CALL	_usart_putc
000b7a   f017
                                           ;	.line	182; pillefyrsstyring.c	}		
000b7c   d02f     bra     0xbdc            	BRA	_00127_DS_
                                           _00117_DS_:
                                           ;	.line	185; pillefyrsstyring.c	usart_putc('?');			// command not valid
000b7e   0e3f     movlw   0x3f             	MOVLW	0x3f
000b80   ec0e     call    0x2e1c, 0        	CALL	_usart_putc
000b82   f017
000b84   d02b     bra     0xbdc            	BRA	_00127_DS_
                                           _00123_DS_:
                                           ;	.line	191; pillefyrsstyring.c	if (command_index <= COMMAND_LENGTH) {
000b86   0e15     movlw   0x15             	MOVLW	0x15
000b88   0108     movlb   0x8              	BANKSEL	_command_index
000b8a   5d0f     subwf   0xf, 0, 0x1      	SUBWF	_command_index, W, B
000b8c   e210     bc      0xbae            	BC	_00120_DS_
                                           ;	.line	192; pillefyrsstyring.c	command[command_index] = c;
000b8e   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000b90   0108     movlb   0x8              	BANKSEL	_command_index
000b92   250f     addwf   0xf, 0, 0x1      	ADDWF	_command_index, W, B
000b94   6e00     movwf   0, 0             	MOVWF	r0x00
000b96   6a01     clrf    0x1, 0           	CLRF	r0x01
000b98   0e00     movlw   0                	MOVLW	HIGH(_command)
000b9a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000b9c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000b9e   ffe9
000ba0   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000ba2   ffea
000ba4   c811     movff   0x811, 0xfef     	MOVFF	_main_c_1_102, INDF0
000ba6   ffef
000ba8   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	193; pillefyrsstyring.c	command_index++;
000baa   2b0f     incf    0xf, 0x1, 0x1    	INCF	_command_index, F, B
000bac   d017     bra     0xbdc            	BRA	_00127_DS_
                                           _00120_DS_:
000bae   0100     movlb   0                	BANKSEL	(_command + 20)
                                           ;	.line	196; pillefyrsstyring.c	command[COMMAND_LENGTH] = '\0';	// null terminate it
000bb0   6bf8     clrf    0xf8, 0x1        	CLRF	(_command + 20), B
000bb2   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	197; pillefyrsstyring.c	command_index = 0;
000bb4   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	198; pillefyrsstyring.c	usart_putc('+');		// overflow
000bb6   0e2b     movlw   0x2b             	MOVLW	0x2b
000bb8   ec0e     call    0x2e1c, 0        	CALL	_usart_putc
000bba   f017
                                           ;	.line	199; pillefyrsstyring.c	usart_puts("\n\r");
000bbc   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000bbe   6e02     movwf   0x2, 0           	MOVWF	r0x02
000bc0   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000bc2   6e01     movwf   0x1, 0           	MOVWF	r0x01
000bc4   0e22     movlw   0x22             	MOVLW	LOW(__str_1)
000bc6   6e00     movwf   0, 0             	MOVWF	r0x00
000bc8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000bca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bcc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000bce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd0   5000     movf    0, 0, 0          	MOVF	r0x00, W
000bd2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd4   ec6e     call    0x24dc, 0        	CALL	_usart_puts
000bd6   f012
000bd8   0e03     movlw   0x3              	MOVLW	0x03
000bda   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00127_DS_:
000bdc   0108     movlb   0x8              	BANKSEL	_sensor_inputs
                                           ;	.line	204; pillefyrsstyring.c	if (sensor_inputs != last_inputs) {
000bde   5112     movf    0x12, 0, 0x1     	MOVF	_sensor_inputs, W, B
000be0   0108     movlb   0x8              	BANKSEL	_last_inputs
000be2   1910     xorwf   0x10, 0, 0x1     	XORWF	_last_inputs, W, B
000be4   e004     bz      0xbee            	BZ	_00162_DS_
                                           ;	.line	205; pillefyrsstyring.c	last_inputs = sensor_inputs;
000be6   c812     movff   0x812, 0x810     	MOVFF	_sensor_inputs, _last_inputs
000be8   f810
                                           ;	.line	206; pillefyrsstyring.c	_debug();	// blocks main for a while :-/
000bea   ec02     call    0x2604, 0        	CALL	__debug
000bec   f013
                                           _00162_DS_:
                                           ;	.line	210; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000bee   6a00     clrf    0, 0             	CLRF	r0x00
000bf0   6a01     clrf    0x1, 0           	CLRF	r0x01
000bf2   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00141_DS_:
                                           ;	.line	211; pillefyrsstyring.c	adc_setchannel(j);
000bf4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000bf6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bf8   ec11     call    0x2a22, 0        	CALL	_adc_setchannel
000bfa   f015
000bfc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	212; pillefyrsstyring.c	adc_conv();
000bfe   ec0a     call    0x14, 0          	CALL	_adc_conv
000c00   f000
                                           _00130_DS_:
                                           ;	.line	213; pillefyrsstyring.c	while(adc_busy()) {
000c02   ec29     call    0x2e52, 0        	CALL	_adc_busy
000c04   f017
000c06   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c08   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c0a   e1fb     bnz     0xc02            	BNZ	_00130_DS_
                                           ;	.line	216; pillefyrsstyring.c	ad_inputs[j] = adc_read();
000c0c   0e31     movlw   0x31             	MOVLW	LOW(_ad_inputs)
000c0e   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
000c10   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c12   0e0f     movlw   0xf              	MOVLW	HIGH(_ad_inputs)
000c14   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000c16   6e04     movwf   0x4, 0           	MOVWF	r0x04
000c18   ec1d     call    0x2e3a, 0        	CALL	_adc_read
000c1a   f017
000c1c   6e05     movwf   0x5, 0           	MOVWF	r0x05
000c1e   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
000c20   f006
000c22   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000c24   ffe9
000c26   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000c28   ffea
000c2a   c005     movff   0x5, 0xfee       	MOVFF	r0x05, POSTINC0
000c2c   ffee
000c2e   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000c30   ffef
                                           ;	.line	210; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000c32   0e02     movlw   0x2              	MOVLW	0x02
000c34   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000c36   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000c38   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000c3a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000c3c   0e08     movlw   0x8              	MOVLW	0x08
000c3e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000c40   e3d9     bnc     0xbf4            	BNC	_00141_DS_
000c42   d67c     bra     0x93c            	BRA	_00135_DS_
000c44   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	496; pillefyrsstyring.c	void _debug() {
002604   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002606   ffe5
002608   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00260a   ffd9
                                           ;	.line	497; pillefyrsstyring.c	latched_lcd_power(0);
00260c   0e00     movlw   0                	MOVLW	0x00
00260e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002610   ecf4     call    0x29e8, 0        	CALL	_latched_lcd_power
002612   f014
002614   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	498; pillefyrsstyring.c	sleep_ms(200);
002616   0e00     movlw   0                	MOVLW	0x00
002618   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00261a   0e00     movlw   0                	MOVLW	0x00
00261c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00261e   0e00     movlw   0                	MOVLW	0x00
002620   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002622   0ec8     movlw   0xc8             	MOVLW	0xc8
002624   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002626   ec47     call    0x168e, 0        	CALL	_sleep_ms
002628   f00b
00262a   0e04     movlw   0x4              	MOVLW	0x04
00262c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	499; pillefyrsstyring.c	latched_lcd_power(1);
00262e   0e01     movlw   0x1              	MOVLW	0x01
002630   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002632   ecf4     call    0x29e8, 0        	CALL	_latched_lcd_power
002634   f014
002636   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	500; pillefyrsstyring.c	sleep_ms(200);
002638   0e00     movlw   0                	MOVLW	0x00
00263a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00263c   0e00     movlw   0                	MOVLW	0x00
00263e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002640   0e00     movlw   0                	MOVLW	0x00
002642   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002644   0ec8     movlw   0xc8             	MOVLW	0xc8
002646   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002648   ec47     call    0x168e, 0        	CALL	_sleep_ms
00264a   f00b
00264c   0e04     movlw   0x4              	MOVLW	0x04
00264e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002650   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002652   ffd9
002654   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__reset	code
                                           _reset:
                                           ;	.line	490; pillefyrsstyring.c	void reset() {
002e0c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002e0e   ffe5
002e10   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002e12   ffd9
002e14   00ff     reset                    	reset
002e16   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e18   ffd9
002e1a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__validate_command	code
                                           _validate_command:
                                           ;	.line	473; pillefyrsstyring.c	unsigned char validate_command(unsigned char *encoded_command, unsigned char *validated_command) {
00153c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00153e   ffe5
001540   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001542   ffd9
001544   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001546   ffe5
001548   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00154a   ffe5
00154c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00154e   ffe5
001550   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001552   ffe5
001554   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001556   ffe5
001558   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00155a   ffe5
00155c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00155e   ffe5
001560   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001562   ffe5
001564   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001566   ffe5
001568   0e02     movlw   0x2              	MOVLW	0x02
00156a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00156c   f000
00156e   0e03     movlw   0x3              	MOVLW	0x03
001570   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001572   f001
001574   0e04     movlw   0x4              	MOVLW	0x04
001576   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001578   f002
00157a   0e05     movlw   0x5              	MOVLW	0x05
00157c   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00157e   f003
001580   0e06     movlw   0x6              	MOVLW	0x06
001582   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
001584   f004
001586   0e07     movlw   0x7              	MOVLW	0x07
001588   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
00158a   f005
                                           ;	.line	477; pillefyrsstyring.c	base64decode(encoded_command, decoded_command);
00158c   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
00158e   6e07     movwf   0x7, 0           	MOVWF	r0x07
001590   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
001592   6e06     movwf   0x6, 0           	MOVWF	r0x06
001594   0e80     movlw   0x80             	MOVLW	0x80
001596   6e08     movwf   0x8, 0           	MOVWF	r0x08
001598   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00159a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00159c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00159e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0015a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0015a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ac   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015b0   ec2d     call    0x105a, 0        	CALL	_base64decode
0015b2   f008
0015b4   0e06     movlw   0x6              	MOVLW	0x06
0015b6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	478; pillefyrsstyring.c	received_checksum = (decoded_command[7] << 8) + decoded_command[8];
0015b8   cf5f     movff   0xf5f, 0         	MOVFF	(_validate_command_decoded_command_1_154 + 7), r0x00
0015ba   f000
0015bc   6a01     clrf    0x1, 0           	CLRF	r0x01
0015be   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015c0   6e06     movwf   0x6, 0           	MOVWF	r0x06
0015c2   6a02     clrf    0x2, 0           	CLRF	r0x02
0015c4   cf60     movff   0xf60, 0         	MOVFF	(_validate_command_decoded_command_1_154 + 8), r0x00
0015c6   f000
0015c8   6a01     clrf    0x1, 0           	CLRF	r0x01
0015ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015cc   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
0015ce   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015d0   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
                                           ;	.line	479; pillefyrsstyring.c	checksum = crc16(decoded_command, 7, 0);
0015d2   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
0015d4   6e01     movwf   0x1, 0           	MOVWF	r0x01
0015d6   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
0015d8   6e00     movwf   0, 0             	MOVWF	r0x00
0015da   0e80     movlw   0x80             	MOVLW	0x80
0015dc   6e07     movwf   0x7, 0           	MOVWF	r0x07
0015de   0e00     movlw   0                	MOVLW	0x00
0015e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e2   0e00     movlw   0                	MOVLW	0x00
0015e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e6   0e00     movlw   0                	MOVLW	0x00
0015e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ea   0e00     movlw   0                	MOVLW	0x00
0015ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ee   0e00     movlw   0                	MOVLW	0x00
0015f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f2   0e07     movlw   0x7              	MOVLW	0x07
0015f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f6   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0015f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015fa   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015fe   5000     movf    0, 0, 0          	MOVF	r0x00, W
001600   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001602   ecef     call    0x17de, 0        	CALL	_crc16
001604   f00b
001606   6e00     movwf   0, 0             	MOVWF	r0x00
001608   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
00160a   f001
00160c   0e09     movlw   0x9              	MOVLW	0x09
00160e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	481; pillefyrsstyring.c	if (received_checksum == checksum) {
001610   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001612   1800     xorwf   0, 0, 0          	XORWF	r0x00, W
001614   e103     bnz     0x161c           	BNZ	_00381_DS_
001616   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001618   1801     xorwf   0x1, 0, 0        	XORWF	r0x01, W
00161a   e001     bz      0x161e           	BZ	_00382_DS_
                                           _00381_DS_:
00161c   d022     bra     0x1662           	BRA	_00374_DS_
                                           _00382_DS_:
                                           ;	.line	482; pillefyrsstyring.c	memcpy(validated_command, decoded_command, 7);
00161e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001620   6e05     movwf   0x5, 0           	MOVWF	r0x05
001622   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001624   6e04     movwf   0x4, 0           	MOVWF	r0x04
001626   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001628   6e03     movwf   0x3, 0           	MOVWF	r0x03
00162a   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
00162c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00162e   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
001630   6e00     movwf   0, 0             	MOVWF	r0x00
001632   0e80     movlw   0x80             	MOVLW	0x80
001634   6e02     movwf   0x2, 0           	MOVWF	r0x02
001636   0e00     movlw   0                	MOVLW	0x00
001638   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00163a   0e07     movlw   0x7              	MOVLW	0x07
00163c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00163e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001640   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001642   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001644   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001646   5000     movf    0, 0, 0          	MOVF	r0x00, W
001648   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00164a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00164c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00164e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001650   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001652   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001654   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001656   ecd0     call    0x1da0, 0        	CALL	_memcpy
001658   f00e
00165a   0e08     movlw   0x8              	MOVLW	0x08
00165c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	483; pillefyrsstyring.c	return 1;
00165e   0e01     movlw   0x1              	MOVLW	0x01
001660   d001     bra     0x1664           	BRA	_00376_DS_
                                           _00374_DS_:
                                           ;	.line	486; pillefyrsstyring.c	return 0;
001662   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00376_DS_:
001664   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001666   f008
001668   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00166a   f007
00166c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00166e   f006
001670   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001672   f005
001674   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001676   f004
001678   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00167a   f003
00167c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00167e   f002
001680   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001682   f001
001684   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001686   f000
001688   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00168a   ffd9
00168c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64encode	code
                                           _base64encode:
                                           ;	.line	463; pillefyrsstyring.c	void base64encode(unsigned char *s) {
002e2c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002e2e   ffe5
002e30   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002e32   ffd9
                                           ;	.line	471; pillefyrsstyring.c	}
002e34   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e36   ffd9
002e38   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64decode	code
                                           _base64decode:
                                           ;	.line	448; pillefyrsstyring.c	void base64decode(unsigned char *s, unsigned char *buffer) {
00105a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00105c   ffe5
00105e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001060   ffd9
001062   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001064   ffe5
001066   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001068   ffe5
00106a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00106c   ffe5
00106e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001070   ffe5
001072   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001074   ffe5
001076   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001078   ffe5
00107a   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00107c   ffe5
00107e   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001080   ffe5
001082   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001084   ffe5
001086   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001088   ffe5
00108a   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
00108c   ffe5
00108e   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
001090   ffe5
001092   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
001094   ffe5
001096   0e02     movlw   0x2              	MOVLW	0x02
001098   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00109a   f000
00109c   0e03     movlw   0x3              	MOVLW	0x03
00109e   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0010a0   f001
0010a2   0e04     movlw   0x4              	MOVLW	0x04
0010a4   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0010a6   f002
0010a8   0e05     movlw   0x5              	MOVLW	0x05
0010aa   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0010ac   f003
0010ae   0e06     movlw   0x6              	MOVLW	0x06
0010b0   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
0010b2   f004
0010b4   0e07     movlw   0x7              	MOVLW	0x07
0010b6   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
0010b8   f005
                                           ;	.line	453; pillefyrsstyring.c	char xlate[] = "0123456789abcdef";
0010ba   0e30     movlw   0x30             	MOVLW	0x30
0010bc   010f     movlb   0xf              	BANKSEL	_base64decode_xlate_1_149
0010be   6f20     movwf   0x20, 0x1        	MOVWF	_base64decode_xlate_1_149, B
0010c0   0e31     movlw   0x31             	MOVLW	0x31
0010c2   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 1)
0010c4   6f21     movwf   0x21, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 1), B
0010c6   0e32     movlw   0x32             	MOVLW	0x32
0010c8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 2)
0010ca   6f22     movwf   0x22, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 2), B
0010cc   0e33     movlw   0x33             	MOVLW	0x33
0010ce   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 3)
0010d0   6f23     movwf   0x23, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 3), B
0010d2   0e34     movlw   0x34             	MOVLW	0x34
0010d4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 4)
0010d6   6f24     movwf   0x24, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 4), B
0010d8   0e35     movlw   0x35             	MOVLW	0x35
0010da   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 5)
0010dc   6f25     movwf   0x25, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 5), B
0010de   0e36     movlw   0x36             	MOVLW	0x36
0010e0   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 6)
0010e2   6f26     movwf   0x26, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 6), B
0010e4   0e37     movlw   0x37             	MOVLW	0x37
0010e6   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 7)
0010e8   6f27     movwf   0x27, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 7), B
0010ea   0e38     movlw   0x38             	MOVLW	0x38
0010ec   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 8)
0010ee   6f28     movwf   0x28, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 8), B
0010f0   0e39     movlw   0x39             	MOVLW	0x39
0010f2   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 9)
0010f4   6f29     movwf   0x29, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 9), B
0010f6   0e61     movlw   0x61             	MOVLW	0x61
0010f8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 10)
0010fa   6f2a     movwf   0x2a, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 10), B
0010fc   0e62     movlw   0x62             	MOVLW	0x62
0010fe   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 11)
001100   6f2b     movwf   0x2b, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 11), B
001102   0e63     movlw   0x63             	MOVLW	0x63
001104   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 12)
001106   6f2c     movwf   0x2c, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 12), B
001108   0e64     movlw   0x64             	MOVLW	0x64
00110a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 13)
00110c   6f2d     movwf   0x2d, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 13), B
00110e   0e65     movlw   0x65             	MOVLW	0x65
001110   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 14)
001112   6f2e     movwf   0x2e, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 14), B
001114   0e66     movlw   0x66             	MOVLW	0x66
001116   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 15)
001118   6f2f     movwf   0x2f, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 15), B
00111a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 16)
00111c   6b30     clrf    0x30, 0x1        	CLRF	(_base64decode_xlate_1_149 + 16), B
                                           _00351_DS_:
                                           ;	.line	455; pillefyrsstyring.c	while (*h) {
00111e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001120   ffe9
001122   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001124   fff3
001126   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001128   ecb0     call    0x2d60, 0        	CALL	__gptrget1
00112a   f016
00112c   6e06     movwf   0x6, 0           	MOVWF	r0x06
00112e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001130   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001132   d060     bra     0x11f4           	BRA	_00354_DS_
                                           ;	.line	456; pillefyrsstyring.c	*b = ((strchr(xlate, *h) - xlate) * 16) /* multiply leading digit by 16 */
001134   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001136   6e08     movwf   0x8, 0           	MOVWF	r0x08
001138   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
00113a   6e07     movwf   0x7, 0           	MOVWF	r0x07
00113c   0e80     movlw   0x80             	MOVLW	0x80
00113e   6e09     movwf   0x9, 0           	MOVWF	r0x09
001140   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001142   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001144   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001146   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001148   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00114a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00114c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00114e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001150   eca4     call    0x2348, 0        	CALL	_strchr
001152   f011
001154   6e06     movwf   0x6, 0           	MOVWF	r0x06
001156   cff3     movff   0xff3, 0x7       	MOVFF	PRODL, r0x07
001158   f007
00115a   cff4     movff   0xff4, 0x8       	MOVFF	PRODH, r0x08
00115c   f008
00115e   0e04     movlw   0x4              	MOVLW	0x04
001160   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001162   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
001164   5e06     subwf   0x6, 0x1, 0      	SUBWF	r0x06, F
001166   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001168   5a07     subwfb  0x7, 0x1, 0      	SUBWFB	r0x07, F
                                           ; ;multiply lit val:0x10 by variable r0x06 and store in r0x06
00116a   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00116c   0d10     mullw   0x10             	MULLW	0x10
00116e   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
001170   f006
                                           ;	.line	457; pillefyrsstyring.c	+ ((strchr(xlate, *(h+1)) - xlate));
001172   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001174   6e08     movwf   0x8, 0           	MOVWF	r0x08
001176   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
001178   6e07     movwf   0x7, 0           	MOVWF	r0x07
00117a   0e80     movlw   0x80             	MOVLW	0x80
00117c   6e09     movwf   0x9, 0           	MOVWF	r0x09
00117e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001180   0f01     addlw   0x1              	ADDLW	0x01
001182   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001184   0e00     movlw   0                	MOVLW	0x00
001186   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
001188   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
00118a   0e00     movlw   0                	MOVLW	0x00
00118c   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00118e   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001190   c00a     movff   0xa, 0xfe9       	MOVFF	r0x0a, FSR0L
001192   ffe9
001194   c00b     movff   0xb, 0xff3       	MOVFF	r0x0b, PRODL
001196   fff3
001198   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
00119a   ecb0     call    0x2d60, 0        	CALL	__gptrget1
00119c   f016
00119e   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0011a0   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0011a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011a4   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0011a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011a8   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0011aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011ac   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0011ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011b0   eca4     call    0x2348, 0        	CALL	_strchr
0011b2   f011
0011b4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0011b6   cff3     movff   0xff3, 0x8       	MOVFF	PRODL, r0x08
0011b8   f008
0011ba   cff4     movff   0xff4, 0x9       	MOVFF	PRODH, r0x09
0011bc   f009
0011be   0e04     movlw   0x4              	MOVLW	0x04
0011c0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0011c2   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
0011c4   5e07     subwf   0x7, 0x1, 0      	SUBWF	r0x07, F
0011c6   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
0011c8   5a08     subwfb  0x8, 0x1, 0      	SUBWFB	r0x08, F
0011ca   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0011cc   2606     addwf   0x6, 0x1, 0      	ADDWF	r0x06, F
0011ce   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0011d0   ffe5
0011d2   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0011d4   ffe9
0011d6   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0011d8   fff3
0011da   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0011dc   ecde     call    0x2dbc, 0        	CALL	__gptrput1
0011de   f016
                                           ;	.line	458; pillefyrsstyring.c	h += 2;
0011e0   0e02     movlw   0x2              	MOVLW	0x02
0011e2   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0011e4   0e00     movlw   0                	MOVLW	0x00
0011e6   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0011e8   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
                                           ;	.line	459; pillefyrsstyring.c	b++;
0011ea   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0011ec   e398     bnc     0x111e           	BNC	_00351_DS_
0011ee   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
0011f0   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
                                           _00363_DS_:
0011f2   d795     bra     0x111e           	BRA	_00351_DS_
                                           _00354_DS_:
0011f4   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0011f6   f00c
0011f8   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0011fa   f00b
0011fc   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0011fe   f00a
001200   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001202   f009
001204   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001206   f008
001208   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00120a   f007
00120c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00120e   f006
001210   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001212   f005
001214   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001216   f004
001218   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00121a   f003
00121c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00121e   f002
001220   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001222   f001
001224   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001226   f000
001228   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00122a   ffd9
00122c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_get	code
                                           _fifo_get:
                                           ;	.line	438; pillefyrsstyring.c	unsigned char fifo_get(unsigned char *c) {
002024   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002026   ffe5
002028   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00202a   ffd9
00202c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00202e   ffe5
002030   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002032   ffe5
002034   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002036   ffe5
002038   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00203a   ffe5
00203c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00203e   ffe5
002040   0e02     movlw   0x2              	MOVLW	0x02
002042   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002044   f000
002046   0e03     movlw   0x3              	MOVLW	0x03
002048   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00204a   f001
00204c   0e04     movlw   0x4              	MOVLW	0x04
00204e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
002050   f002
                                           ;	.line	439; pillefyrsstyring.c	if (fifo_in_use() != 0) {
002052   ecb7     call    0x2b6e, 0        	CALL	_fifo_in_use
002054   f015
002056   6e03     movwf   0x3, 0           	MOVWF	r0x03
002058   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00205a   e02d     bz      0x20b6           	BZ	_00344_DS_
                                           ;	.line	440; pillefyrsstyring.c	*c = fifo_buffer[fifo_tail++ % QUEUE_SIZE];
00205c   c805     movff   0x805, 0x3       	MOVFF	_fifo_tail, r0x03
00205e   f003
002060   c806     movff   0x806, 0x4       	MOVFF	(_fifo_tail + 1), r0x04
002062   f004
002064   0108     movlb   0x8              	BANKSEL	_fifo_tail
002066   3f05     incfsz  0x5, 0x1, 0x1    	INCFSZ	_fifo_tail, F, B
002068   d002     bra     0x206e           	BRA	_10392_DS_
00206a   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
00206c   2b06     incf    0x6, 0x1, 0x1    	INCF	(_fifo_tail + 1), F, B
                                           _10392_DS_:
00206e   0e00     movlw   0                	MOVLW	0x00
002070   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002072   0e64     movlw   0x64             	MOVLW	0x64
002074   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002076   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
002078   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00207a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00207c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00207e   ecb5     call    0x1f6a, 0        	CALL	__moduint
002080   f00f
002082   6e03     movwf   0x3, 0           	MOVWF	r0x03
002084   cff3     movff   0xff3, 0x4       	MOVFF	PRODL, r0x04
002086   f004
002088   0e04     movlw   0x4              	MOVLW	0x04
00208a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00208c   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
00208e   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
002090   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002092   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
002094   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
002096   ffe9
002098   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00209a   ffea
00209c   cfef     movff   0xfef, 0x3       	MOVFF	INDF0, r0x03
00209e   f003
0020a0   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0020a2   ffe5
0020a4   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0020a6   ffe9
0020a8   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0020aa   fff3
0020ac   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0020ae   ecde     call    0x2dbc, 0        	CALL	__gptrput1
0020b0   f016
                                           ;	.line	441; pillefyrsstyring.c	return 1;
0020b2   0e01     movlw   0x1              	MOVLW	0x01
0020b4   d001     bra     0x20b8           	BRA	_00346_DS_
                                           _00344_DS_:
                                           ;	.line	444; pillefyrsstyring.c	return 0;
0020b6   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00346_DS_:
0020b8   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0020ba   f004
0020bc   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0020be   f003
0020c0   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0020c2   f002
0020c4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0020c6   f001
0020c8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0020ca   f000
0020cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020ce   ffd9
0020d0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_put	code
                                           _fifo_put:
                                           ;	.line	428; pillefyrsstyring.c	unsigned char fifo_put(unsigned char c) {
0023de   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0023e0   ffe5
0023e2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0023e4   ffd9
0023e6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0023e8   ffe5
0023ea   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0023ec   ffe5
0023ee   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0023f0   ffe5
0023f2   0e02     movlw   0x2              	MOVLW	0x02
0023f4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0023f6   f000
                                           ;	.line	429; pillefyrsstyring.c	if (fifo_in_use() != QUEUE_SIZE) {
0023f8   ecb7     call    0x2b6e, 0        	CALL	_fifo_in_use
0023fa   f015
0023fc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0023fe   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002400   0a64     xorlw   0x64             	XORLW	0x64
002402   e024     bz      0x244c           	BZ	_00330_DS_
                                           ;	.line	430; pillefyrsstyring.c	fifo_buffer[fifo_head++ % QUEUE_SIZE] = c;
002404   c803     movff   0x803, 0x1       	MOVFF	_fifo_head, r0x01
002406   f001
002408   c804     movff   0x804, 0x2       	MOVFF	(_fifo_head + 1), r0x02
00240a   f002
00240c   0108     movlb   0x8              	BANKSEL	_fifo_head
00240e   3f03     incfsz  0x3, 0x1, 0x1    	INCFSZ	_fifo_head, F, B
002410   d002     bra     0x2416           	BRA	_20393_DS_
002412   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
002414   2b04     incf    0x4, 0x1, 0x1    	INCF	(_fifo_head + 1), F, B
                                           _20393_DS_:
002416   0e00     movlw   0                	MOVLW	0x00
002418   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00241a   0e64     movlw   0x64             	MOVLW	0x64
00241c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00241e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002420   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002422   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002424   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002426   ecb5     call    0x1f6a, 0        	CALL	__moduint
002428   f00f
00242a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00242c   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
00242e   f002
002430   0e04     movlw   0x4              	MOVLW	0x04
002432   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002434   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
002436   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
002438   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
00243a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00243c   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
00243e   ffe9
002440   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
002442   ffea
002444   c000     movff   0, 0xfef         	MOVFF	r0x00, INDF0
002446   ffef
                                           ;	.line	431; pillefyrsstyring.c	return 1;
002448   0e01     movlw   0x1              	MOVLW	0x01
00244a   d001     bra     0x244e           	BRA	_00332_DS_
                                           _00330_DS_:
                                           ;	.line	434; pillefyrsstyring.c	return 0;
00244c   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00332_DS_:
00244e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002450   f002
002452   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002454   f001
002456   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002458   f000
00245a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00245c   ffd9
00245e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_in_use	code
                                           _fifo_in_use:
                                           ;	.line	424; pillefyrsstyring.c	unsigned char fifo_in_use() {
002b6e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b70   ffe5
002b72   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b74   ffd9
002b76   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b78   ffe5
002b7a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b7c   ffe5
002b7e   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	425; pillefyrsstyring.c	return fifo_head - fifo_tail;
002b80   5103     movf    0x3, 0, 0x1      	MOVF	_fifo_head, W, B
002b82   6e00     movwf   0, 0             	MOVWF	r0x00
002b84   0108     movlb   0x8              	BANKSEL	_fifo_tail
002b86   5105     movf    0x5, 0, 0x1      	MOVF	_fifo_tail, W, B
002b88   6e01     movwf   0x1, 0           	MOVWF	r0x01
002b8a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002b8c   5e00     subwf   0, 0x1, 0        	SUBWF	r0x00, F
002b8e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b90   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002b92   f001
002b94   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b96   f000
002b98   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b9a   ffd9
002b9c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	394; pillefyrsstyring.c	void my_usart_open() {
002c28   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c2a   ffe5
002c2c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c2e   ffd9
                                           ;	.line	395; pillefyrsstyring.c	SPBRG = 103;					// 8MHz => 19230 baud
002c30   0e67     movlw   0x67             	MOVLW	0x67
002c32   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	396; pillefyrsstyring.c	TXSTAbits.BRGH = 1;	// (1 = high speed)
002c34   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	397; pillefyrsstyring.c	TXSTAbits.SYNC = 0;	// (0 = asynchronous)
002c36   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	398; pillefyrsstyring.c	BAUDCONbits.BRG16 = 1;
002c38   86b8     bsf     0xb8, 0x3, 0     	BSF	_BAUDCONbits, 3
                                           ;	.line	401; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
002c3a   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	404; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
002c3c   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	405; pillefyrsstyring.c	IPR1bits.TXIP = 0; // USART Tx on low priority interrupt
002c3e   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	408; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
002c40   8a9d     bsf     0x9d, 0x5, 0     	BSF	_PIE1bits, 5
                                           ;	.line	409; pillefyrsstyring.c	IPR1bits.RCIP = 0; // USART Rx on low priority interrupt
002c42   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	412; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
002c44   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	415; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
002c46   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	418; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
002c48   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           ;	.line	421; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
002c4a   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
002c4c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c4e   ffd9
002c50   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	382; pillefyrsstyring.c	unsigned char get_inputs() {
002d18   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d1a   ffe5
002d1c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d1e   ffd9
002d20   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002d22   ffe5
                                           ;	.line	386; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
002d24   0eff     movlw   0xff             	MOVLW	0xff
002d26   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	387; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
002d28   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	388; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
002d2a   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
002d2c   f000
                                           ;	.line	389; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
002d2e   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	391; pillefyrsstyring.c	return data;
002d30   5000     movf    0, 0, 0          	MOVF	r0x00, W
002d32   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002d34   f000
002d36   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d38   ffd9
002d3a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	365; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
0025ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025b0   ffe5
0025b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025b4   ffd9
0025b6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0025b8   ffe5
0025ba   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0025bc   ffe5
0025be   0e02     movlw   0x2              	MOVLW	0x02
0025c0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0025c2   f000
0025c4   0e03     movlw   0x3              	MOVLW	0x03
0025c6   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0025c8   f001
                                           ;	.line	366; pillefyrsstyring.c	header_mask &= 0b00111111;		// only 6 outputs on this hardware
0025ca   0e3f     movlw   0x3f             	MOVLW	0x3f
0025cc   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	367; pillefyrsstyring.c	value &= header_mask;
0025ce   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025d0   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	368; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
0025d2   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; pillefyrsstyring.c	if (value) {	// set it
0025d4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0025d6   e006     bz      0x25e4           	BZ	_00307_DS_
                                           ;	.line	370; pillefyrsstyring.c	_latch_2_data |= header_mask;
0025d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025da   0108     movlb   0x8              	BANKSEL	__latch_2_data
0025dc   1314     iorwf   0x14, 0x1, 0x1   	IORWF	__latch_2_data, F, B
                                           ;	.line	371; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
0025de   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
0025e0   ff8c
0025e2   d006     bra     0x25f0           	BRA	_00308_DS_
                                           _00307_DS_:
                                           ;	.line	374; pillefyrsstyring.c	_latch_2_data &= ~header_mask;
0025e4   1e00     comf    0, 0x1, 0        	COMF	r0x00, F
0025e6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025e8   0108     movlb   0x8              	BANKSEL	__latch_2_data
0025ea   1714     andwf   0x14, 0x1, 0x1   	ANDWF	__latch_2_data, F, B
                                           ;	.line	375; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
0025ec   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
0025ee   ff8c
                                           _00308_DS_:
                                           ;	.line	377; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
0025f0   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	378; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
0025f2   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	379; pillefyrsstyring.c	LATCH_DATA = 0x00;
0025f4   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0025f6   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0025f8   f001
0025fa   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0025fc   f000
0025fe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002600   ffd9
002602   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	345; pillefyrsstyring.c	void init_latches() {
002c52   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c54   ffe5
002c56   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c58   ffd9
                                           ;	.line	346; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c5a   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	347; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
002c5c   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	348; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
002c5e   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	350; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
002c60   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	351; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002c62   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
002c64   0108     movlb   0x8              	BANKSEL	__latch_2_data
                                           ;	.line	352; pillefyrsstyring.c	_latch_2_data = 0x00;
002c66   6b14     clrf    0x14, 0x1        	CLRF	__latch_2_data, B
                                           ;	.line	354; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
002c68   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	355; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
002c6a   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	357; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
002c6c   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	358; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
002c6e   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	360; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
002c70   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	361; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
002c72   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
002c74   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c76   ffd9
002c78   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	291; pillefyrsstyring.c	void init_timers() {
002a96   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a98   ffe5
002a9a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a9c   ffd9
                                           ;	.line	293; pillefyrsstyring.c	T0CONbits.TMR0ON = 1;
002a9e   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	294; pillefyrsstyring.c	T0CONbits.T0PS0 = 0;
002aa0   90d5     bcf     0xd5, 0, 0       	BCF	_T0CONbits, 0
                                           ;	.line	295; pillefyrsstyring.c	T0CONbits.T0PS1 = 0;
002aa2   92d5     bcf     0xd5, 0x1, 0     	BCF	_T0CONbits, 1
                                           ;	.line	296; pillefyrsstyring.c	T0CONbits.T0PS2 = 0;	// prescaler 1:2
002aa4   94d5     bcf     0xd5, 0x2, 0     	BCF	_T0CONbits, 2
                                           ;	.line	297; pillefyrsstyring.c	T0CONbits.T08BIT = 0;   // use timer0 16-bit counter
002aa6   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	298; pillefyrsstyring.c	T0CONbits.T0CS = 0;             // internal clock source
002aa8   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	299; pillefyrsstyring.c	T0CONbits.PSA = 0;              // enable timer0 prescaler
002aaa   96d5     bcf     0xd5, 0x3, 0     	BCF	_T0CONbits, 3
                                           ;	.line	300; pillefyrsstyring.c	INTCON2bits.TMR0IP = 1; // high priority
002aac   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	301; pillefyrsstyring.c	INTCONbits.T0IE = 1;    // Ensure that TMR0 Interrupt is enabled
002aae   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	302; pillefyrsstyring.c	INTCONbits.TMR0IF = 1;  // Force Instant entry to Timer 0 Interrupt
002ab0   84f2     bsf     0xf2, 0x2, 0     	BSF	_INTCONbits, 2
                                           ;	.line	305; pillefyrsstyring.c	T1CONbits.TMR1ON = 1;
002ab2   80cd     bsf     0xcd, 0, 0       	BSF	_T1CONbits, 0
                                           ;	.line	306; pillefyrsstyring.c	T1CONbits.RD16 = 1;
002ab4   8ecd     bsf     0xcd, 0x7, 0     	BSF	_T1CONbits, 7
                                           ;	.line	307; pillefyrsstyring.c	T1CONbits.TMR1CS = 0;   // internal clock source
002ab6   92cd     bcf     0xcd, 0x1, 0     	BCF	_T1CONbits, 1
                                           ;	.line	308; pillefyrsstyring.c	T1CONbits.T1OSCEN = 0;  // dont put t1 on pin
002ab8   96cd     bcf     0xcd, 0x3, 0     	BCF	_T1CONbits, 3
                                           ;	.line	309; pillefyrsstyring.c	T1CONbits.T1CKPS0 = 1;
002aba   88cd     bsf     0xcd, 0x4, 0     	BSF	_T1CONbits, 4
                                           ;	.line	310; pillefyrsstyring.c	T1CONbits.T1CKPS1 = 1;
002abc   8acd     bsf     0xcd, 0x5, 0     	BSF	_T1CONbits, 5
                                           ;	.line	311; pillefyrsstyring.c	IPR1bits.TMR1IP = 0;	// low priority
002abe   909f     bcf     0x9f, 0, 0       	BCF	_IPR1bits, 0
                                           ;	.line	312; pillefyrsstyring.c	PIE1bits.TMR1IE = 1;	// Ensure that TMR1 Interrupt is enabled
002ac0   809d     bsf     0x9d, 0, 0       	BSF	_PIE1bits, 0
                                           ;	.line	313; pillefyrsstyring.c	PIR1bits.TMR1IF = 1;	// Force Instant entry to Timer 1 Interrupt
002ac2   809e     bsf     0x9e, 0, 0       	BSF	_PIR1bits, 0
                                           ;	.line	341; pillefyrsstyring.c	INTCONbits.PEIE = 1;
002ac4   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	342; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
002ac6   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
002ac8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002aca   ffd9
002acc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	281; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
00168e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001690   ffe5
001692   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001694   ffd9
001696   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001698   ffe5
00169a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00169c   ffe5
00169e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0016a0   ffe5
0016a2   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0016a4   ffe5
0016a6   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0016a8   ffe5
0016aa   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0016ac   ffe5
0016ae   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0016b0   ffe5
0016b2   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0016b4   ffe5
0016b6   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0016b8   ffe5
0016ba   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
0016bc   ffe5
0016be   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
0016c0   ffe5
0016c2   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
0016c4   ffe5
0016c6   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
0016c8   ffe5
0016ca   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
0016cc   ffe5
0016ce   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
0016d0   ffe5
0016d2   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
0016d4   ffe5
0016d6   0e02     movlw   0x2              	MOVLW	0x02
0016d8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0016da   f000
0016dc   0e03     movlw   0x3              	MOVLW	0x03
0016de   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0016e0   f001
0016e2   0e04     movlw   0x4              	MOVLW	0x04
0016e4   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0016e6   f002
0016e8   0e05     movlw   0x5              	MOVLW	0x05
0016ea   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0016ec   f003
                                           ;	.line	283; pillefyrsstyring.c	start_timer_1_ms = timer_1_ms;	
0016ee   cf67     movff   0xf67, 0x4       	MOVFF	_timer_1_ms, r0x04
0016f0   f004
0016f2   cf68     movff   0xf68, 0x5       	MOVFF	(_timer_1_ms + 1), r0x05
0016f4   f005
0016f6   cf69     movff   0xf69, 0x6       	MOVFF	(_timer_1_ms + 2), r0x06
0016f8   f006
0016fa   cf6a     movff   0xf6a, 0x7       	MOVFF	(_timer_1_ms + 3), r0x07
0016fc   f007
                                           _00278_DS_:
                                           ;	.line	286; pillefyrsstyring.c	while ( (((signed long)(timer_1_ms - start_timer_1_ms) < 0) ? (-1 * (timer_1_ms - start_timer_1_ms)) : (timer_1_ms - start_timer_1_ms)) < ms) {
0016fe   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001700   010f     movlb   0xf              	BANKSEL	_timer_1_ms
001702   5d67     subwf   0x67, 0, 0x1     	SUBWF	_timer_1_ms, W, B
001704   6e08     movwf   0x8, 0           	MOVWF	r0x08
001706   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001708   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00170a   5968     subwfb  0x68, 0, 0x1     	SUBWFB	(_timer_1_ms + 1), W, B
00170c   6e09     movwf   0x9, 0           	MOVWF	r0x09
00170e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001710   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
001712   5969     subwfb  0x69, 0, 0x1     	SUBWFB	(_timer_1_ms + 2), W, B
001714   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001716   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001718   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
00171a   596a     subwfb  0x6a, 0, 0x1     	SUBWFB	(_timer_1_ms + 3), W, B
00171c   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
00171e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001720   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001722   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001724   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
001726   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
001728   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
00172a   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
00172c   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
00172e   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
001730   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
001732   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
001734   e31c     bnc     0x176e           	BNC	_00283_DS_
001736   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
001738   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00173a   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
00173c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00173e   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001740   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001742   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001744   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001746   0eff     movlw   0xff             	MOVLW	0xff
001748   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00174a   0eff     movlw   0xff             	MOVLW	0xff
00174c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00174e   0eff     movlw   0xff             	MOVLW	0xff
001750   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001752   0eff     movlw   0xff             	MOVLW	0xff
001754   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001756   ec23     call    0xc46, 0         	CALL	__mullong
001758   f006
00175a   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
00175c   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
00175e   f00d
001760   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
001762   f00e
001764   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
001766   f00f
001768   0e08     movlw   0x8              	MOVLW	0x08
00176a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00176c   d008     bra     0x177e           	BRA	_00284_DS_
                                           _00283_DS_:
00176e   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
001770   f00c
001772   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
001774   f00d
001776   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
001778   f00e
00177a   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
00177c   f00f
                                           _00284_DS_:
00177e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001780   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
001782   e108     bnz     0x1794           	BNZ	_00291_DS_
001784   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001786   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
001788   e105     bnz     0x1794           	BNZ	_00291_DS_
00178a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00178c   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
00178e   e102     bnz     0x1794           	BNZ	_00291_DS_
001790   5000     movf    0, 0, 0          	MOVF	r0x00, W
001792   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00291_DS_:
001794   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001796   d7b3     bra     0x16fe           	BRA	_00278_DS_
001798   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
00179a   f00f
00179c   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
00179e   f00e
0017a0   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
0017a2   f00d
0017a4   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0017a6   f00c
0017a8   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0017aa   f00b
0017ac   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0017ae   f00a
0017b0   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
0017b2   f009
0017b4   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0017b6   f008
0017b8   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0017ba   f007
0017bc   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0017be   f006
0017c0   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0017c2   f005
0017c4   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0017c6   f004
0017c8   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0017ca   f003
0017cc   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0017ce   f002
0017d0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0017d2   f001
0017d4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0017d6   f000
0017d8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0017da   ffd9
0017dc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_low_prio	code
                                           _isr_low_prio:
                                           ;	.line	255; pillefyrsstyring.c	static void isr_low_prio(void) __interrupt 2 {
0022b0   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0022b2   ffe5
0022b4   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0022b6   ffe5
0022b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022ba   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0022bc   ffe5
0022be   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0022c0   ffe5
0022c2   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0022c4   ffe5
0022c6   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0022c8   ffe5
0022ca   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0022cc   ffe5
0022ce   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0022d0   ffe5
0022d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022d4   ffe5
0022d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022d8   ffd9
0022da   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0022dc   ffe5
                                           ;	.line	257; pillefyrsstyring.c	if (PIR1bits.TMR1IF) {
0022de   a09e     btfss   0x9e, 0, 0       	BTFSS	_PIR1bits, 0
0022e0   d010     bra     0x2302           	BRA	_00262_DS_
                                           ;	.line	258; pillefyrsstyring.c	TMR1H = (unsigned char)(TIMER1_RELOAD >> 8);    // 1 ms delay at 8 MHz
0022e2   0efe     movlw   0xfe             	MOVLW	0xfe
0022e4   6ecf     movwf   0xcf, 0          	MOVWF	_TMR1H
                                           ;	.line	259; pillefyrsstyring.c	TMR1L = (unsigned char)TIMER1_RELOAD;
0022e6   0ec8     movlw   0xc8             	MOVLW	0xc8
0022e8   6ece     movwf   0xce, 0          	MOVWF	_TMR1L
                                           ;	.line	260; pillefyrsstyring.c	PIR1bits.TMR1IF = 0;    /* Clear the Timer Flag  */
0022ea   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
0022ec   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	261; pillefyrsstyring.c	timer_1_ms++;
0022ee   2b67     incf    0x67, 0x1, 0x1   	INCF	_timer_1_ms, F, B
0022f0   e308     bnc     0x2302           	BNC	_00262_DS_
0022f2   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
0022f4   2b68     incf    0x68, 0x1, 0x1   	INCF	(_timer_1_ms + 1), F, B
0022f6   e305     bnc     0x2302           	BNC	_00262_DS_
0022f8   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
0022fa   3f69     incfsz  0x69, 0x1, 0x1   	INCFSZ	(_timer_1_ms + 2), F, B
0022fc   d002     bra     0x2302           	BRA	_30394_DS_
0022fe   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
002300   2b6a     incf    0x6a, 0x1, 0x1   	INCF	(_timer_1_ms + 3), F, B
                                           _30394_DS_:
                                           _00273_DS_:
                                           _00262_DS_:
                                           ;	.line	265; pillefyrsstyring.c	if (usart_drdy()) {
002302   ec25     call    0x2e4a, 0        	CALL	_usart_drdy
002304   f017
002306   6e00     movwf   0, 0             	MOVWF	r0x00
002308   5000     movf    0, 0, 0          	MOVF	r0x00, W
00230a   e008     bz      0x231c           	BZ	_00265_DS_
                                           ;	.line	267; pillefyrsstyring.c	c = usart_getc();
00230c   ec65     call    0x2cca, 0        	CALL	_usart_getc
00230e   f016
002310   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	268; pillefyrsstyring.c	fifo_put(c);
002312   5000     movf    0, 0, 0          	MOVF	r0x00, W
002314   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002316   ecef     call    0x23de, 0        	CALL	_fifo_put
002318   f011
00231a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00265_DS_:
00231c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00231e   f000
002320   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002322   ffd9
002324   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002326   fffb
002328   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00232a   fffa
00232c   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00232e   ffea
002330   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
002332   ffe9
002334   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
002336   fff4
002338   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
00233a   fff3
00233c   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
00233e   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
002340   ffe0
002342   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
002344   ffd8
002346   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_high_prio	code
                                           _isr_high_prio:
                                           ;	.line	221; pillefyrsstyring.c	static void isr_high_prio(void) __interrupt 1 {
0013e6   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0013e8   ffe5
0013ea   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0013ec   ffe5
0013ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013f0   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0013f2   ffe5
0013f4   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0013f6   ffe5
0013f8   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0013fa   ffe5
0013fc   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0013fe   ffe5
001400   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001402   ffe5
001404   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
001406   ffe5
001408   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00140a   ffe5
00140c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00140e   ffd9
001410   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001412   ffe5
001414   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001416   ffe5
                                           ;	.line	222; pillefyrsstyring.c	if (INTCONbits.TMR0IF) {
001418   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
00141a   d057     bra     0x14ca           	BRA	_00237_DS_
                                           ;	.line	223; pillefyrsstyring.c	TMR0H = (unsigned char)(TIMER0_RELOAD >> 8);
00141c   0efd     movlw   0xfd             	MOVLW	0xfd
00141e   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	224; pillefyrsstyring.c	TMR0L = (unsigned char)TIMER0_RELOAD;   /* Reload the Timer ASAP */
001420   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
                                           ;	.line	225; pillefyrsstyring.c	INTCONbits.TMR0IF = 0;  /* Clear the Timer Flag  */
001422   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	228; pillefyrsstyring.c	sensor_inputs = get_inputs();
001424   ec8c     call    0x2d18, 0        	CALL	_get_inputs
001426   f016
001428   0108     movlb   0x8              	BANKSEL	_sensor_inputs
00142a   6f12     movwf   0x12, 0x1        	MOVWF	_sensor_inputs, B
00142c   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	231; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
00142e   6b07     clrf    0x7, 0x1         	CLRF	_i, B
001430   0108     movlb   0x8              	BANKSEL	(_i + 1)
001432   6b08     clrf    0x8, 0x1         	CLRF	(_i + 1), B
                                           _00235_DS_:
                                           ;	.line	232; pillefyrsstyring.c	if (ac_power_pwm_counter < output_ac_power_pwm[i]) {
001434   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
001436   0108     movlb   0x8              	BANKSEL	_i
001438   2507     addwf   0x7, 0, 0x1      	ADDWF	_i, W, B
00143a   6e00     movwf   0, 0             	MOVWF	r0x00
00143c   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
00143e   0108     movlb   0x8              	BANKSEL	(_i + 1)
001440   2108     addwfc  0x8, 0, 0x1      	ADDWFC	(_i + 1), W, B
001442   6e01     movwf   0x1, 0           	MOVWF	r0x01
001444   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001446   ffe9
001448   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
00144a   ffea
00144c   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
00144e   f000
001450   5000     movf    0, 0, 0          	MOVF	r0x00, W
001452   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
001454   5d13     subwf   0x13, 0, 0x1     	SUBWF	_ac_power_pwm_counter, W, B
001456   e215     bc      0x1482           	BC	_00230_DS_
                                           ;	.line	234; pillefyrsstyring.c	set_ac_power(1 << i, 0xff);
001458   0e01     movlw   0x1              	MOVLW	0x01
00145a   6e00     movwf   0, 0             	MOVWF	r0x00
00145c   6a01     clrf    0x1, 0           	CLRF	r0x01
00145e   0108     movlb   0x8              	BANKSEL	_i
001460   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
001462   e006     bz      0x1470           	BZ	_00252_DS_
001464   6ce8     negf    0xe8, 0          	NEGF	WREG
001466   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00253_DS_:
001468   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
00146a   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
00146c   0f01     addlw   0x1              	ADDLW	0x01
00146e   e3fc     bnc     0x1468           	BNC	_00253_DS_
                                           _00252_DS_:
001470   0eff     movlw   0xff             	MOVLW	0xff
001472   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001474   5000     movf    0, 0, 0          	MOVF	r0x00, W
001476   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001478   ecd7     call    0x25ae, 0        	CALL	_set_ac_power
00147a   f012
00147c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00147e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001480   d014     bra     0x14aa           	BRA	_00236_DS_
                                           _00230_DS_:
                                           ;	.line	243; pillefyrsstyring.c	set_ac_power(1 << i, 0x00);
001482   0e01     movlw   0x1              	MOVLW	0x01
001484   6e00     movwf   0, 0             	MOVWF	r0x00
001486   6a01     clrf    0x1, 0           	CLRF	r0x01
001488   0108     movlb   0x8              	BANKSEL	_i
00148a   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
00148c   e006     bz      0x149a           	BZ	_00254_DS_
00148e   6ce8     negf    0xe8, 0          	NEGF	WREG
001490   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00255_DS_:
001492   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
001494   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001496   0f01     addlw   0x1              	ADDLW	0x01
001498   e3fc     bnc     0x1492           	BNC	_00255_DS_
                                           _00254_DS_:
00149a   0e00     movlw   0                	MOVLW	0x00
00149c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00149e   5000     movf    0, 0, 0          	MOVF	r0x00, W
0014a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014a2   ecd7     call    0x25ae, 0        	CALL	_set_ac_power
0014a4   f012
0014a6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0014a8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00236_DS_:
0014aa   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	231; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
0014ac   3f07     incfsz  0x7, 0x1, 0x1    	INCFSZ	_i, F, B
0014ae   d002     bra     0x14b4           	BRA	_40395_DS_
0014b0   0108     movlb   0x8              	BANKSEL	(_i + 1)
0014b2   2b08     incf    0x8, 0x1, 0x1    	INCF	(_i + 1), F, B
                                           _40395_DS_:
0014b4   0e00     movlw   0                	MOVLW	0x00
0014b6   0108     movlb   0x8              	BANKSEL	(_i + 1)
0014b8   5d08     subwf   0x8, 0, 0x1      	SUBWF	(_i + 1), W, B
0014ba   e103     bnz     0x14c2           	BNZ	_00256_DS_
0014bc   0e06     movlw   0x6              	MOVLW	0x06
0014be   0108     movlb   0x8              	BANKSEL	_i
0014c0   5d07     subwf   0x7, 0, 0x1      	SUBWF	_i, W, B
                                           _00256_DS_:
0014c2   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0014c4   d7b7     bra     0x1434           	BRA	_00235_DS_
0014c6   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	251; pillefyrsstyring.c	ac_power_pwm_counter++;
0014c8   2b13     incf    0x13, 0x1, 0x1   	INCF	_ac_power_pwm_counter, F, B
                                           _00237_DS_:
0014ca   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0014cc   f001
0014ce   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0014d0   f000
0014d2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014d4   ffd9
0014d6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0014d8   fffb
0014da   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0014dc   fffa
0014de   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0014e0   ffea
0014e2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0014e4   ffe9
0014e6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0014e8   fff4
0014ea   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0014ec   fff3
0014ee   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0014f0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0014f2   ffe0
0014f4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0014f6   ffd8
0014f8   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0014fa   704f     btg     0x4f, 0, 0       	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
0014fc   6e65     movwf   0x65, 0          
0014fe   7453     btg     0x53, 0x2, 0     
001500   6b6f     clrf    0x6f, 0x1        
001502   7265     btg     0x65, 0x1, 0     
001504   7320     btg     0x20, 0x1, 0x1   
001506   6174     cpfslt  0x74, 0x1        	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x20, 0x73
001508   7472     btg     0x72, 0x2, 0     
00150a   6e69     movwf   0x69, 0          
00150c   2e67     decfsz  0x67, 0x1, 0     
00150e   2e2e     decfsz  0x2e, 0x1, 0     
001510   7320     btg     0x20, 0x1, 0x1   
001512   7265     btg     0x65, 0x1, 0     	DB	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e
001514   6169     cpfslt  0x69, 0x1        
001516   206c     addwfc  0x6c, 0, 0       
001518   6f77     movwf   0x77, 0x1        
00151a   6b72     clrf    0x72, 0x1        
00151c   6e69     movwf   0x69, 0          
00151e   0a67     xorlw   0x67             	DB	0x67, 0x0a, 0x0d, 0x00
001520   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_1:
001522   0d0a     mullw   0xa              	DB	0x0a, 0x0d, 0x00
001524   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001526   2567     addwf   0x67, 0, 0x1     	DB	0x67, 0x25, 0x30, 0x32, 0x78, 0x0a, 0x0d, 0x00
001528   3230     rrcf    0x30, 0x1, 0     
00152a   0a78     xorlw   0x78             
00152c   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_3:
00152e   6461     cpfsgt  0x61, 0          	DB	0x61, 0x64, 0x25, 0x64, 0x3a, 0x20, 0x25, 0x30, 0x34, 0x78, 0x0a, 0x0d
001530   6425     cpfsgt  0x25, 0          
001532   203a     addwfc  0x3a, 0, 0       
001534   3025     rrcf    0x25, 0, 0       
001536   7834     btg     0x34, 0x4, 0     
001538   0d0a     mullw   0xa              
00153a   0000     nop                      	DB	0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3368 (0x0d28) bytes ( 2.57%)
                                           ;           	 1684 (0x0694) words
                                           ; udata size:	  202 (0x00ca) bytes ( 5.26%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 17 02:45:30 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	367; glcd.c	void latched_lcd_data(unsigned char value) {
002c7a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c7c   ffe5
002c7e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c80   ffd9
002c82   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c84   ffe5
002c86   0e02     movlw   0x2              	MOVLW	0x02
002c88   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002c8a   f000
                                           ;	.line	368; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c8c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; glcd.c	LATCH_DATA = value;
002c8e   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
002c90   ff8c
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_ENABLED;
002c92   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_4 = LATCH_4_DISABLED;
002c94   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	372; glcd.c	LATCH_DATA = 0x00;
002c96   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002c98   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002c9a   f000
002c9c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c9e   ffd9
002ca0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	352; glcd.c	void latched_lcd_cs1(unsigned char value) {
00288c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00288e   ffe5
002890   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002892   ffd9
002894   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002896   ffe5
002898   0e02     movlw   0x2              	MOVLW	0x02
00289a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00289c   f000
                                           ;	.line	353; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00289e   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	354; glcd.c	if (value) {	// set it
0028a0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028a2   e005     bz      0x28ae           	BZ	_00268_DS_
0028a4   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data |= 0b00100000;
0028a6   8b16     bsf     0x16, 0x5, 0x1   	BSF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
0028a8   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028aa   ff8c
0028ac   d004     bra     0x28b6           	BRA	_00269_DS_
                                           _00268_DS_:
0028ae   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	359; glcd.c	_latch_3_data &= 0b11011111;
0028b0   9b16     bcf     0x16, 0x5, 0x1   	BCF	__latch_3_data, 5, B
                                           ;	.line	360; glcd.c	LATCH_DATA = _latch_3_data;
0028b2   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028b4   ff8c
                                           _00269_DS_:
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028b6   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028b8   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	364; glcd.c	LATCH_DATA = 0x00;
0028ba   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028bc   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028be   f000
0028c0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028c2   ffd9
0028c4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	337; glcd.c	void latched_lcd_cs2(unsigned char value) {
0028c6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028c8   ffe5
0028ca   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028cc   ffd9
0028ce   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028d0   ffe5
0028d2   0e02     movlw   0x2              	MOVLW	0x02
0028d4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028d6   f000
                                           ;	.line	338; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028d8   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	339; glcd.c	if (value) {	// set it
0028da   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028dc   e005     bz      0x28e8           	BZ	_00260_DS_
0028de   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data |= 0b00010000;
0028e0   8916     bsf     0x16, 0x4, 0x1   	BSF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
0028e2   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028e4   ff8c
0028e6   d004     bra     0x28f0           	BRA	_00261_DS_
                                           _00260_DS_:
0028e8   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	344; glcd.c	_latch_3_data &= 0b11101111;
0028ea   9916     bcf     0x16, 0x4, 0x1   	BCF	__latch_3_data, 4, B
                                           ;	.line	345; glcd.c	LATCH_DATA = _latch_3_data;
0028ec   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028ee   ff8c
                                           _00261_DS_:
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028f0   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028f2   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	349; glcd.c	LATCH_DATA = 0x00;
0028f4   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028f6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028f8   f000
0028fa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028fc   ffd9
0028fe   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	322; glcd.c	void latched_lcd_rst(unsigned char value) {
002900   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002902   ffe5
002904   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002906   ffd9
002908   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00290a   ffe5
00290c   0e02     movlw   0x2              	MOVLW	0x02
00290e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002910   f000
                                           ;	.line	323; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002912   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	324; glcd.c	if (value) {	// set it
002914   5000     movf    0, 0, 0          	MOVF	r0x00, W
002916   e005     bz      0x2922           	BZ	_00252_DS_
002918   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data |= 0b00001000;
00291a   8716     bsf     0x16, 0x3, 0x1   	BSF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
00291c   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00291e   ff8c
002920   d004     bra     0x292a           	BRA	_00253_DS_
                                           _00252_DS_:
002922   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	329; glcd.c	_latch_3_data &= 0b11110111;
002924   9716     bcf     0x16, 0x3, 0x1   	BCF	__latch_3_data, 3, B
                                           ;	.line	330; glcd.c	LATCH_DATA = _latch_3_data;
002926   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002928   ff8c
                                           _00253_DS_:
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00292a   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00292c   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	334; glcd.c	LATCH_DATA = 0x00;
00292e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002930   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002932   f000
002934   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002936   ffd9
002938   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	307; glcd.c	void latched_lcd_rw(unsigned char value) {
00293a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00293c   ffe5
00293e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002940   ffd9
002942   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002944   ffe5
002946   0e02     movlw   0x2              	MOVLW	0x02
002948   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00294a   f000
                                           ;	.line	308; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00294c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	309; glcd.c	if (value) {	// set it
00294e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002950   e005     bz      0x295c           	BZ	_00244_DS_
002952   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data |= 0b00000100;
002954   8516     bsf     0x16, 0x2, 0x1   	BSF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
002956   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002958   ff8c
00295a   d004     bra     0x2964           	BRA	_00245_DS_
                                           _00244_DS_:
00295c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	314; glcd.c	_latch_3_data &= 0b11111011;
00295e   9516     bcf     0x16, 0x2, 0x1   	BCF	__latch_3_data, 2, B
                                           ;	.line	315; glcd.c	LATCH_DATA = _latch_3_data;
002960   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002962   ff8c
                                           _00245_DS_:
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002964   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002966   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	319; glcd.c	LATCH_DATA = 0x00;
002968   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00296a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00296c   f000
00296e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002970   ffd9
002972   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	292; glcd.c	void latched_lcd_di(unsigned char value) {
002974   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002976   ffe5
002978   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00297a   ffd9
00297c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00297e   ffe5
002980   0e02     movlw   0x2              	MOVLW	0x02
002982   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002984   f000
                                           ;	.line	293; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002986   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; glcd.c	if (value) {	// set it
002988   5000     movf    0, 0, 0          	MOVF	r0x00, W
00298a   e005     bz      0x2996           	BZ	_00236_DS_
00298c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data |= 0b00000010;
00298e   8316     bsf     0x16, 0x1, 0x1   	BSF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
002990   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002992   ff8c
002994   d004     bra     0x299e           	BRA	_00237_DS_
                                           _00236_DS_:
002996   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	299; glcd.c	_latch_3_data &= 0b11111101;
002998   9316     bcf     0x16, 0x1, 0x1   	BCF	__latch_3_data, 1, B
                                           ;	.line	300; glcd.c	LATCH_DATA = _latch_3_data;
00299a   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00299c   ff8c
                                           _00237_DS_:
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00299e   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029a0   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; glcd.c	LATCH_DATA = 0x00;
0029a2   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029a4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029a6   f000
0029a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029aa   ffd9
0029ac   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	277; glcd.c	void latched_lcd_enable(unsigned char value) {
0029ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029b0   ffe5
0029b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029b4   ffd9
0029b6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029b8   ffe5
0029ba   0e02     movlw   0x2              	MOVLW	0x02
0029bc   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0029be   f000
                                           ;	.line	278; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0029c0   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	279; glcd.c	if (value) {	// set it
0029c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0029c4   e005     bz      0x29d0           	BZ	_00228_DS_
0029c6   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data |= 0b00000001;
0029c8   8116     bsf     0x16, 0, 0x1     	BSF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
0029ca   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029cc   ff8c
0029ce   d004     bra     0x29d8           	BRA	_00229_DS_
                                           _00228_DS_:
0029d0   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	284; glcd.c	_latch_3_data &= 0b11111110;
0029d2   9116     bcf     0x16, 0, 0x1     	BCF	__latch_3_data, 0, B
                                           ;	.line	285; glcd.c	LATCH_DATA = _latch_3_data;
0029d4   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029d6   ff8c
                                           _00229_DS_:
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0029d8   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029da   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	289; glcd.c	LATCH_DATA = 0x00;
0029dc   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029de   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029e0   f000
0029e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029e4   ffd9
0029e6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	262; glcd.c	void latched_lcd_power(unsigned char value) {
0029e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029ea   ffe5
0029ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029ee   ffd9
0029f0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029f2   ffe5
0029f4   0e02     movlw   0x2              	MOVLW	0x02
0029f6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0029f8   f000
                                           ;	.line	263; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0029fa   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	264; glcd.c	if (value) {	// set it
0029fc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0029fe   e005     bz      0x2a0a           	BZ	_00220_DS_
002a00   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data |= 0b10000000;
002a02   8f16     bsf     0x16, 0x7, 0x1   	BSF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
002a04   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002a06   ff8c
002a08   d004     bra     0x2a12           	BRA	_00221_DS_
                                           _00220_DS_:
002a0a   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	269; glcd.c	_latch_3_data &= 0b01111111;
002a0c   9f16     bcf     0x16, 0x7, 0x1   	BCF	__latch_3_data, 7, B
                                           ;	.line	270; glcd.c	LATCH_DATA = _latch_3_data;
002a0e   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002a10   ff8c
                                           _00221_DS_:
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002a12   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002a14   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	274; glcd.c	LATCH_DATA = 0x00;
002a16   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002a18   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002a1a   f000
002a1c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a1e   ffd9
002a20   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	242; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
0020d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020d4   ffe5
0020d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020d8   ffd9
0020da   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0020dc   ffe5
0020de   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0020e0   ffe5
0020e2   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0020e4   ffe5
0020e6   0e02     movlw   0x2              	MOVLW	0x02
0020e8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0020ea   f000
0020ec   0e03     movlw   0x3              	MOVLW	0x03
0020ee   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0020f0   f001
                                           ;	.line	247; glcd.c	if (rx & 64) {
0020f2   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
0020f4   d006     bra     0x2102           	BRA	_00203_DS_
                                           ;	.line	248; glcd.c	lcd_selectside(LCD_RIGHT);
0020f6   0e02     movlw   0x2              	MOVLW	0x02
0020f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020fa   ec54     call    0x26a8, 0        	CALL	_lcd_selectside
0020fc   f013
0020fe   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002100   d005     bra     0x210c           	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	251; glcd.c	lcd_selectside(LCD_LEFT);
002102   0e01     movlw   0x1              	MOVLW	0x01
002104   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002106   ec54     call    0x26a8, 0        	CALL	_lcd_selectside
002108   f013
00210a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	254; glcd.c	lcd_setpage( ry >> 3);		// fast /8
00210c   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
00210e   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002110   0b1f     andlw   0x1f             	ANDLW	0x1f
002112   6e02     movwf   0x2, 0           	MOVWF	r0x02
002114   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002116   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002118   eca0     call    0x2740, 0        	CALL	_lcd_setpage
00211a   f013
00211c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_setyaddr( rx & 0b00111111);
00211e   0e3f     movlw   0x3f             	MOVLW	0x3f
002120   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002122   5000     movf    0, 0, 0          	MOVF	r0x00, W
002124   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002126   ec7c     call    0x26f8, 0        	CALL	_lcd_setyaddr
002128   f013
00212a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	256; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
00212c   ece9     call    0x2dd2, 0        	CALL	_lcd_read
00212e   f016
                                           ;	.line	257; glcd.c	d = lcd_read();				// read again to transfer to pic
002130   ece9     call    0x2dd2, 0        	CALL	_lcd_read
002132   f016
002134   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	258; glcd.c	lcd_setyaddr( rx & 0b00111111); 
002136   5000     movf    0, 0, 0          	MOVF	r0x00, W
002138   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00213a   ec7c     call    0x26f8, 0        	CALL	_lcd_setyaddr
00213c   f013
00213e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	259; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
002140   0e07     movlw   0x7              	MOVLW	0x07
002142   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
002144   0e01     movlw   0x1              	MOVLW	0x01
002146   6e00     movwf   0, 0             	MOVWF	r0x00
002148   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00214a   e005     bz      0x2156           	BZ	_00213_DS_
00214c   6ce8     negf    0xe8, 0          	NEGF	WREG
00214e   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
002150   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
002152   0f01     addlw   0x1              	ADDLW	0x01
002154   e3fd     bnc     0x2150           	BNC	_00214_DS_
                                           _00213_DS_:
002156   5000     movf    0, 0, 0          	MOVF	r0x00, W
002158   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
00215a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00215c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00215e   ecc3     call    0x2786, 0        	CALL	_lcd_write
002160   f013
002162   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002164   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002166   f002
002168   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00216a   f001
00216c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00216e   f000
002170   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002172   ffd9
002174   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	223; glcd.c	unsigned char lcd_read (void) {
002dd2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002dd4   ffe5
002dd6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002dd8   ffd9
                                           ;	.line	237; glcd.c	lcd_enable();
002dda   ece4     call    0x27c8, 0        	CALL	_lcd_enable
002ddc   f013
                                           ;	.line	238; glcd.c	return 0;
002dde   6ae8     clrf    0xe8, 0          	CLRF	WREG
002de0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002de2   ffd9
002de4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	198; glcd.c	void lcd_selectside(unsigned char sides) {
0026a8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026aa   ffe5
0026ac   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026ae   ffd9
0026b0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0026b2   ffe5
0026b4   0e02     movlw   0x2              	MOVLW	0x02
0026b6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0026b8   f000
                                           ;	.line	201; glcd.c	if (sides & LCD_LEFT) {
0026ba   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
0026bc   d006     bra     0x26ca           	BRA	_00178_DS_
                                           ;	.line	203; glcd.c	latched_lcd_cs1(1);
0026be   0e01     movlw   0x1              	MOVLW	0x01
0026c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026c2   ec46     call    0x288c, 0        	CALL	_latched_lcd_cs1
0026c4   f014
0026c6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026c8   d005     bra     0x26d4           	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	207; glcd.c	latched_lcd_cs1(0);
0026ca   0e00     movlw   0                	MOVLW	0x00
0026cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026ce   ec46     call    0x288c, 0        	CALL	_latched_lcd_cs1
0026d0   f014
0026d2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	210; glcd.c	if (sides & LCD_RIGHT) {
0026d4   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
0026d6   d006     bra     0x26e4           	BRA	_00181_DS_
                                           ;	.line	212; glcd.c	latched_lcd_cs2(1);
0026d8   0e01     movlw   0x1              	MOVLW	0x01
0026da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026dc   ec63     call    0x28c6, 0        	CALL	_latched_lcd_cs2
0026de   f014
0026e0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026e2   d005     bra     0x26ee           	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	216; glcd.c	latched_lcd_cs2(0);
0026e4   0e00     movlw   0                	MOVLW	0x00
0026e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026e8   ec63     call    0x28c6, 0        	CALL	_latched_lcd_cs2
0026ea   f014
0026ec   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
0026ee   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0026f0   f000
0026f2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026f4   ffd9
0026f6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	185; glcd.c	void lcd_write (unsigned char d) {
002786   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002788   ffe5
00278a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00278c   ffd9
00278e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002790   ffe5
002792   0e02     movlw   0x2              	MOVLW	0x02
002794   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002796   f000
                                           ;	.line	186; glcd.c	lcd_waitbusy();
002798   ec67     call    0x2ace, 0        	CALL	_lcd_waitbusy
00279a   f015
                                           ;	.line	188; glcd.c	latched_lcd_di(1);
00279c   0e01     movlw   0x1              	MOVLW	0x01
00279e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027a0   ecba     call    0x2974, 0        	CALL	_latched_lcd_di
0027a2   f014
0027a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	190; glcd.c	latched_lcd_rw(0);
0027a6   0e00     movlw   0                	MOVLW	0x00
0027a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027aa   ec9d     call    0x293a, 0        	CALL	_latched_lcd_rw
0027ac   f014
0027ae   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	latched_lcd_data(d);
0027b0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0027b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027b4   ec3d     call    0x2c7a, 0        	CALL	_latched_lcd_data
0027b6   f016
0027b8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	194; glcd.c	lcd_enable();
0027ba   ece4     call    0x27c8, 0        	CALL	_lcd_enable
0027bc   f013
0027be   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0027c0   f000
0027c2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027c4   ffd9
0027c6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
002ace   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ad0   ffe5
002ad2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ad4   ffd9
002ad6   0000     nop                      	nop 
002ad8   0000     nop                      	nop 
002ada   0000     nop                      	nop 
002adc   0000     nop                      	nop 
002ade   0000     nop                      	nop 
002ae0   0000     nop                      	nop 
002ae2   0000     nop                      	nop 
002ae4   0000     nop                      	nop 
                                           ;	.line	180; glcd.c	sleep_ms(10);
002ae6   0e00     movlw   0                	MOVLW	0x00
002ae8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002aea   0e00     movlw   0                	MOVLW	0x00
002aec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002aee   0e00     movlw   0                	MOVLW	0x00
002af0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af2   0e0a     movlw   0xa              	MOVLW	0x0a
002af4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af6   ec47     call    0x168e, 0        	CALL	_sleep_ms
002af8   f00b
002afa   0e04     movlw   0x4              	MOVLW	0x04
002afc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002afe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b00   ffd9
002b02   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
0026f8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026fa   ffe5
0026fc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026fe   ffd9
002700   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002702   ffe5
002704   0e02     movlw   0x2              	MOVLW	0x02
002706   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002708   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
00270a   ec67     call    0x2ace, 0        	CALL	_lcd_waitbusy
00270c   f015
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
00270e   0e00     movlw   0                	MOVLW	0x00
002710   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002712   ecba     call    0x2974, 0        	CALL	_latched_lcd_di
002714   f014
002716   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
002718   0e00     movlw   0                	MOVLW	0x00
00271a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00271c   ec9d     call    0x293a, 0        	CALL	_latched_lcd_rw
00271e   f014
002720   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
002722   0e3f     movlw   0x3f             	MOVLW	0x3f
002724   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002726   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
002728   5000     movf    0, 0, 0          	MOVF	r0x00, W
00272a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00272c   ec3d     call    0x2c7a, 0        	CALL	_latched_lcd_data
00272e   f016
002730   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
002732   ece4     call    0x27c8, 0        	CALL	_lcd_enable
002734   f013
002736   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002738   f000
00273a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00273c   ffd9
00273e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
002740   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002742   ffe5
002744   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002746   ffd9
002748   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00274a   ffe5
00274c   0e02     movlw   0x2              	MOVLW	0x02
00274e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002750   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
002752   ec67     call    0x2ace, 0        	CALL	_lcd_waitbusy
002754   f015
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
002756   0e00     movlw   0                	MOVLW	0x00
002758   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00275a   ecba     call    0x2974, 0        	CALL	_latched_lcd_di
00275c   f014
00275e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
002760   0e00     movlw   0                	MOVLW	0x00
002762   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002764   ec9d     call    0x293a, 0        	CALL	_latched_lcd_rw
002766   f014
002768   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
00276a   0eb8     movlw   0xb8             	MOVLW	0xb8
00276c   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
00276e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002770   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002772   ec3d     call    0x2c7a, 0        	CALL	_latched_lcd_data
002774   f016
002776   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
002778   ece4     call    0x27c8, 0        	CALL	_lcd_enable
00277a   f013
00277c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00277e   f000
002780   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002782   ffd9
002784   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
002216   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002218   ffe5
00221a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00221c   ffd9
00221e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002220   ffe5
002222   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002224   ffe5
002226   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002228   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
00222a   0e03     movlw   0x3              	MOVLW	0x03
00222c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00222e   ec54     call    0x26a8, 0        	CALL	_lcd_selectside
002230   f013
002232   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
002234   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
002236   5000     movf    0, 0, 0          	MOVF	r0x00, W
002238   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00223a   eca0     call    0x2740, 0        	CALL	_lcd_setpage
00223c   f013
00223e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
002240   0e00     movlw   0                	MOVLW	0x00
002242   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002244   ec7c     call    0x26f8, 0        	CALL	_lcd_setyaddr
002246   f013
002248   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
00224a   0e00     movlw   0                	MOVLW	0x00
00224c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00224e   ec3d     call    0x2c7a, 0        	CALL	_latched_lcd_data
002250   f016
002252   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
002254   0e00     movlw   0                	MOVLW	0x00
002256   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002258   ec9d     call    0x293a, 0        	CALL	_latched_lcd_rw
00225a   f014
00225c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
00225e   0e01     movlw   0x1              	MOVLW	0x01
002260   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002262   ecba     call    0x2974, 0        	CALL	_latched_lcd_di
002264   f014
002266   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002268   0e40     movlw   0x40             	MOVLW	0x40
00226a   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
00226c   ece4     call    0x27c8, 0        	CALL	_lcd_enable
00226e   f013
002270   0000     nop                      	nop 
002272   0000     nop                      	nop 
002274   0000     nop                      	nop 
002276   0000     nop                      	nop 
002278   0000     nop                      	nop 
00227a   0000     nop                      	nop 
00227c   0000     nop                      	nop 
00227e   0000     nop                      	nop 
002280   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002282   6e02     movwf   0x2, 0           	MOVWF	r0x02
002284   0402     decf    0x2, 0, 0        	DECF	r0x02, W
002286   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002288   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00228a   e1f0     bnz     0x226c           	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
00228c   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00228e   0e08     movlw   0x8              	MOVLW	0x08
002290   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
002292   e3d1     bnc     0x2236           	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
002294   0e01     movlw   0x1              	MOVLW	0x01
002296   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002298   ec54     call    0x26a8, 0        	CALL	_lcd_selectside
00229a   f013
00229c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00229e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0022a0   f002
0022a2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0022a4   f001
0022a6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0022a8   f000
0022aa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022ac   ffd9
0022ae   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
002554   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002556   ffe5
002558   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00255a   ffd9
00255c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00255e   ffe5
002560   0e02     movlw   0x2              	MOVLW	0x02
002562   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002564   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(1);
002566   0e01     movlw   0x1              	MOVLW	0x01
002568   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00256a   ec46     call    0x288c, 0        	CALL	_latched_lcd_cs1
00256c   f014
00256e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(1);
002570   0e01     movlw   0x1              	MOVLW	0x01
002572   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002574   ec63     call    0x28c6, 0        	CALL	_latched_lcd_cs2
002576   f014
002578   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
00257a   0e00     movlw   0                	MOVLW	0x00
00257c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257e   ec9d     call    0x293a, 0        	CALL	_latched_lcd_rw
002580   f014
002582   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
002584   0e00     movlw   0                	MOVLW	0x00
002586   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002588   ecba     call    0x2974, 0        	CALL	_latched_lcd_di
00258a   f014
00258c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
00258e   0e01     movlw   0x1              	MOVLW	0x01
002590   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002592   0e3e     movlw   0x3e             	MOVLW	0x3e
002594   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
002596   5000     movf    0, 0, 0          	MOVF	r0x00, W
002598   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00259a   ec3d     call    0x2c7a, 0        	CALL	_latched_lcd_data
00259c   f016
00259e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
0025a0   ece4     call    0x27c8, 0        	CALL	_lcd_enable
0025a2   f013
0025a4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0025a6   f000
0025a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025aa   ffd9
0025ac   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
002656   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002658   ffe5
00265a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00265c   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
00265e   0e00     movlw   0                	MOVLW	0x00
002660   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002662   0e00     movlw   0                	MOVLW	0x00
002664   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002666   0e00     movlw   0                	MOVLW	0x00
002668   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00266a   0e01     movlw   0x1              	MOVLW	0x01
00266c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00266e   ec47     call    0x168e, 0        	CALL	_sleep_ms
002670   f00b
002672   0e04     movlw   0x4              	MOVLW	0x04
002674   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(0);
002676   0e00     movlw   0                	MOVLW	0x00
002678   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00267a   ec80     call    0x2900, 0        	CALL	_latched_lcd_rst
00267c   f014
00267e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
002680   0e00     movlw   0                	MOVLW	0x00
002682   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002684   0e00     movlw   0                	MOVLW	0x00
002686   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002688   0e00     movlw   0                	MOVLW	0x00
00268a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00268c   0e01     movlw   0x1              	MOVLW	0x01
00268e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002690   ec47     call    0x168e, 0        	CALL	_sleep_ms
002692   f00b
002694   0e04     movlw   0x4              	MOVLW	0x04
002696   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(1);
002698   0e01     movlw   0x1              	MOVLW	0x01
00269a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00269c   ec80     call    0x2900, 0        	CALL	_latched_lcd_rst
00269e   f014
0026a0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026a2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026a4   ffd9
0026a6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
002ca2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ca4   ffe5
002ca6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ca8   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
002caa   0e00     movlw   0                	MOVLW	0x00
002cac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cae   0e00     movlw   0                	MOVLW	0x00
002cb0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cb2   0e00     movlw   0                	MOVLW	0x00
002cb4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cb6   0e0a     movlw   0xa              	MOVLW	0x0a
002cb8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cba   ec47     call    0x168e, 0        	CALL	_sleep_ms
002cbc   f00b
002cbe   0e04     movlw   0x4              	MOVLW	0x04
002cc0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
002cc2   0e01     movlw   0x1              	MOVLW	0x01
002cc4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cc6   ffd9
002cc8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
0027c8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027ca   ffe5
0027cc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027ce   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
0027d0   0e01     movlw   0x1              	MOVLW	0x01
0027d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027d4   ecd7     call    0x29ae, 0        	CALL	_latched_lcd_enable
0027d6   f014
0027d8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027da   0000     nop                      	nop 
0027dc   0000     nop                      	nop 
0027de   0000     nop                      	nop 
0027e0   0000     nop                      	nop 
0027e2   0000     nop                      	nop 
0027e4   0000     nop                      	nop 
0027e6   0000     nop                      	nop 
0027e8   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
0027ea   0e00     movlw   0                	MOVLW	0x00
0027ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027ee   ecd7     call    0x29ae, 0        	CALL	_latched_lcd_enable
0027f0   f014
0027f2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027f4   0000     nop                      	nop 
0027f6   0000     nop                      	nop 
0027f8   0000     nop                      	nop 
0027fa   0000     nop                      	nop 
0027fc   0000     nop                      	nop 
0027fe   0000     nop                      	nop 
002800   0000     nop                      	nop 
002802   0000     nop                      	nop 
002804   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002806   ffd9
002808   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
00280a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00280c   ffe5
00280e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002810   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
002812   0e01     movlw   0x1              	MOVLW	0x01
002814   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002816   ecf4     call    0x29e8, 0        	CALL	_latched_lcd_power
002818   f014
00281a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00281c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
00281e   6b16     clrf    0x16, 0x1        	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(0);
002820   0e00     movlw   0                	MOVLW	0x00
002822   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002824   ec46     call    0x288c, 0        	CALL	_latched_lcd_cs1
002826   f014
002828   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(0);
00282a   0e00     movlw   0                	MOVLW	0x00
00282c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00282e   ec63     call    0x28c6, 0        	CALL	_latched_lcd_cs2
002830   f014
002832   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
002834   ec2b     call    0x2656, 0        	CALL	_lcd_reset
002836   f013
                                           ;	.line	38; glcd.c	lcd_screenon(1);
002838   0e01     movlw   0x1              	MOVLW	0x01
00283a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00283c   ecaa     call    0x2554, 0        	CALL	_lcd_screenon
00283e   f012
002840   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
002842   ec0b     call    0x2216, 0        	CALL	_lcd_cls
002844   f011
002846   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002848   ffd9
00284a   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1470 (0x05be) bytes ( 1.12%)
                                           ;           	  735 (0x02df) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
