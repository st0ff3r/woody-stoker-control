gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-18-2013  01:04:01
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Wed Dec 18 01:04:01 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	WDTPS=8192
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	_my_usart_open
                                           	global	_fifo_in_use
                                           	global	_fifo_put
                                           	global	_fifo_get
                                           	global	_base64decode
                                           	global	_base64encode
                                           	global	_validate_command
                                           	global	_reset
                                           	global	__debug
                                           	global	_i
                                           	global	_timer_1_ms
                                           	global	_sensor_inputs
                                           	global	_last_inputs
                                           	global	_output_ac_power_pwm
                                           	global	_ac_power_pwm_counter
                                           	global	_ad_inputs
                                           	global	_fifo_head
                                           	global	_fifo_tail
                                           	global	_fifo_buffer
                                           	global	_command
                                           	global	_command_index
                                           	global	_valid_command
                                           	global	__latch_2_data
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_crc16
                                           	extern	_sprintf
                                           	extern	_strchr
                                           	extern	_memcpy
                                           	extern	_adc_open
                                           	extern	_adc_conv
                                           	extern	_adc_busy
                                           	extern	_adc_read
                                           	extern	_adc_setchannel
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_usart_puts
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           	extern	__moduint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _timer_1_ms	res	4
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _fifo_head	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _fifo_tail	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _command_index	res	1
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _main_c_1_102	res	1
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _output_ac_power_pwm	res	6
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _sensor_inputs	res	1
                                           
                                           udata_pillefyrsstyring_8	udata
                                           _command	res	21
                                           
                                           udata_pillefyrsstyring_9	udata
                                           _valid_command	res	7
                                           
                                           udata_pillefyrsstyring_10	udata
                                           _main_buffer_1_102	res	10
                                           
                                           udata_pillefyrsstyring_11	udata
                                           _ad_inputs	res	16
                                           
                                           udata_pillefyrsstyring_12	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_13	udata
                                           _ac_power_pwm_counter	res	1
                                           
                                           udata_pillefyrsstyring_14	udata
                                           __latch_2_data	res	1
                                           
                                           udata_pillefyrsstyring_15	udata
                                           _fifo_buffer	res	100
                                           
                                           udata_pillefyrsstyring_16	udata
                                           _base64decode_xlate_1_148	res	17
                                           
                                           udata_pillefyrsstyring_17	udata
                                           _validate_command_decoded_command_1_153	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_isr_high_prio	code	0X000008
                                           ivec_0x1_isr_high_prio:
000008   efc0     goto    0x1380           	GOTO	_isr_high_prio
00000a   f009
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x2_isr_low_prio	code	0X000018
                                           ivec_0x2_isr_low_prio:
000018   efd8     goto    0x21b0           	GOTO	_isr_low_prio
00001a   f010
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	47; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000828   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00082a   0bfc     andlw   0xfc             	ANDLW	0xfc
00082c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	48; pillefyrsstyring.c	OSCCONbits.IRCF = 0x7;	// 8 MHz
00082e   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000830   0b8f     andlw   0x8f             	ANDLW	0x8f
000832   0970     iorlw   0x70             	IORLW	0x70
000834   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	49; pillefyrsstyring.c	WDTCONbits.SWDTEN = 1;	// enable watchdog
000836   80d1     bsf     0xd1, 0, 0       	BSF	_WDTCONbits, 0
000838   0004     clrwdt                   	clrwdt 
00083a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	52; pillefyrsstyring.c	timer_1_ms = 0;
00083c   6b67     clrf    0x67, 0x1        	CLRF	_timer_1_ms, B
00083e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
000840   6b68     clrf    0x68, 0x1        	CLRF	(_timer_1_ms + 1), B
000842   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
000844   6b69     clrf    0x69, 0x1        	CLRF	(_timer_1_ms + 2), B
000846   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
000848   6b6a     clrf    0x6a, 0x1        	CLRF	(_timer_1_ms + 3), B
00084a   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	54; pillefyrsstyring.c	fifo_head = 0;
00084c   6b03     clrf    0x3, 0x1         	CLRF	_fifo_head, B
00084e   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
000850   6b04     clrf    0x4, 0x1         	CLRF	(_fifo_head + 1), B
000852   0108     movlb   0x8              	BANKSEL	_fifo_tail
                                           ;	.line	55; pillefyrsstyring.c	fifo_tail = 0;
000854   6b05     clrf    0x5, 0x1         	CLRF	_fifo_tail, B
000856   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
000858   6b06     clrf    0x6, 0x1         	CLRF	(_fifo_tail + 1), B
00085a   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	56; pillefyrsstyring.c	command_index = 0;
00085c   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	59; pillefyrsstyring.c	RCONbits.IPEN = 1;
00085e   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	61; pillefyrsstyring.c	init_timers();
000860   ec1b     call    0x2a36, 0        	CALL	_init_timers
000862   f015
                                           ;	.line	64; pillefyrsstyring.c	IPR1bits.RCIP = 0;
000864   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	65; pillefyrsstyring.c	IPR1bits.TXIP = 0;
000866   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	76; pillefyrsstyring.c	my_usart_open();
000868   ece4     call    0x2bc8, 0        	CALL	_my_usart_open
00086a   f015
                                           ;	.line	78; pillefyrsstyring.c	sleep_ms(1000);	// let stuff settle...
00086c   0e00     movlw   0                	MOVLW	0x00
00086e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000870   0e00     movlw   0                	MOVLW	0x00
000872   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000874   0e03     movlw   0x3              	MOVLW	0x03
000876   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000878   0ee8     movlw   0xe8             	MOVLW	0xe8
00087a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00087c   ec14     call    0x1628, 0        	CALL	_sleep_ms
00087e   f00b
000880   0e04     movlw   0x4              	MOVLW	0x04
000882   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	79; pillefyrsstyring.c	usart_puts("OpenStoker starting... serial working\n\r");
000884   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000886   6e02     movwf   0x2, 0           	MOVWF	r0x02
000888   0e14     movlw   0x14             	MOVLW	HIGH(__str_0)
00088a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00088c   0e94     movlw   0x94             	MOVLW	LOW(__str_0)
00088e   6e00     movwf   0, 0             	MOVWF	r0x00
000890   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000896   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000898   5000     movf    0, 0, 0          	MOVF	r0x00, W
00089a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00089c   ec3e     call    0x247c, 0        	CALL	_usart_puts
00089e   f012
0008a0   0e03     movlw   0x3              	MOVLW	0x03
0008a2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	121; pillefyrsstyring.c	adc_open(ADC_CHN_0, ADC_FOSC_4 | ADC_ACQT_20, ADC_CFG_12A, ADC_FRM_RJUST | ADC_INT_OFF | ADC_VCFG_AN3_AN2);
0008a4   0eb0     movlw   0xb0             	MOVLW	0xb0
0008a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008a8   0e03     movlw   0x3              	MOVLW	0x03
0008aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ac   0e3c     movlw   0x3c             	MOVLW	0x3c
0008ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b0   0e00     movlw   0                	MOVLW	0x00
0008b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b4   ec00     call    0x2400, 0        	CALL	_adc_open
0008b6   f012
0008b8   0e04     movlw   0x4              	MOVLW	0x04
0008ba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	124; pillefyrsstyring.c	init_latches();
0008bc   ecf9     call    0x2bf2, 0        	CALL	_init_latches
0008be   f015
                                           ;	.line	136; pillefyrsstyring.c	RELAY = 1;
0008c0   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
                                           ;	.line	138; pillefyrsstyring.c	latched_lcd_power(1);
0008c2   0e01     movlw   0x1              	MOVLW	0x01
0008c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c6   ecc4     call    0x2988, 0        	CALL	_latched_lcd_power
0008c8   f014
0008ca   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	140; pillefyrsstyring.c	last_inputs = get_inputs();
0008cc   ec5c     call    0x2cb8, 0        	CALL	_get_inputs
0008ce   f016
0008d0   0108     movlb   0x8              	BANKSEL	_last_inputs
0008d2   6f10     movwf   0x10, 0x1        	MOVWF	_last_inputs, B
                                           _00132_DS_:
                                           ;	.line	145; pillefyrsstyring.c	if (fifo_get(&c)) {
0008d4   0e08     movlw   0x8              	MOVLW	HIGH(_main_c_1_102)
0008d6   6e01     movwf   0x1, 0           	MOVWF	r0x01
0008d8   0e11     movlw   0x11             	MOVLW	LOW(_main_c_1_102)
0008da   6e00     movwf   0, 0             	MOVWF	r0x00
0008dc   0e80     movlw   0x80             	MOVLW	0x80
0008de   6e02     movwf   0x2, 0           	MOVWF	r0x02
0008e0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0008e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0008e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ec   ecdf     call    0x1fbe, 0        	CALL	_fifo_get
0008ee   f00f
0008f0   6e00     movwf   0, 0             	MOVWF	r0x00
0008f2   0e03     movlw   0x3              	MOVLW	0x03
0008f4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0008f6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008f8   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0008fa   d13d     bra     0xb76            	BRA	_00124_DS_
0008fc   0108     movlb   0x8              	BANKSEL	_main_c_1_102
                                           ;	.line	146; pillefyrsstyring.c	if (c == '\n' || c == '.') {
0008fe   5111     movf    0x11, 0, 0x1     	MOVF	_main_c_1_102, W, B
000900   0a0a     xorlw   0xa              	XORLW	0x0a
000902   e005     bz      0x90e            	BZ	_00119_DS_
                                           _00199_DS_:
000904   0108     movlb   0x8              	BANKSEL	_main_c_1_102
000906   5111     movf    0x11, 0, 0x1     	MOVF	_main_c_1_102, W, B
000908   0a2e     xorlw   0x2e             	XORLW	0x2e
00090a   e001     bz      0x90e            	BZ	_00119_DS_
00090c   d109     bra     0xb20            	BRA	_00120_DS_
                                           _00119_DS_:
00090e   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	148; pillefyrsstyring.c	command_index = 0;
000910   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	149; pillefyrsstyring.c	if (validate_command(command, valid_command)) {
000912   0e00     movlw   0                	MOVLW	HIGH(_command)
000914   6e01     movwf   0x1, 0           	MOVWF	r0x01
000916   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000918   6e00     movwf   0, 0             	MOVWF	r0x00
00091a   0e80     movlw   0x80             	MOVLW	0x80
00091c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00091e   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000920   6e04     movwf   0x4, 0           	MOVWF	r0x04
000922   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
000924   6e03     movwf   0x3, 0           	MOVWF	r0x03
000926   0e80     movlw   0x80             	MOVLW	0x80
000928   6e05     movwf   0x5, 0           	MOVWF	r0x05
00092a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00092c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00092e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000930   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000932   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000934   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000936   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000938   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00093a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00093c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00093e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000940   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000942   ec6b     call    0x14d6, 0        	CALL	_validate_command
000944   f00a
000946   6e00     movwf   0, 0             	MOVWF	r0x00
000948   0e06     movlw   0x6              	MOVLW	0x06
00094a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00094c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00094e   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000950   d0e3     bra     0xb18            	BRA	_00114_DS_
000952   0004     clrwdt                   	clrwdt 
                                           ;	.line	151; pillefyrsstyring.c	RELAY = 1;
000954   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
000956   0100     movlb   0                	BANKSEL	_valid_command
                                           ;	.line	153; pillefyrsstyring.c	switch (valid_command[0]) {					// only look at first character
000958   51f9     movf    0xf9, 0, 0x1     	MOVF	_valid_command, W, B
00095a   6e00     movwf   0, 0             	MOVWF	r0x00
00095c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00095e   0a61     xorlw   0x61             	XORLW	0x61
000960   e101     bnz     0x964            	BNZ	_00203_DS_
000962   d096     bra     0xa90            	BRA	_00151_DS_
                                           _00203_DS_:
000964   5000     movf    0, 0, 0          	MOVF	r0x00, W
000966   0a67     xorlw   0x67             	XORLW	0x67
000968   e101     bnz     0x96c            	BNZ	_00205_DS_
00096a   d03c     bra     0x9e4            	BRA	_00107_DS_
                                           _00205_DS_:
00096c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00096e   0a73     xorlw   0x73             	XORLW	0x73
000970   e005     bz      0x97c            	BZ	_00105_DS_
000972   5000     movf    0, 0, 0          	MOVF	r0x00, W
000974   0a7a     xorlw   0x7a             	XORLW	0x7a
000976   e101     bnz     0x97a            	BNZ	_00209_DS_
000978   d069     bra     0xa4c            	BRA	_00108_DS_
                                           _00209_DS_:
00097a   d0ca     bra     0xb10            	BRA	_00111_DS_
                                           _00105_DS_:
                                           ;	.line	155; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
00097c   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00134_DS_:
                                           ;	.line	156; pillefyrsstyring.c	output_ac_power_pwm[j] = valid_command[j + 1];
00097e   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
000980   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000982   6e01     movwf   0x1, 0           	MOVWF	r0x01
000984   6a02     clrf    0x2, 0           	CLRF	r0x02
000986   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
000988   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00098a   2800     incf    0, 0, 0          	INCF	r0x00, W
00098c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00098e   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
000990   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
000992   6e04     movwf   0x4, 0           	MOVWF	r0x04
000994   6a05     clrf    0x5, 0           	CLRF	r0x05
000996   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000998   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
00099a   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
00099c   ffe9
00099e   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0009a0   ffea
0009a2   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
0009a4   f004
0009a6   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0009a8   ffe9
0009aa   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0009ac   ffea
0009ae   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
0009b0   ffef
                                           ;	.line	155; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009b2   c003     movff   0x3, 0           	MOVFF	r0x03, r0x00
0009b4   f000
0009b6   0e06     movlw   0x6              	MOVLW	0x06
0009b8   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
0009ba   e3e1     bnc     0x97e            	BNC	_00134_DS_
                                           ;	.line	158; pillefyrsstyring.c	usart_putc('!');	// ok values set to ac power pwm system
0009bc   0e21     movlw   0x21             	MOVLW	0x21
0009be   ecde     call    0x2dbc, 0        	CALL	_usart_putc
0009c0   f016
                                           ;	.line	159; pillefyrsstyring.c	usart_puts("\n\r");
0009c2   0e00     movlw   0                	MOVLW	UPPER(__str_1)
0009c4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0009c6   0e14     movlw   0x14             	MOVLW	HIGH(__str_1)
0009c8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0009ca   0ebc     movlw   0xbc             	MOVLW	LOW(__str_1)
0009cc   6e00     movwf   0, 0             	MOVWF	r0x00
0009ce   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009d2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009d6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009da   ec3e     call    0x247c, 0        	CALL	_usart_puts
0009dc   f012
0009de   0e03     movlw   0x3              	MOVLW	0x03
0009e0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	160; pillefyrsstyring.c	break;
0009e2   d0c9     bra     0xb76            	BRA	_00124_DS_
                                           _00107_DS_:
                                           ;	.line	162; pillefyrsstyring.c	sprintf(buffer, "g%02x\n\r", sensor_inputs);
0009e4   c812     movff   0x812, 0         	MOVFF	_sensor_inputs, r0x00
0009e6   f000
0009e8   6a01     clrf    0x1, 0           	CLRF	r0x01
0009ea   0e00     movlw   0                	MOVLW	UPPER(__str_2)
0009ec   6e04     movwf   0x4, 0           	MOVWF	r0x04
0009ee   0e14     movlw   0x14             	MOVLW	HIGH(__str_2)
0009f0   6e03     movwf   0x3, 0           	MOVWF	r0x03
0009f2   0ec0     movlw   0xc0             	MOVLW	LOW(__str_2)
0009f4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0009f6   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
0009f8   6e06     movwf   0x6, 0           	MOVWF	r0x06
0009fa   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
0009fc   6e05     movwf   0x5, 0           	MOVWF	r0x05
0009fe   0e80     movlw   0x80             	MOVLW	0x80
000a00   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a02   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a04   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a06   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a08   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a0a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a0c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a0e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a10   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a12   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a14   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a16   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a18   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1a   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a1c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a20   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a22   ec8a     call    0x1b14, 0        	CALL	_sprintf
000a24   f00d
000a26   0e08     movlw   0x8              	MOVLW	0x08
000a28   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	163; pillefyrsstyring.c	usart_puts(buffer);
000a2a   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a2c   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a2e   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a30   6e00     movwf   0, 0             	MOVWF	r0x00
000a32   0e80     movlw   0x80             	MOVLW	0x80
000a34   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a36   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a42   ec3e     call    0x247c, 0        	CALL	_usart_puts
000a44   f012
000a46   0e03     movlw   0x3              	MOVLW	0x03
000a48   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	164; pillefyrsstyring.c	break;
000a4a   d095     bra     0xb76            	BRA	_00124_DS_
                                           _00108_DS_:
                                           ;	.line	166; pillefyrsstyring.c	usart_putc('z');
000a4c   0e7a     movlw   0x7a             	MOVLW	0x7a
000a4e   ecde     call    0x2dbc, 0        	CALL	_usart_putc
000a50   f016
                                           ;	.line	167; pillefyrsstyring.c	usart_puts("\n\r");
000a52   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a54   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a56   0e14     movlw   0x14             	MOVLW	HIGH(__str_1)
000a58   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a5a   0ebc     movlw   0xbc             	MOVLW	LOW(__str_1)
000a5c   6e00     movwf   0, 0             	MOVWF	r0x00
000a5e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a62   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a66   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a6a   ec3e     call    0x247c, 0        	CALL	_usart_puts
000a6c   f012
000a6e   0e03     movlw   0x3              	MOVLW	0x03
000a70   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	168; pillefyrsstyring.c	sleep_ms(100);
000a72   0e00     movlw   0                	MOVLW	0x00
000a74   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a76   0e00     movlw   0                	MOVLW	0x00
000a78   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a7a   0e00     movlw   0                	MOVLW	0x00
000a7c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a7e   0e64     movlw   0x64             	MOVLW	0x64
000a80   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a82   ec14     call    0x1628, 0        	CALL	_sleep_ms
000a84   f00b
000a86   0e04     movlw   0x4              	MOVLW	0x04
000a88   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	169; pillefyrsstyring.c	reset();
000a8a   ecd6     call    0x2dac, 0        	CALL	_reset
000a8c   f016
                                           ;	.line	170; pillefyrsstyring.c	break;
000a8e   d073     bra     0xb76            	BRA	_00124_DS_
                                           _00151_DS_:
                                           ;	.line	172; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000a90   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00136_DS_:
                                           ;	.line	173; pillefyrsstyring.c	sprintf(buffer, "ad%d: %04x\n\r", j, ad_inputs[0]);
000a92   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000a94   f001
000a96   6a02     clrf    0x2, 0           	CLRF	r0x02
000a98   0e00     movlw   0                	MOVLW	UPPER(__str_3)
000a9a   6e05     movwf   0x5, 0           	MOVWF	r0x05
000a9c   0e14     movlw   0x14             	MOVLW	HIGH(__str_3)
000a9e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000aa0   0ec8     movlw   0xc8             	MOVLW	LOW(__str_3)
000aa2   6e03     movwf   0x3, 0           	MOVWF	r0x03
000aa4   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000aa6   6e07     movwf   0x7, 0           	MOVWF	r0x07
000aa8   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000aaa   6e06     movwf   0x6, 0           	MOVWF	r0x06
000aac   0e80     movlw   0x80             	MOVLW	0x80
000aae   6e08     movwf   0x8, 0           	MOVWF	r0x08
000ab0   010f     movlb   0xf              	BANKSEL	(_ad_inputs + 1)
000ab2   5132     movf    0x32, 0, 0x1     	MOVF	(_ad_inputs + 1), W, B
000ab4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ab6   010f     movlb   0xf              	BANKSEL	_ad_inputs
000ab8   5131     movf    0x31, 0, 0x1     	MOVF	_ad_inputs, W, B
000aba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000abc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000abe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ac2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000ac6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000aca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000acc   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000ace   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad0   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000ad2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad4   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000ad6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad8   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000ada   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000adc   ec8a     call    0x1b14, 0        	CALL	_sprintf
000ade   f00d
000ae0   0e0a     movlw   0xa              	MOVLW	0x0a
000ae2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	174; pillefyrsstyring.c	usart_puts(buffer);
000ae4   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000ae6   6e02     movwf   0x2, 0           	MOVWF	r0x02
000ae8   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000aea   6e01     movwf   0x1, 0           	MOVWF	r0x01
000aec   0e80     movlw   0x80             	MOVLW	0x80
000aee   6e03     movwf   0x3, 0           	MOVWF	r0x03
000af0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000af2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000af4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000af6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000af8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000afa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000afc   ec3e     call    0x247c, 0        	CALL	_usart_puts
000afe   f012
000b00   0e03     movlw   0x3              	MOVLW	0x03
000b02   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	172; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000b04   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000b06   0e08     movlw   0x8              	MOVLW	0x08
000b08   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000b0a   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000b0c   d7c2     bra     0xa92            	BRA	_00136_DS_
                                           ;	.line	176; pillefyrsstyring.c	break;
000b0e   d033     bra     0xb76            	BRA	_00124_DS_
                                           _00111_DS_:
                                           ;	.line	178; pillefyrsstyring.c	usart_putc('?');	// unknown command
000b10   0e3f     movlw   0x3f             	MOVLW	0x3f
000b12   ecde     call    0x2dbc, 0        	CALL	_usart_putc
000b14   f016
                                           ;	.line	179; pillefyrsstyring.c	}		
000b16   d02f     bra     0xb76            	BRA	_00124_DS_
                                           _00114_DS_:
                                           ;	.line	182; pillefyrsstyring.c	usart_putc('?');			// command not valid
000b18   0e3f     movlw   0x3f             	MOVLW	0x3f
000b1a   ecde     call    0x2dbc, 0        	CALL	_usart_putc
000b1c   f016
000b1e   d02b     bra     0xb76            	BRA	_00124_DS_
                                           _00120_DS_:
                                           ;	.line	188; pillefyrsstyring.c	if (command_index <= COMMAND_LENGTH) {
000b20   0e15     movlw   0x15             	MOVLW	0x15
000b22   0108     movlb   0x8              	BANKSEL	_command_index
000b24   5d0f     subwf   0xf, 0, 0x1      	SUBWF	_command_index, W, B
000b26   e210     bc      0xb48            	BC	_00117_DS_
                                           ;	.line	189; pillefyrsstyring.c	command[command_index] = c;
000b28   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000b2a   0108     movlb   0x8              	BANKSEL	_command_index
000b2c   250f     addwf   0xf, 0, 0x1      	ADDWF	_command_index, W, B
000b2e   6e00     movwf   0, 0             	MOVWF	r0x00
000b30   6a01     clrf    0x1, 0           	CLRF	r0x01
000b32   0e00     movlw   0                	MOVLW	HIGH(_command)
000b34   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000b36   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000b38   ffe9
000b3a   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000b3c   ffea
000b3e   c811     movff   0x811, 0xfef     	MOVFF	_main_c_1_102, INDF0
000b40   ffef
000b42   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	190; pillefyrsstyring.c	command_index++;
000b44   2b0f     incf    0xf, 0x1, 0x1    	INCF	_command_index, F, B
000b46   d017     bra     0xb76            	BRA	_00124_DS_
                                           _00117_DS_:
000b48   0100     movlb   0                	BANKSEL	(_command + 20)
                                           ;	.line	193; pillefyrsstyring.c	command[COMMAND_LENGTH] = '\0';	// null terminate it
000b4a   6bf8     clrf    0xf8, 0x1        	CLRF	(_command + 20), B
000b4c   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	194; pillefyrsstyring.c	command_index = 0;
000b4e   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	195; pillefyrsstyring.c	usart_putc('+');		// overflow
000b50   0e2b     movlw   0x2b             	MOVLW	0x2b
000b52   ecde     call    0x2dbc, 0        	CALL	_usart_putc
000b54   f016
                                           ;	.line	196; pillefyrsstyring.c	usart_puts("\n\r");
000b56   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000b58   6e02     movwf   0x2, 0           	MOVWF	r0x02
000b5a   0e14     movlw   0x14             	MOVLW	HIGH(__str_1)
000b5c   6e01     movwf   0x1, 0           	MOVWF	r0x01
000b5e   0ebc     movlw   0xbc             	MOVLW	LOW(__str_1)
000b60   6e00     movwf   0, 0             	MOVWF	r0x00
000b62   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b66   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b6a   5000     movf    0, 0, 0          	MOVF	r0x00, W
000b6c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b6e   ec3e     call    0x247c, 0        	CALL	_usart_puts
000b70   f012
000b72   0e03     movlw   0x3              	MOVLW	0x03
000b74   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00124_DS_:
000b76   0108     movlb   0x8              	BANKSEL	_sensor_inputs
                                           ;	.line	201; pillefyrsstyring.c	if (sensor_inputs != last_inputs) {
000b78   5112     movf    0x12, 0, 0x1     	MOVF	_sensor_inputs, W, B
000b7a   0108     movlb   0x8              	BANKSEL	_last_inputs
000b7c   1910     xorwf   0x10, 0, 0x1     	XORWF	_last_inputs, W, B
000b7e   e004     bz      0xb88            	BZ	_00157_DS_
                                           ;	.line	202; pillefyrsstyring.c	last_inputs = sensor_inputs;
000b80   c812     movff   0x812, 0x810     	MOVFF	_sensor_inputs, _last_inputs
000b82   f810
                                           ;	.line	203; pillefyrsstyring.c	_debug();	// blocks main for a while :-/
000b84   ecd2     call    0x25a4, 0        	CALL	__debug
000b86   f012
                                           _00157_DS_:
                                           ;	.line	207; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000b88   6a00     clrf    0, 0             	CLRF	r0x00
000b8a   6a01     clrf    0x1, 0           	CLRF	r0x01
000b8c   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00138_DS_:
                                           ;	.line	208; pillefyrsstyring.c	adc_setchannel(j);
000b8e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000b90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b92   ece1     call    0x29c2, 0        	CALL	_adc_setchannel
000b94   f014
000b96   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	209; pillefyrsstyring.c	adc_conv();
000b98   ec0a     call    0x14, 0          	CALL	_adc_conv
000b9a   f000
                                           _00127_DS_:
                                           ;	.line	210; pillefyrsstyring.c	while(adc_busy()) {
000b9c   ecf9     call    0x2df2, 0        	CALL	_adc_busy
000b9e   f016
000ba0   6e03     movwf   0x3, 0           	MOVWF	r0x03
000ba2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000ba4   e1fb     bnz     0xb9c            	BNZ	_00127_DS_
                                           ;	.line	213; pillefyrsstyring.c	ad_inputs[j] = adc_read();
000ba6   0e31     movlw   0x31             	MOVLW	LOW(_ad_inputs)
000ba8   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
000baa   6e03     movwf   0x3, 0           	MOVWF	r0x03
000bac   0e0f     movlw   0xf              	MOVLW	HIGH(_ad_inputs)
000bae   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000bb0   6e04     movwf   0x4, 0           	MOVWF	r0x04
000bb2   eced     call    0x2dda, 0        	CALL	_adc_read
000bb4   f016
000bb6   6e05     movwf   0x5, 0           	MOVWF	r0x05
000bb8   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
000bba   f006
000bbc   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000bbe   ffe9
000bc0   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000bc2   ffea
000bc4   c005     movff   0x5, 0xfee       	MOVFF	r0x05, POSTINC0
000bc6   ffee
000bc8   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000bca   ffef
                                           ;	.line	207; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000bcc   0e02     movlw   0x2              	MOVLW	0x02
000bce   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000bd0   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000bd2   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000bd4   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000bd6   0e08     movlw   0x8              	MOVLW	0x08
000bd8   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000bda   e3d9     bnc     0xb8e            	BNC	_00138_DS_
000bdc   d67b     bra     0x8d4            	BRA	_00132_DS_
000bde   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	494; pillefyrsstyring.c	void _debug() {
0025a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025a6   ffe5
0025a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025aa   ffd9
                                           ;	.line	495; pillefyrsstyring.c	latched_lcd_power(0);
0025ac   0e00     movlw   0                	MOVLW	0x00
0025ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025b0   ecc4     call    0x2988, 0        	CALL	_latched_lcd_power
0025b2   f014
0025b4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	496; pillefyrsstyring.c	sleep_ms(200);
0025b6   0e00     movlw   0                	MOVLW	0x00
0025b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025ba   0e00     movlw   0                	MOVLW	0x00
0025bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025be   0e00     movlw   0                	MOVLW	0x00
0025c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025c2   0ec8     movlw   0xc8             	MOVLW	0xc8
0025c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025c6   ec14     call    0x1628, 0        	CALL	_sleep_ms
0025c8   f00b
0025ca   0e04     movlw   0x4              	MOVLW	0x04
0025cc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	497; pillefyrsstyring.c	latched_lcd_power(1);
0025ce   0e01     movlw   0x1              	MOVLW	0x01
0025d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025d2   ecc4     call    0x2988, 0        	CALL	_latched_lcd_power
0025d4   f014
0025d6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	498; pillefyrsstyring.c	sleep_ms(200);
0025d8   0e00     movlw   0                	MOVLW	0x00
0025da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025dc   0e00     movlw   0                	MOVLW	0x00
0025de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025e0   0e00     movlw   0                	MOVLW	0x00
0025e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025e4   0ec8     movlw   0xc8             	MOVLW	0xc8
0025e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025e8   ec14     call    0x1628, 0        	CALL	_sleep_ms
0025ea   f00b
0025ec   0e04     movlw   0x4              	MOVLW	0x04
0025ee   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0025f0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025f2   ffd9
0025f4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__reset	code
                                           _reset:
                                           ;	.line	488; pillefyrsstyring.c	void reset() {
002dac   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002dae   ffe5
002db0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002db2   ffd9
002db4   00ff     reset                    	reset
002db6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002db8   ffd9
002dba   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__validate_command	code
                                           _validate_command:
                                           ;	.line	471; pillefyrsstyring.c	unsigned char validate_command(unsigned char *encoded_command, unsigned char *validated_command) {
0014d6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0014d8   ffe5
0014da   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0014dc   ffd9
0014de   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0014e0   ffe5
0014e2   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0014e4   ffe5
0014e6   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0014e8   ffe5
0014ea   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0014ec   ffe5
0014ee   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0014f0   ffe5
0014f2   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0014f4   ffe5
0014f6   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0014f8   ffe5
0014fa   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0014fc   ffe5
0014fe   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001500   ffe5
001502   0e02     movlw   0x2              	MOVLW	0x02
001504   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001506   f000
001508   0e03     movlw   0x3              	MOVLW	0x03
00150a   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00150c   f001
00150e   0e04     movlw   0x4              	MOVLW	0x04
001510   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001512   f002
001514   0e05     movlw   0x5              	MOVLW	0x05
001516   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
001518   f003
00151a   0e06     movlw   0x6              	MOVLW	0x06
00151c   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
00151e   f004
001520   0e07     movlw   0x7              	MOVLW	0x07
001522   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
001524   f005
                                           ;	.line	475; pillefyrsstyring.c	base64decode(encoded_command, decoded_command);
001526   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_153)
001528   6e07     movwf   0x7, 0           	MOVWF	r0x07
00152a   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_153)
00152c   6e06     movwf   0x6, 0           	MOVWF	r0x06
00152e   0e80     movlw   0x80             	MOVLW	0x80
001530   6e08     movwf   0x8, 0           	MOVWF	r0x08
001532   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001534   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001536   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001538   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00153a   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00153c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00153e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001540   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001542   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001544   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001546   5000     movf    0, 0, 0          	MOVF	r0x00, W
001548   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00154a   ecfa     call    0xff4, 0         	CALL	_base64decode
00154c   f007
00154e   0e06     movlw   0x6              	MOVLW	0x06
001550   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	476; pillefyrsstyring.c	received_checksum = (decoded_command[7] << 8) + decoded_command[8];
001552   cf5f     movff   0xf5f, 0         	MOVFF	(_validate_command_decoded_command_1_153 + 7), r0x00
001554   f000
001556   6a01     clrf    0x1, 0           	CLRF	r0x01
001558   5000     movf    0, 0, 0          	MOVF	r0x00, W
00155a   6e06     movwf   0x6, 0           	MOVWF	r0x06
00155c   6a02     clrf    0x2, 0           	CLRF	r0x02
00155e   cf60     movff   0xf60, 0         	MOVFF	(_validate_command_decoded_command_1_153 + 8), r0x00
001560   f000
001562   6a01     clrf    0x1, 0           	CLRF	r0x01
001564   5000     movf    0, 0, 0          	MOVF	r0x00, W
001566   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
001568   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00156a   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
                                           ;	.line	477; pillefyrsstyring.c	checksum = crc16(decoded_command, 7, 0);
00156c   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_153)
00156e   6e01     movwf   0x1, 0           	MOVWF	r0x01
001570   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_153)
001572   6e00     movwf   0, 0             	MOVWF	r0x00
001574   0e80     movlw   0x80             	MOVLW	0x80
001576   6e07     movwf   0x7, 0           	MOVWF	r0x07
001578   0e00     movlw   0                	MOVLW	0x00
00157a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00157c   0e00     movlw   0                	MOVLW	0x00
00157e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001580   0e00     movlw   0                	MOVLW	0x00
001582   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001584   0e00     movlw   0                	MOVLW	0x00
001586   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001588   0e00     movlw   0                	MOVLW	0x00
00158a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00158c   0e07     movlw   0x7              	MOVLW	0x07
00158e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001590   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001592   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001594   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001596   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001598   5000     movf    0, 0, 0          	MOVF	r0x00, W
00159a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00159c   ecbc     call    0x1778, 0        	CALL	_crc16
00159e   f00b
0015a0   6e00     movwf   0, 0             	MOVWF	r0x00
0015a2   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0015a4   f001
0015a6   0e09     movlw   0x9              	MOVLW	0x09
0015a8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	479; pillefyrsstyring.c	if (received_checksum == checksum) {
0015aa   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0015ac   1800     xorwf   0, 0, 0          	XORWF	r0x00, W
0015ae   e103     bnz     0x15b6           	BNZ	_00372_DS_
0015b0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0015b2   1801     xorwf   0x1, 0, 0        	XORWF	r0x01, W
0015b4   e001     bz      0x15b8           	BZ	_00373_DS_
                                           _00372_DS_:
0015b6   d022     bra     0x15fc           	BRA	_00365_DS_
                                           _00373_DS_:
                                           ;	.line	480; pillefyrsstyring.c	memcpy(validated_command, decoded_command, 7);
0015b8   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0015ba   6e05     movwf   0x5, 0           	MOVWF	r0x05
0015bc   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0015be   6e04     movwf   0x4, 0           	MOVWF	r0x04
0015c0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0015c2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0015c4   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_153)
0015c6   6e01     movwf   0x1, 0           	MOVWF	r0x01
0015c8   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_153)
0015ca   6e00     movwf   0, 0             	MOVWF	r0x00
0015cc   0e80     movlw   0x80             	MOVLW	0x80
0015ce   6e02     movwf   0x2, 0           	MOVWF	r0x02
0015d0   0e00     movlw   0                	MOVLW	0x00
0015d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015d4   0e07     movlw   0x7              	MOVLW	0x07
0015d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015d8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0015da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015dc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0015e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0015ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ec   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0015ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f0   ec9d     call    0x1d3a, 0        	CALL	_memcpy
0015f2   f00e
0015f4   0e08     movlw   0x8              	MOVLW	0x08
0015f6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	481; pillefyrsstyring.c	return 1;
0015f8   0e01     movlw   0x1              	MOVLW	0x01
0015fa   d001     bra     0x15fe           	BRA	_00367_DS_
                                           _00365_DS_:
                                           ;	.line	484; pillefyrsstyring.c	return 0;
0015fc   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00367_DS_:
0015fe   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001600   f008
001602   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001604   f007
001606   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001608   f006
00160a   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00160c   f005
00160e   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001610   f004
001612   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001614   f003
001616   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001618   f002
00161a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00161c   f001
00161e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001620   f000
001622   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001624   ffd9
001626   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64encode	code
                                           _base64encode:
                                           ;	.line	461; pillefyrsstyring.c	void base64encode(unsigned char *s) {
002dcc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002dce   ffe5
002dd0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002dd2   ffd9
                                           ;	.line	469; pillefyrsstyring.c	}
002dd4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002dd6   ffd9
002dd8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64decode	code
                                           _base64decode:
                                           ;	.line	446; pillefyrsstyring.c	void base64decode(unsigned char *s, unsigned char *buffer) {
000ff4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000ff6   ffe5
000ff8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ffa   ffd9
000ffc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000ffe   ffe5
001000   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001002   ffe5
001004   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001006   ffe5
001008   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00100a   ffe5
00100c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00100e   ffe5
001010   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001012   ffe5
001014   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001016   ffe5
001018   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00101a   ffe5
00101c   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00101e   ffe5
001020   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001022   ffe5
001024   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
001026   ffe5
001028   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
00102a   ffe5
00102c   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00102e   ffe5
001030   0e02     movlw   0x2              	MOVLW	0x02
001032   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001034   f000
001036   0e03     movlw   0x3              	MOVLW	0x03
001038   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00103a   f001
00103c   0e04     movlw   0x4              	MOVLW	0x04
00103e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001040   f002
001042   0e05     movlw   0x5              	MOVLW	0x05
001044   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
001046   f003
001048   0e06     movlw   0x6              	MOVLW	0x06
00104a   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
00104c   f004
00104e   0e07     movlw   0x7              	MOVLW	0x07
001050   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
001052   f005
                                           ;	.line	451; pillefyrsstyring.c	char xlate[] = "0123456789abcdef";
001054   0e30     movlw   0x30             	MOVLW	0x30
001056   010f     movlb   0xf              	BANKSEL	_base64decode_xlate_1_148
001058   6f20     movwf   0x20, 0x1        	MOVWF	_base64decode_xlate_1_148, B
00105a   0e31     movlw   0x31             	MOVLW	0x31
00105c   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 1)
00105e   6f21     movwf   0x21, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 1), B
001060   0e32     movlw   0x32             	MOVLW	0x32
001062   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 2)
001064   6f22     movwf   0x22, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 2), B
001066   0e33     movlw   0x33             	MOVLW	0x33
001068   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 3)
00106a   6f23     movwf   0x23, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 3), B
00106c   0e34     movlw   0x34             	MOVLW	0x34
00106e   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 4)
001070   6f24     movwf   0x24, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 4), B
001072   0e35     movlw   0x35             	MOVLW	0x35
001074   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 5)
001076   6f25     movwf   0x25, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 5), B
001078   0e36     movlw   0x36             	MOVLW	0x36
00107a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 6)
00107c   6f26     movwf   0x26, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 6), B
00107e   0e37     movlw   0x37             	MOVLW	0x37
001080   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 7)
001082   6f27     movwf   0x27, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 7), B
001084   0e38     movlw   0x38             	MOVLW	0x38
001086   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 8)
001088   6f28     movwf   0x28, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 8), B
00108a   0e39     movlw   0x39             	MOVLW	0x39
00108c   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 9)
00108e   6f29     movwf   0x29, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 9), B
001090   0e61     movlw   0x61             	MOVLW	0x61
001092   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 10)
001094   6f2a     movwf   0x2a, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 10), B
001096   0e62     movlw   0x62             	MOVLW	0x62
001098   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 11)
00109a   6f2b     movwf   0x2b, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 11), B
00109c   0e63     movlw   0x63             	MOVLW	0x63
00109e   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 12)
0010a0   6f2c     movwf   0x2c, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 12), B
0010a2   0e64     movlw   0x64             	MOVLW	0x64
0010a4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 13)
0010a6   6f2d     movwf   0x2d, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 13), B
0010a8   0e65     movlw   0x65             	MOVLW	0x65
0010aa   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 14)
0010ac   6f2e     movwf   0x2e, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 14), B
0010ae   0e66     movlw   0x66             	MOVLW	0x66
0010b0   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 15)
0010b2   6f2f     movwf   0x2f, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 15), B
0010b4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 16)
0010b6   6b30     clrf    0x30, 0x1        	CLRF	(_base64decode_xlate_1_148 + 16), B
                                           _00342_DS_:
                                           ;	.line	453; pillefyrsstyring.c	while (*h) {
0010b8   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0010ba   ffe9
0010bc   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0010be   fff3
0010c0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0010c2   ec80     call    0x2d00, 0        	CALL	__gptrget1
0010c4   f016
0010c6   6e06     movwf   0x6, 0           	MOVWF	r0x06
0010c8   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0010ca   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0010cc   d060     bra     0x118e           	BRA	_00345_DS_
                                           ;	.line	454; pillefyrsstyring.c	*b = ((strchr(xlate, *h) - xlate) * 16) /* multiply leading digit by 16 */
0010ce   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
0010d0   6e08     movwf   0x8, 0           	MOVWF	r0x08
0010d2   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
0010d4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0010d6   0e80     movlw   0x80             	MOVLW	0x80
0010d8   6e09     movwf   0x9, 0           	MOVWF	r0x09
0010da   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0010dc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010de   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0010e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010e2   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0010e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010e6   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0010e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010ea   ec74     call    0x22e8, 0        	CALL	_strchr
0010ec   f011
0010ee   6e06     movwf   0x6, 0           	MOVWF	r0x06
0010f0   cff3     movff   0xff3, 0x7       	MOVFF	PRODL, r0x07
0010f2   f007
0010f4   cff4     movff   0xff4, 0x8       	MOVFF	PRODH, r0x08
0010f6   f008
0010f8   0e04     movlw   0x4              	MOVLW	0x04
0010fa   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0010fc   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
0010fe   5e06     subwf   0x6, 0x1, 0      	SUBWF	r0x06, F
001100   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
001102   5a07     subwfb  0x7, 0x1, 0      	SUBWFB	r0x07, F
                                           ; ;multiply lit val:0x10 by variable r0x06 and store in r0x06
001104   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001106   0d10     mullw   0x10             	MULLW	0x10
001108   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
00110a   f006
                                           ;	.line	455; pillefyrsstyring.c	+ ((strchr(xlate, *(h+1)) - xlate));
00110c   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
00110e   6e08     movwf   0x8, 0           	MOVWF	r0x08
001110   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
001112   6e07     movwf   0x7, 0           	MOVWF	r0x07
001114   0e80     movlw   0x80             	MOVLW	0x80
001116   6e09     movwf   0x9, 0           	MOVWF	r0x09
001118   5000     movf    0, 0, 0          	MOVF	r0x00, W
00111a   0f01     addlw   0x1              	ADDLW	0x01
00111c   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
00111e   0e00     movlw   0                	MOVLW	0x00
001120   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
001122   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
001124   0e00     movlw   0                	MOVLW	0x00
001126   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
001128   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
00112a   c00a     movff   0xa, 0xfe9       	MOVFF	r0x0a, FSR0L
00112c   ffe9
00112e   c00b     movff   0xb, 0xff3       	MOVFF	r0x0b, PRODL
001130   fff3
001132   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
001134   ec80     call    0x2d00, 0        	CALL	__gptrget1
001136   f016
001138   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
00113a   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
00113c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00113e   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001140   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001142   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001144   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001146   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001148   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00114a   ec74     call    0x22e8, 0        	CALL	_strchr
00114c   f011
00114e   6e07     movwf   0x7, 0           	MOVWF	r0x07
001150   cff3     movff   0xff3, 0x8       	MOVFF	PRODL, r0x08
001152   f008
001154   cff4     movff   0xff4, 0x9       	MOVFF	PRODH, r0x09
001156   f009
001158   0e04     movlw   0x4              	MOVLW	0x04
00115a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00115c   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
00115e   5e07     subwf   0x7, 0x1, 0      	SUBWF	r0x07, F
001160   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
001162   5a08     subwfb  0x8, 0x1, 0      	SUBWFB	r0x08, F
001164   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001166   2606     addwf   0x6, 0x1, 0      	ADDWF	r0x06, F
001168   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00116a   ffe5
00116c   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00116e   ffe9
001170   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
001172   fff3
001174   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001176   ecae     call    0x2d5c, 0        	CALL	__gptrput1
001178   f016
                                           ;	.line	456; pillefyrsstyring.c	h += 2;
00117a   0e02     movlw   0x2              	MOVLW	0x02
00117c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00117e   0e00     movlw   0                	MOVLW	0x00
001180   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001182   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
                                           ;	.line	457; pillefyrsstyring.c	b++;
001184   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
001186   e398     bnc     0x10b8           	BNC	_00342_DS_
001188   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
00118a   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
                                           _00354_DS_:
00118c   d795     bra     0x10b8           	BRA	_00342_DS_
                                           _00345_DS_:
00118e   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
001190   f00c
001192   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001194   f00b
001196   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001198   f00a
00119a   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00119c   f009
00119e   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0011a0   f008
0011a2   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0011a4   f007
0011a6   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0011a8   f006
0011aa   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0011ac   f005
0011ae   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0011b0   f004
0011b2   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0011b4   f003
0011b6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0011b8   f002
0011ba   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0011bc   f001
0011be   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0011c0   f000
0011c2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0011c4   ffd9
0011c6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_get	code
                                           _fifo_get:
                                           ;	.line	436; pillefyrsstyring.c	unsigned char fifo_get(unsigned char *c) {
001fbe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001fc0   ffe5
001fc2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001fc4   ffd9
001fc6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001fc8   ffe5
001fca   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001fcc   ffe5
001fce   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001fd0   ffe5
001fd2   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001fd4   ffe5
001fd6   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001fd8   ffe5
001fda   0e02     movlw   0x2              	MOVLW	0x02
001fdc   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001fde   f000
001fe0   0e03     movlw   0x3              	MOVLW	0x03
001fe2   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001fe4   f001
001fe6   0e04     movlw   0x4              	MOVLW	0x04
001fe8   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001fea   f002
                                           ;	.line	437; pillefyrsstyring.c	if (fifo_in_use() != 0) {
001fec   ec87     call    0x2b0e, 0        	CALL	_fifo_in_use
001fee   f015
001ff0   6e03     movwf   0x3, 0           	MOVWF	r0x03
001ff2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001ff4   e02d     bz      0x2050           	BZ	_00335_DS_
                                           ;	.line	438; pillefyrsstyring.c	*c = fifo_buffer[fifo_tail++ % QUEUE_SIZE];
001ff6   c805     movff   0x805, 0x3       	MOVFF	_fifo_tail, r0x03
001ff8   f003
001ffa   c806     movff   0x806, 0x4       	MOVFF	(_fifo_tail + 1), r0x04
001ffc   f004
001ffe   0108     movlb   0x8              	BANKSEL	_fifo_tail
002000   3f05     incfsz  0x5, 0x1, 0x1    	INCFSZ	_fifo_tail, F, B
002002   d002     bra     0x2008           	BRA	_10383_DS_
002004   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
002006   2b06     incf    0x6, 0x1, 0x1    	INCF	(_fifo_tail + 1), F, B
                                           _10383_DS_:
002008   0e00     movlw   0                	MOVLW	0x00
00200a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00200c   0e64     movlw   0x64             	MOVLW	0x64
00200e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002010   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
002012   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002014   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
002016   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002018   ec82     call    0x1f04, 0        	CALL	__moduint
00201a   f00f
00201c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00201e   cff3     movff   0xff3, 0x4       	MOVFF	PRODL, r0x04
002020   f004
002022   0e04     movlw   0x4              	MOVLW	0x04
002024   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002026   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
002028   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
00202a   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
00202c   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00202e   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
002030   ffe9
002032   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
002034   ffea
002036   cfef     movff   0xfef, 0x3       	MOVFF	INDF0, r0x03
002038   f003
00203a   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00203c   ffe5
00203e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
002040   ffe9
002042   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
002044   fff3
002046   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002048   ecae     call    0x2d5c, 0        	CALL	__gptrput1
00204a   f016
                                           ;	.line	439; pillefyrsstyring.c	return 1;
00204c   0e01     movlw   0x1              	MOVLW	0x01
00204e   d001     bra     0x2052           	BRA	_00337_DS_
                                           _00335_DS_:
                                           ;	.line	442; pillefyrsstyring.c	return 0;
002050   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00337_DS_:
002052   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
002054   f004
002056   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
002058   f003
00205a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00205c   f002
00205e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002060   f001
002062   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002064   f000
002066   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002068   ffd9
00206a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_put	code
                                           _fifo_put:
                                           ;	.line	426; pillefyrsstyring.c	unsigned char fifo_put(unsigned char c) {
00237e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002380   ffe5
002382   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002384   ffd9
002386   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002388   ffe5
00238a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00238c   ffe5
00238e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002390   ffe5
002392   0e02     movlw   0x2              	MOVLW	0x02
002394   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002396   f000
                                           ;	.line	427; pillefyrsstyring.c	if (fifo_in_use() != QUEUE_SIZE) {
002398   ec87     call    0x2b0e, 0        	CALL	_fifo_in_use
00239a   f015
00239c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00239e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0023a0   0a64     xorlw   0x64             	XORLW	0x64
0023a2   e024     bz      0x23ec           	BZ	_00321_DS_
                                           ;	.line	428; pillefyrsstyring.c	fifo_buffer[fifo_head++ % QUEUE_SIZE] = c;
0023a4   c803     movff   0x803, 0x1       	MOVFF	_fifo_head, r0x01
0023a6   f001
0023a8   c804     movff   0x804, 0x2       	MOVFF	(_fifo_head + 1), r0x02
0023aa   f002
0023ac   0108     movlb   0x8              	BANKSEL	_fifo_head
0023ae   3f03     incfsz  0x3, 0x1, 0x1    	INCFSZ	_fifo_head, F, B
0023b0   d002     bra     0x23b6           	BRA	_20384_DS_
0023b2   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
0023b4   2b04     incf    0x4, 0x1, 0x1    	INCF	(_fifo_head + 1), F, B
                                           _20384_DS_:
0023b6   0e00     movlw   0                	MOVLW	0x00
0023b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0023ba   0e64     movlw   0x64             	MOVLW	0x64
0023bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0023be   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0023c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0023c2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0023c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0023c6   ec82     call    0x1f04, 0        	CALL	__moduint
0023c8   f00f
0023ca   6e01     movwf   0x1, 0           	MOVWF	r0x01
0023cc   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
0023ce   f002
0023d0   0e04     movlw   0x4              	MOVLW	0x04
0023d2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0023d4   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
0023d6   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
0023d8   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
0023da   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0023dc   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0023de   ffe9
0023e0   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0023e2   ffea
0023e4   c000     movff   0, 0xfef         	MOVFF	r0x00, INDF0
0023e6   ffef
                                           ;	.line	429; pillefyrsstyring.c	return 1;
0023e8   0e01     movlw   0x1              	MOVLW	0x01
0023ea   d001     bra     0x23ee           	BRA	_00323_DS_
                                           _00321_DS_:
                                           ;	.line	432; pillefyrsstyring.c	return 0;
0023ec   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00323_DS_:
0023ee   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0023f0   f002
0023f2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0023f4   f001
0023f6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0023f8   f000
0023fa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0023fc   ffd9
0023fe   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_in_use	code
                                           _fifo_in_use:
                                           ;	.line	422; pillefyrsstyring.c	unsigned char fifo_in_use() {
002b0e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b10   ffe5
002b12   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b14   ffd9
002b16   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b18   ffe5
002b1a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b1c   ffe5
002b1e   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	423; pillefyrsstyring.c	return fifo_head - fifo_tail;
002b20   5103     movf    0x3, 0, 0x1      	MOVF	_fifo_head, W, B
002b22   6e00     movwf   0, 0             	MOVWF	r0x00
002b24   0108     movlb   0x8              	BANKSEL	_fifo_tail
002b26   5105     movf    0x5, 0, 0x1      	MOVF	_fifo_tail, W, B
002b28   6e01     movwf   0x1, 0           	MOVWF	r0x01
002b2a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002b2c   5e00     subwf   0, 0x1, 0        	SUBWF	r0x00, F
002b2e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b30   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002b32   f001
002b34   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b36   f000
002b38   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b3a   ffd9
002b3c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	392; pillefyrsstyring.c	void my_usart_open() {
002bc8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002bca   ffe5
002bcc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002bce   ffd9
                                           ;	.line	393; pillefyrsstyring.c	SPBRG = 103;					// 8MHz => 19230 baud
002bd0   0e67     movlw   0x67             	MOVLW	0x67
002bd2   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	394; pillefyrsstyring.c	TXSTAbits.BRGH = 1;	// (1 = high speed)
002bd4   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	395; pillefyrsstyring.c	TXSTAbits.SYNC = 0;	// (0 = asynchronous)
002bd6   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	396; pillefyrsstyring.c	BAUDCONbits.BRG16 = 1;
002bd8   86b8     bsf     0xb8, 0x3, 0     	BSF	_BAUDCONbits, 3
                                           ;	.line	399; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
002bda   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	402; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
002bdc   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	403; pillefyrsstyring.c	IPR1bits.TXIP = 0; // USART Tx on low priority interrupt
002bde   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	406; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
002be0   8a9d     bsf     0x9d, 0x5, 0     	BSF	_PIE1bits, 5
                                           ;	.line	407; pillefyrsstyring.c	IPR1bits.RCIP = 0; // USART Rx on low priority interrupt
002be2   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	410; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
002be4   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	413; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
002be6   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	416; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
002be8   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           ;	.line	419; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
002bea   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
002bec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bee   ffd9
002bf0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	380; pillefyrsstyring.c	unsigned char get_inputs() {
002cb8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cba   ffe5
002cbc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cbe   ffd9
002cc0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002cc2   ffe5
                                           ;	.line	384; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
002cc4   0eff     movlw   0xff             	MOVLW	0xff
002cc6   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	385; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
002cc8   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	386; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
002cca   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
002ccc   f000
                                           ;	.line	387; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
002cce   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	389; pillefyrsstyring.c	return data;
002cd0   5000     movf    0, 0, 0          	MOVF	r0x00, W
002cd2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002cd4   f000
002cd6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cd8   ffd9
002cda   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	362; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
00254e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002550   ffe5
002552   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002554   ffd9
002556   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002558   ffe5
00255a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00255c   ffe5
00255e   0e02     movlw   0x2              	MOVLW	0x02
002560   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002562   f000
002564   0e03     movlw   0x3              	MOVLW	0x03
002566   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
002568   f001
                                           ;	.line	363; pillefyrsstyring.c	header_mask &= (/*EXT_FEEDER_L1 |*/ FAN_L2 | INT_FEEDER_L3 /*| HEATER_L4 | L5 | L6*/);	// BUG HERE! turning on L1 or L6 restarts
00256a   0e06     movlw   0x6              	MOVLW	0x06
00256c   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	365; pillefyrsstyring.c	value &= header_mask;
00256e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002570   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	366; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002572   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	367; pillefyrsstyring.c	if (value) {	// set it
002574   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002576   e006     bz      0x2584           	BZ	_00298_DS_
                                           ;	.line	368; pillefyrsstyring.c	_latch_2_data |= header_mask;
002578   5000     movf    0, 0, 0          	MOVF	r0x00, W
00257a   0108     movlb   0x8              	BANKSEL	__latch_2_data
00257c   1314     iorwf   0x14, 0x1, 0x1   	IORWF	__latch_2_data, F, B
                                           ;	.line	369; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
00257e   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
002580   ff8c
002582   d006     bra     0x2590           	BRA	_00299_DS_
                                           _00298_DS_:
                                           ;	.line	372; pillefyrsstyring.c	_latch_2_data &= ~header_mask;
002584   1e00     comf    0, 0x1, 0        	COMF	r0x00, F
002586   5000     movf    0, 0, 0          	MOVF	r0x00, W
002588   0108     movlb   0x8              	BANKSEL	__latch_2_data
00258a   1714     andwf   0x14, 0x1, 0x1   	ANDWF	__latch_2_data, F, B
                                           ;	.line	373; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
00258c   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
00258e   ff8c
                                           _00299_DS_:
                                           ;	.line	375; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
002590   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	376; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002592   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	377; pillefyrsstyring.c	LATCH_DATA = 0x00;
002594   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002596   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002598   f001
00259a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00259c   f000
00259e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025a0   ffd9
0025a2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	342; pillefyrsstyring.c	void init_latches() {
002bf2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002bf4   ffe5
002bf6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002bf8   ffd9
                                           ;	.line	343; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002bfa   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	344; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
002bfc   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	345; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
002bfe   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	347; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
002c00   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	348; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002c02   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
002c04   0108     movlb   0x8              	BANKSEL	__latch_2_data
                                           ;	.line	349; pillefyrsstyring.c	_latch_2_data = 0x00;
002c06   6b14     clrf    0x14, 0x1        	CLRF	__latch_2_data, B
                                           ;	.line	351; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
002c08   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	352; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
002c0a   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	354; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
002c0c   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	355; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
002c0e   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	357; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
002c10   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	358; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
002c12   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
002c14   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c16   ffd9
002c18   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	288; pillefyrsstyring.c	void init_timers() {
002a36   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a38   ffe5
002a3a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a3c   ffd9
                                           ;	.line	290; pillefyrsstyring.c	T0CONbits.TMR0ON = 1;
002a3e   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	291; pillefyrsstyring.c	T0CONbits.T0PS0 = 0;
002a40   90d5     bcf     0xd5, 0, 0       	BCF	_T0CONbits, 0
                                           ;	.line	292; pillefyrsstyring.c	T0CONbits.T0PS1 = 0;
002a42   92d5     bcf     0xd5, 0x1, 0     	BCF	_T0CONbits, 1
                                           ;	.line	293; pillefyrsstyring.c	T0CONbits.T0PS2 = 0;	// prescaler 1:2
002a44   94d5     bcf     0xd5, 0x2, 0     	BCF	_T0CONbits, 2
                                           ;	.line	294; pillefyrsstyring.c	T0CONbits.T08BIT = 0;   // use timer0 16-bit counter
002a46   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	295; pillefyrsstyring.c	T0CONbits.T0CS = 0;             // internal clock source
002a48   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	296; pillefyrsstyring.c	T0CONbits.PSA = 0;              // enable timer0 prescaler
002a4a   96d5     bcf     0xd5, 0x3, 0     	BCF	_T0CONbits, 3
                                           ;	.line	297; pillefyrsstyring.c	INTCON2bits.TMR0IP = 1; // high priority
002a4c   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	298; pillefyrsstyring.c	INTCONbits.T0IE = 1;    // Ensure that TMR0 Interrupt is enabled
002a4e   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	299; pillefyrsstyring.c	INTCONbits.TMR0IF = 1;  // Force Instant entry to Timer 0 Interrupt
002a50   84f2     bsf     0xf2, 0x2, 0     	BSF	_INTCONbits, 2
                                           ;	.line	302; pillefyrsstyring.c	T1CONbits.TMR1ON = 1;
002a52   80cd     bsf     0xcd, 0, 0       	BSF	_T1CONbits, 0
                                           ;	.line	303; pillefyrsstyring.c	T1CONbits.RD16 = 1;
002a54   8ecd     bsf     0xcd, 0x7, 0     	BSF	_T1CONbits, 7
                                           ;	.line	304; pillefyrsstyring.c	T1CONbits.TMR1CS = 0;   // internal clock source
002a56   92cd     bcf     0xcd, 0x1, 0     	BCF	_T1CONbits, 1
                                           ;	.line	305; pillefyrsstyring.c	T1CONbits.T1OSCEN = 0;  // dont put t1 on pin
002a58   96cd     bcf     0xcd, 0x3, 0     	BCF	_T1CONbits, 3
                                           ;	.line	306; pillefyrsstyring.c	T1CONbits.T1CKPS0 = 1;
002a5a   88cd     bsf     0xcd, 0x4, 0     	BSF	_T1CONbits, 4
                                           ;	.line	307; pillefyrsstyring.c	T1CONbits.T1CKPS1 = 1;
002a5c   8acd     bsf     0xcd, 0x5, 0     	BSF	_T1CONbits, 5
                                           ;	.line	308; pillefyrsstyring.c	IPR1bits.TMR1IP = 0;	// low priority
002a5e   909f     bcf     0x9f, 0, 0       	BCF	_IPR1bits, 0
                                           ;	.line	309; pillefyrsstyring.c	PIE1bits.TMR1IE = 1;	// Ensure that TMR1 Interrupt is enabled
002a60   809d     bsf     0x9d, 0, 0       	BSF	_PIE1bits, 0
                                           ;	.line	310; pillefyrsstyring.c	PIR1bits.TMR1IF = 1;	// Force Instant entry to Timer 1 Interrupt
002a62   809e     bsf     0x9e, 0, 0       	BSF	_PIR1bits, 0
                                           ;	.line	338; pillefyrsstyring.c	INTCONbits.PEIE = 1;
002a64   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	339; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
002a66   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
002a68   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a6a   ffd9
002a6c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	278; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
001628   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00162a   ffe5
00162c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00162e   ffd9
001630   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001632   ffe5
001634   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001636   ffe5
001638   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00163a   ffe5
00163c   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00163e   ffe5
001640   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001642   ffe5
001644   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001646   ffe5
001648   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00164a   ffe5
00164c   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00164e   ffe5
001650   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001652   ffe5
001654   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001656   ffe5
001658   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
00165a   ffe5
00165c   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
00165e   ffe5
001660   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
001662   ffe5
001664   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
001666   ffe5
001668   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
00166a   ffe5
00166c   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
00166e   ffe5
001670   0e02     movlw   0x2              	MOVLW	0x02
001672   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001674   f000
001676   0e03     movlw   0x3              	MOVLW	0x03
001678   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00167a   f001
00167c   0e04     movlw   0x4              	MOVLW	0x04
00167e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001680   f002
001682   0e05     movlw   0x5              	MOVLW	0x05
001684   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
001686   f003
                                           ;	.line	280; pillefyrsstyring.c	start_timer_1_ms = timer_1_ms;	
001688   cf67     movff   0xf67, 0x4       	MOVFF	_timer_1_ms, r0x04
00168a   f004
00168c   cf68     movff   0xf68, 0x5       	MOVFF	(_timer_1_ms + 1), r0x05
00168e   f005
001690   cf69     movff   0xf69, 0x6       	MOVFF	(_timer_1_ms + 2), r0x06
001692   f006
001694   cf6a     movff   0xf6a, 0x7       	MOVFF	(_timer_1_ms + 3), r0x07
001696   f007
                                           _00269_DS_:
                                           ;	.line	283; pillefyrsstyring.c	while ( (((signed long)(timer_1_ms - start_timer_1_ms) < 0) ? (-1 * (timer_1_ms - start_timer_1_ms)) : (timer_1_ms - start_timer_1_ms)) < ms) {
001698   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00169a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
00169c   5d67     subwf   0x67, 0, 0x1     	SUBWF	_timer_1_ms, W, B
00169e   6e08     movwf   0x8, 0           	MOVWF	r0x08
0016a0   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0016a2   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
0016a4   5968     subwfb  0x68, 0, 0x1     	SUBWFB	(_timer_1_ms + 1), W, B
0016a6   6e09     movwf   0x9, 0           	MOVWF	r0x09
0016a8   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0016aa   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
0016ac   5969     subwfb  0x69, 0, 0x1     	SUBWFB	(_timer_1_ms + 2), W, B
0016ae   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0016b0   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0016b2   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
0016b4   596a     subwfb  0x6a, 0, 0x1     	SUBWFB	(_timer_1_ms + 3), W, B
0016b6   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
0016b8   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0016ba   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0016bc   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0016be   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
0016c0   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0016c2   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
0016c4   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0016c6   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
0016c8   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
0016ca   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
0016cc   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
0016ce   e31c     bnc     0x1708           	BNC	_00274_DS_
0016d0   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0016d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016d4   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0016d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016d8   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0016da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016dc   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0016de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016e0   0eff     movlw   0xff             	MOVLW	0xff
0016e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016e4   0eff     movlw   0xff             	MOVLW	0xff
0016e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016e8   0eff     movlw   0xff             	MOVLW	0xff
0016ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016ec   0eff     movlw   0xff             	MOVLW	0xff
0016ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016f0   ecf0     call    0xbe0, 0         	CALL	__mullong
0016f2   f005
0016f4   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0016f6   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
0016f8   f00d
0016fa   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
0016fc   f00e
0016fe   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
001700   f00f
001702   0e08     movlw   0x8              	MOVLW	0x08
001704   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001706   d008     bra     0x1718           	BRA	_00275_DS_
                                           _00274_DS_:
001708   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
00170a   f00c
00170c   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
00170e   f00d
001710   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
001712   f00e
001714   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
001716   f00f
                                           _00275_DS_:
001718   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00171a   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
00171c   e108     bnz     0x172e           	BNZ	_00282_DS_
00171e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001720   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
001722   e105     bnz     0x172e           	BNZ	_00282_DS_
001724   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001726   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
001728   e102     bnz     0x172e           	BNZ	_00282_DS_
00172a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00172c   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00282_DS_:
00172e   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001730   d7b3     bra     0x1698           	BRA	_00269_DS_
001732   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
001734   f00f
001736   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
001738   f00e
00173a   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
00173c   f00d
00173e   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
001740   f00c
001742   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001744   f00b
001746   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001748   f00a
00174a   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00174c   f009
00174e   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001750   f008
001752   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001754   f007
001756   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001758   f006
00175a   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00175c   f005
00175e   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001760   f004
001762   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001764   f003
001766   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001768   f002
00176a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00176c   f001
00176e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001770   f000
001772   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001774   ffd9
001776   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_low_prio	code
                                           _isr_low_prio:
                                           ;	.line	252; pillefyrsstyring.c	static void isr_low_prio(void) __interrupt 2 {
0021b0   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0021b2   ffe5
0021b4   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0021b6   ffe5
0021b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021ba   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0021bc   ffe5
0021be   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0021c0   ffe5
0021c2   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0021c4   ffe5
0021c6   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0021c8   ffe5
0021ca   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0021cc   ffe5
0021ce   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0021d0   ffe5
0021d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021d4   ffe5
0021d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021d8   ffd9
0021da   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0021dc   ffe5
                                           ;	.line	254; pillefyrsstyring.c	if (PIR1bits.TMR1IF) {
0021de   a09e     btfss   0x9e, 0, 0       	BTFSS	_PIR1bits, 0
0021e0   d010     bra     0x2202           	BRA	_00253_DS_
                                           ;	.line	255; pillefyrsstyring.c	TMR1H = (unsigned char)(TIMER1_RELOAD >> 8);    // 1 ms delay at 8 MHz
0021e2   0efe     movlw   0xfe             	MOVLW	0xfe
0021e4   6ecf     movwf   0xcf, 0          	MOVWF	_TMR1H
                                           ;	.line	256; pillefyrsstyring.c	TMR1L = (unsigned char)TIMER1_RELOAD;
0021e6   0ec8     movlw   0xc8             	MOVLW	0xc8
0021e8   6ece     movwf   0xce, 0          	MOVWF	_TMR1L
                                           ;	.line	257; pillefyrsstyring.c	PIR1bits.TMR1IF = 0;    /* Clear the Timer Flag  */
0021ea   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
0021ec   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	258; pillefyrsstyring.c	timer_1_ms++;
0021ee   2b67     incf    0x67, 0x1, 0x1   	INCF	_timer_1_ms, F, B
0021f0   e308     bnc     0x2202           	BNC	_00253_DS_
0021f2   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
0021f4   2b68     incf    0x68, 0x1, 0x1   	INCF	(_timer_1_ms + 1), F, B
0021f6   e305     bnc     0x2202           	BNC	_00253_DS_
0021f8   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
0021fa   3f69     incfsz  0x69, 0x1, 0x1   	INCFSZ	(_timer_1_ms + 2), F, B
0021fc   d002     bra     0x2202           	BRA	_30385_DS_
0021fe   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
002200   2b6a     incf    0x6a, 0x1, 0x1   	INCF	(_timer_1_ms + 3), F, B
                                           _30385_DS_:
                                           _00264_DS_:
                                           _00253_DS_:
                                           ;	.line	262; pillefyrsstyring.c	if (usart_drdy()) {
002202   ecf5     call    0x2dea, 0        	CALL	_usart_drdy
002204   f016
002206   6e00     movwf   0, 0             	MOVWF	r0x00
002208   5000     movf    0, 0, 0          	MOVF	r0x00, W
00220a   e00b     bz      0x2222           	BZ	_00256_DS_
                                           ;	.line	264; pillefyrsstyring.c	c = usart_getc();
00220c   ec35     call    0x2c6a, 0        	CALL	_usart_getc
00220e   f016
002210   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	265; pillefyrsstyring.c	fifo_put(c);
002212   5000     movf    0, 0, 0          	MOVF	r0x00, W
002214   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002216   ecbf     call    0x237e, 0        	CALL	_fifo_put
002218   f011
00221a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	266; pillefyrsstyring.c	usart_putc(c);
00221c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00221e   ecde     call    0x2dbc, 0        	CALL	_usart_putc
002220   f016
                                           _00256_DS_:
002222   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002224   f000
002226   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002228   ffd9
00222a   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00222c   fffb
00222e   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
002230   fffa
002232   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
002234   ffea
002236   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
002238   ffe9
00223a   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
00223c   fff4
00223e   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
002240   fff3
002242   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
002244   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
002246   ffe0
002248   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
00224a   ffd8
00224c   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_high_prio	code
                                           _isr_high_prio:
                                           ;	.line	218; pillefyrsstyring.c	static void isr_high_prio(void) __interrupt 1 {
001380   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
001382   ffe5
001384   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
001386   ffe5
001388   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00138a   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00138c   ffe5
00138e   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
001390   ffe5
001392   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
001394   ffe5
001396   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
001398   ffe5
00139a   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00139c   ffe5
00139e   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0013a0   ffe5
0013a2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013a4   ffe5
0013a6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013a8   ffd9
0013aa   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0013ac   ffe5
0013ae   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0013b0   ffe5
                                           ;	.line	219; pillefyrsstyring.c	if (INTCONbits.TMR0IF) {
0013b2   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
0013b4   d057     bra     0x1464           	BRA	_00228_DS_
                                           ;	.line	220; pillefyrsstyring.c	TMR0H = (unsigned char)(TIMER0_RELOAD >> 8);
0013b6   0efd     movlw   0xfd             	MOVLW	0xfd
0013b8   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	221; pillefyrsstyring.c	TMR0L = (unsigned char)TIMER0_RELOAD;   /* Reload the Timer ASAP */
0013ba   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
                                           ;	.line	222; pillefyrsstyring.c	INTCONbits.TMR0IF = 0;  /* Clear the Timer Flag  */
0013bc   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	225; pillefyrsstyring.c	sensor_inputs = get_inputs();
0013be   ec5c     call    0x2cb8, 0        	CALL	_get_inputs
0013c0   f016
0013c2   0108     movlb   0x8              	BANKSEL	_sensor_inputs
0013c4   6f12     movwf   0x12, 0x1        	MOVWF	_sensor_inputs, B
0013c6   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	228; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
0013c8   6b07     clrf    0x7, 0x1         	CLRF	_i, B
0013ca   0108     movlb   0x8              	BANKSEL	(_i + 1)
0013cc   6b08     clrf    0x8, 0x1         	CLRF	(_i + 1), B
                                           _00226_DS_:
                                           ;	.line	229; pillefyrsstyring.c	if (ac_power_pwm_counter < output_ac_power_pwm[i]) {
0013ce   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
0013d0   0108     movlb   0x8              	BANKSEL	_i
0013d2   2507     addwf   0x7, 0, 0x1      	ADDWF	_i, W, B
0013d4   6e00     movwf   0, 0             	MOVWF	r0x00
0013d6   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
0013d8   0108     movlb   0x8              	BANKSEL	(_i + 1)
0013da   2108     addwfc  0x8, 0, 0x1      	ADDWFC	(_i + 1), W, B
0013dc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0013de   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0013e0   ffe9
0013e2   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
0013e4   ffea
0013e6   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
0013e8   f000
0013ea   5000     movf    0, 0, 0          	MOVF	r0x00, W
0013ec   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
0013ee   5d13     subwf   0x13, 0, 0x1     	SUBWF	_ac_power_pwm_counter, W, B
0013f0   e215     bc      0x141c           	BC	_00221_DS_
                                           ;	.line	231; pillefyrsstyring.c	set_ac_power(1 << i, 0xff);
0013f2   0e01     movlw   0x1              	MOVLW	0x01
0013f4   6e00     movwf   0, 0             	MOVWF	r0x00
0013f6   6a01     clrf    0x1, 0           	CLRF	r0x01
0013f8   0108     movlb   0x8              	BANKSEL	_i
0013fa   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
0013fc   e006     bz      0x140a           	BZ	_00243_DS_
0013fe   6ce8     negf    0xe8, 0          	NEGF	WREG
001400   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00244_DS_:
001402   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
001404   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001406   0f01     addlw   0x1              	ADDLW	0x01
001408   e3fc     bnc     0x1402           	BNC	_00244_DS_
                                           _00243_DS_:
00140a   0eff     movlw   0xff             	MOVLW	0xff
00140c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00140e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001410   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001412   eca7     call    0x254e, 0        	CALL	_set_ac_power
001414   f012
001416   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001418   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00141a   d014     bra     0x1444           	BRA	_00227_DS_
                                           _00221_DS_:
                                           ;	.line	240; pillefyrsstyring.c	set_ac_power(1 << i, 0x00);
00141c   0e01     movlw   0x1              	MOVLW	0x01
00141e   6e00     movwf   0, 0             	MOVWF	r0x00
001420   6a01     clrf    0x1, 0           	CLRF	r0x01
001422   0108     movlb   0x8              	BANKSEL	_i
001424   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
001426   e006     bz      0x1434           	BZ	_00245_DS_
001428   6ce8     negf    0xe8, 0          	NEGF	WREG
00142a   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00246_DS_:
00142c   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
00142e   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001430   0f01     addlw   0x1              	ADDLW	0x01
001432   e3fc     bnc     0x142c           	BNC	_00246_DS_
                                           _00245_DS_:
001434   0e00     movlw   0                	MOVLW	0x00
001436   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001438   5000     movf    0, 0, 0          	MOVF	r0x00, W
00143a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00143c   eca7     call    0x254e, 0        	CALL	_set_ac_power
00143e   f012
001440   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001442   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00227_DS_:
001444   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	228; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
001446   3f07     incfsz  0x7, 0x1, 0x1    	INCFSZ	_i, F, B
001448   d002     bra     0x144e           	BRA	_40386_DS_
00144a   0108     movlb   0x8              	BANKSEL	(_i + 1)
00144c   2b08     incf    0x8, 0x1, 0x1    	INCF	(_i + 1), F, B
                                           _40386_DS_:
00144e   0e00     movlw   0                	MOVLW	0x00
001450   0108     movlb   0x8              	BANKSEL	(_i + 1)
001452   5d08     subwf   0x8, 0, 0x1      	SUBWF	(_i + 1), W, B
001454   e103     bnz     0x145c           	BNZ	_00247_DS_
001456   0e06     movlw   0x6              	MOVLW	0x06
001458   0108     movlb   0x8              	BANKSEL	_i
00145a   5d07     subwf   0x7, 0, 0x1      	SUBWF	_i, W, B
                                           _00247_DS_:
00145c   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00145e   d7b7     bra     0x13ce           	BRA	_00226_DS_
001460   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	248; pillefyrsstyring.c	ac_power_pwm_counter++;
001462   2b13     incf    0x13, 0x1, 0x1   	INCF	_ac_power_pwm_counter, F, B
                                           _00228_DS_:
001464   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001466   f001
001468   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00146a   f000
00146c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00146e   ffd9
001470   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
001472   fffb
001474   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
001476   fffa
001478   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00147a   ffea
00147c   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
00147e   ffe9
001480   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
001482   fff4
001484   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
001486   fff3
001488   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
00148a   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
00148c   ffe0
00148e   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
001490   ffd8
001492   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001494   704f     btg     0x4f, 0, 0       	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
001496   6e65     movwf   0x65, 0          
001498   7453     btg     0x53, 0x2, 0     
00149a   6b6f     clrf    0x6f, 0x1        
00149c   7265     btg     0x65, 0x1, 0     
00149e   7320     btg     0x20, 0x1, 0x1   
0014a0   6174     cpfslt  0x74, 0x1        	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x20, 0x73
0014a2   7472     btg     0x72, 0x2, 0     
0014a4   6e69     movwf   0x69, 0          
0014a6   2e67     decfsz  0x67, 0x1, 0     
0014a8   2e2e     decfsz  0x2e, 0x1, 0     
0014aa   7320     btg     0x20, 0x1, 0x1   
0014ac   7265     btg     0x65, 0x1, 0     	DB	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e
0014ae   6169     cpfslt  0x69, 0x1        
0014b0   206c     addwfc  0x6c, 0, 0       
0014b2   6f77     movwf   0x77, 0x1        
0014b4   6b72     clrf    0x72, 0x1        
0014b6   6e69     movwf   0x69, 0          
0014b8   0a67     xorlw   0x67             	DB	0x67, 0x0a, 0x0d, 0x00
0014ba   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_1:
0014bc   0d0a     mullw   0xa              	DB	0x0a, 0x0d, 0x00
0014be   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
0014c0   2567     addwf   0x67, 0, 0x1     	DB	0x67, 0x25, 0x30, 0x32, 0x78, 0x0a, 0x0d, 0x00
0014c2   3230     rrcf    0x30, 0x1, 0     
0014c4   0a78     xorlw   0x78             
0014c6   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_3:
0014c8   6461     cpfsgt  0x61, 0          	DB	0x61, 0x64, 0x25, 0x64, 0x3a, 0x20, 0x25, 0x30, 0x34, 0x78, 0x0a, 0x0d
0014ca   6425     cpfsgt  0x25, 0          
0014cc   203a     addwfc  0x3a, 0, 0       
0014ce   3025     rrcf    0x25, 0, 0       
0014d0   7834     btg     0x34, 0x4, 0     
0014d2   0d0a     mullw   0xa              
0014d4   0000     nop                      	DB	0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3272 (0x0cc8) bytes ( 2.50%)
                                           ;           	 1636 (0x0664) words
                                           ; udata size:	  202 (0x00ca) bytes ( 5.26%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Wed Dec 18 01:04:01 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	367; glcd.c	void latched_lcd_data(unsigned char value) {
002c1a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c1c   ffe5
002c1e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c20   ffd9
002c22   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c24   ffe5
002c26   0e02     movlw   0x2              	MOVLW	0x02
002c28   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002c2a   f000
                                           ;	.line	368; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c2c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; glcd.c	LATCH_DATA = value;
002c2e   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
002c30   ff8c
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_ENABLED;
002c32   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_4 = LATCH_4_DISABLED;
002c34   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	372; glcd.c	LATCH_DATA = 0x00;
002c36   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002c38   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002c3a   f000
002c3c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c3e   ffd9
002c40   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	352; glcd.c	void latched_lcd_cs1(unsigned char value) {
00282c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00282e   ffe5
002830   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002832   ffd9
002834   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002836   ffe5
002838   0e02     movlw   0x2              	MOVLW	0x02
00283a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00283c   f000
                                           ;	.line	353; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00283e   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	354; glcd.c	if (value) {	// set it
002840   5000     movf    0, 0, 0          	MOVF	r0x00, W
002842   e005     bz      0x284e           	BZ	_00268_DS_
002844   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data |= 0b00100000;
002846   8b16     bsf     0x16, 0x5, 0x1   	BSF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
002848   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00284a   ff8c
00284c   d004     bra     0x2856           	BRA	_00269_DS_
                                           _00268_DS_:
00284e   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	359; glcd.c	_latch_3_data &= 0b11011111;
002850   9b16     bcf     0x16, 0x5, 0x1   	BCF	__latch_3_data, 5, B
                                           ;	.line	360; glcd.c	LATCH_DATA = _latch_3_data;
002852   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002854   ff8c
                                           _00269_DS_:
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002856   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002858   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	364; glcd.c	LATCH_DATA = 0x00;
00285a   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00285c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00285e   f000
002860   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002862   ffd9
002864   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	337; glcd.c	void latched_lcd_cs2(unsigned char value) {
002866   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002868   ffe5
00286a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00286c   ffd9
00286e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002870   ffe5
002872   0e02     movlw   0x2              	MOVLW	0x02
002874   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002876   f000
                                           ;	.line	338; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002878   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	339; glcd.c	if (value) {	// set it
00287a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00287c   e005     bz      0x2888           	BZ	_00260_DS_
00287e   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data |= 0b00010000;
002880   8916     bsf     0x16, 0x4, 0x1   	BSF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
002882   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002884   ff8c
002886   d004     bra     0x2890           	BRA	_00261_DS_
                                           _00260_DS_:
002888   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	344; glcd.c	_latch_3_data &= 0b11101111;
00288a   9916     bcf     0x16, 0x4, 0x1   	BCF	__latch_3_data, 4, B
                                           ;	.line	345; glcd.c	LATCH_DATA = _latch_3_data;
00288c   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00288e   ff8c
                                           _00261_DS_:
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002890   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002892   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	349; glcd.c	LATCH_DATA = 0x00;
002894   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002896   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002898   f000
00289a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00289c   ffd9
00289e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	322; glcd.c	void latched_lcd_rst(unsigned char value) {
0028a0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028a2   ffe5
0028a4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028a6   ffd9
0028a8   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028aa   ffe5
0028ac   0e02     movlw   0x2              	MOVLW	0x02
0028ae   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028b0   f000
                                           ;	.line	323; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028b2   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	324; glcd.c	if (value) {	// set it
0028b4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028b6   e005     bz      0x28c2           	BZ	_00252_DS_
0028b8   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data |= 0b00001000;
0028ba   8716     bsf     0x16, 0x3, 0x1   	BSF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
0028bc   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028be   ff8c
0028c0   d004     bra     0x28ca           	BRA	_00253_DS_
                                           _00252_DS_:
0028c2   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	329; glcd.c	_latch_3_data &= 0b11110111;
0028c4   9716     bcf     0x16, 0x3, 0x1   	BCF	__latch_3_data, 3, B
                                           ;	.line	330; glcd.c	LATCH_DATA = _latch_3_data;
0028c6   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028c8   ff8c
                                           _00253_DS_:
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028ca   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028cc   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	334; glcd.c	LATCH_DATA = 0x00;
0028ce   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028d0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028d2   f000
0028d4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028d6   ffd9
0028d8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	307; glcd.c	void latched_lcd_rw(unsigned char value) {
0028da   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028dc   ffe5
0028de   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028e0   ffd9
0028e2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028e4   ffe5
0028e6   0e02     movlw   0x2              	MOVLW	0x02
0028e8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028ea   f000
                                           ;	.line	308; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028ec   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	309; glcd.c	if (value) {	// set it
0028ee   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028f0   e005     bz      0x28fc           	BZ	_00244_DS_
0028f2   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data |= 0b00000100;
0028f4   8516     bsf     0x16, 0x2, 0x1   	BSF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
0028f6   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028f8   ff8c
0028fa   d004     bra     0x2904           	BRA	_00245_DS_
                                           _00244_DS_:
0028fc   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	314; glcd.c	_latch_3_data &= 0b11111011;
0028fe   9516     bcf     0x16, 0x2, 0x1   	BCF	__latch_3_data, 2, B
                                           ;	.line	315; glcd.c	LATCH_DATA = _latch_3_data;
002900   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002902   ff8c
                                           _00245_DS_:
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002904   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002906   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	319; glcd.c	LATCH_DATA = 0x00;
002908   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00290a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00290c   f000
00290e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002910   ffd9
002912   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	292; glcd.c	void latched_lcd_di(unsigned char value) {
002914   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002916   ffe5
002918   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00291a   ffd9
00291c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00291e   ffe5
002920   0e02     movlw   0x2              	MOVLW	0x02
002922   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002924   f000
                                           ;	.line	293; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002926   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; glcd.c	if (value) {	// set it
002928   5000     movf    0, 0, 0          	MOVF	r0x00, W
00292a   e005     bz      0x2936           	BZ	_00236_DS_
00292c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data |= 0b00000010;
00292e   8316     bsf     0x16, 0x1, 0x1   	BSF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
002930   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002932   ff8c
002934   d004     bra     0x293e           	BRA	_00237_DS_
                                           _00236_DS_:
002936   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	299; glcd.c	_latch_3_data &= 0b11111101;
002938   9316     bcf     0x16, 0x1, 0x1   	BCF	__latch_3_data, 1, B
                                           ;	.line	300; glcd.c	LATCH_DATA = _latch_3_data;
00293a   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00293c   ff8c
                                           _00237_DS_:
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00293e   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002940   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; glcd.c	LATCH_DATA = 0x00;
002942   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002944   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002946   f000
002948   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00294a   ffd9
00294c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	277; glcd.c	void latched_lcd_enable(unsigned char value) {
00294e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002950   ffe5
002952   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002954   ffd9
002956   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002958   ffe5
00295a   0e02     movlw   0x2              	MOVLW	0x02
00295c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00295e   f000
                                           ;	.line	278; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002960   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	279; glcd.c	if (value) {	// set it
002962   5000     movf    0, 0, 0          	MOVF	r0x00, W
002964   e005     bz      0x2970           	BZ	_00228_DS_
002966   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data |= 0b00000001;
002968   8116     bsf     0x16, 0, 0x1     	BSF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
00296a   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00296c   ff8c
00296e   d004     bra     0x2978           	BRA	_00229_DS_
                                           _00228_DS_:
002970   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	284; glcd.c	_latch_3_data &= 0b11111110;
002972   9116     bcf     0x16, 0, 0x1     	BCF	__latch_3_data, 0, B
                                           ;	.line	285; glcd.c	LATCH_DATA = _latch_3_data;
002974   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002976   ff8c
                                           _00229_DS_:
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002978   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00297a   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	289; glcd.c	LATCH_DATA = 0x00;
00297c   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00297e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002980   f000
002982   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002984   ffd9
002986   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	262; glcd.c	void latched_lcd_power(unsigned char value) {
002988   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00298a   ffe5
00298c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00298e   ffd9
002990   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002992   ffe5
002994   0e02     movlw   0x2              	MOVLW	0x02
002996   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002998   f000
                                           ;	.line	263; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00299a   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	264; glcd.c	if (value) {	// set it
00299c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00299e   e005     bz      0x29aa           	BZ	_00220_DS_
0029a0   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data |= 0b10000000;
0029a2   8f16     bsf     0x16, 0x7, 0x1   	BSF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
0029a4   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029a6   ff8c
0029a8   d004     bra     0x29b2           	BRA	_00221_DS_
                                           _00220_DS_:
0029aa   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	269; glcd.c	_latch_3_data &= 0b01111111;
0029ac   9f16     bcf     0x16, 0x7, 0x1   	BCF	__latch_3_data, 7, B
                                           ;	.line	270; glcd.c	LATCH_DATA = _latch_3_data;
0029ae   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029b0   ff8c
                                           _00221_DS_:
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0029b2   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029b4   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	274; glcd.c	LATCH_DATA = 0x00;
0029b6   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029b8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029ba   f000
0029bc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029be   ffd9
0029c0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	242; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
00206c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00206e   ffe5
002070   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002072   ffd9
002074   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002076   ffe5
002078   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00207a   ffe5
00207c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00207e   ffe5
002080   0e02     movlw   0x2              	MOVLW	0x02
002082   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002084   f000
002086   0e03     movlw   0x3              	MOVLW	0x03
002088   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00208a   f001
                                           ;	.line	247; glcd.c	if (rx & 64) {
00208c   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
00208e   d006     bra     0x209c           	BRA	_00203_DS_
                                           ;	.line	248; glcd.c	lcd_selectside(LCD_RIGHT);
002090   0e02     movlw   0x2              	MOVLW	0x02
002092   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002094   ec24     call    0x2648, 0        	CALL	_lcd_selectside
002096   f013
002098   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00209a   d005     bra     0x20a6           	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	251; glcd.c	lcd_selectside(LCD_LEFT);
00209c   0e01     movlw   0x1              	MOVLW	0x01
00209e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020a0   ec24     call    0x2648, 0        	CALL	_lcd_selectside
0020a2   f013
0020a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	254; glcd.c	lcd_setpage( ry >> 3);		// fast /8
0020a6   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
0020a8   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0020aa   0b1f     andlw   0x1f             	ANDLW	0x1f
0020ac   6e02     movwf   0x2, 0           	MOVWF	r0x02
0020ae   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0020b0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020b2   ec70     call    0x26e0, 0        	CALL	_lcd_setpage
0020b4   f013
0020b6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_setyaddr( rx & 0b00111111);
0020b8   0e3f     movlw   0x3f             	MOVLW	0x3f
0020ba   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
0020bc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0020be   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020c0   ec4c     call    0x2698, 0        	CALL	_lcd_setyaddr
0020c2   f013
0020c4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	256; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
0020c6   ecb9     call    0x2d72, 0        	CALL	_lcd_read
0020c8   f016
                                           ;	.line	257; glcd.c	d = lcd_read();				// read again to transfer to pic
0020ca   ecb9     call    0x2d72, 0        	CALL	_lcd_read
0020cc   f016
0020ce   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	258; glcd.c	lcd_setyaddr( rx & 0b00111111); 
0020d0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0020d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020d4   ec4c     call    0x2698, 0        	CALL	_lcd_setyaddr
0020d6   f013
0020d8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	259; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
0020da   0e07     movlw   0x7              	MOVLW	0x07
0020dc   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
0020de   0e01     movlw   0x1              	MOVLW	0x01
0020e0   6e00     movwf   0, 0             	MOVWF	r0x00
0020e2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0020e4   e005     bz      0x20f0           	BZ	_00213_DS_
0020e6   6ce8     negf    0xe8, 0          	NEGF	WREG
0020e8   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
0020ea   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
0020ec   0f01     addlw   0x1              	ADDLW	0x01
0020ee   e3fd     bnc     0x20ea           	BNC	_00214_DS_
                                           _00213_DS_:
0020f0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0020f2   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
0020f4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0020f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020f8   ec93     call    0x2726, 0        	CALL	_lcd_write
0020fa   f013
0020fc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0020fe   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002100   f002
002102   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002104   f001
002106   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002108   f000
00210a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00210c   ffd9
00210e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	223; glcd.c	unsigned char lcd_read (void) {
002d72   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d74   ffe5
002d76   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d78   ffd9
                                           ;	.line	237; glcd.c	lcd_enable();
002d7a   ecb4     call    0x2768, 0        	CALL	_lcd_enable
002d7c   f013
                                           ;	.line	238; glcd.c	return 0;
002d7e   6ae8     clrf    0xe8, 0          	CLRF	WREG
002d80   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d82   ffd9
002d84   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	198; glcd.c	void lcd_selectside(unsigned char sides) {
002648   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00264a   ffe5
00264c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00264e   ffd9
002650   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002652   ffe5
002654   0e02     movlw   0x2              	MOVLW	0x02
002656   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002658   f000
                                           ;	.line	201; glcd.c	if (sides & LCD_LEFT) {
00265a   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
00265c   d006     bra     0x266a           	BRA	_00178_DS_
                                           ;	.line	203; glcd.c	latched_lcd_cs1(1);
00265e   0e01     movlw   0x1              	MOVLW	0x01
002660   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002662   ec16     call    0x282c, 0        	CALL	_latched_lcd_cs1
002664   f014
002666   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002668   d005     bra     0x2674           	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	207; glcd.c	latched_lcd_cs1(0);
00266a   0e00     movlw   0                	MOVLW	0x00
00266c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00266e   ec16     call    0x282c, 0        	CALL	_latched_lcd_cs1
002670   f014
002672   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	210; glcd.c	if (sides & LCD_RIGHT) {
002674   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
002676   d006     bra     0x2684           	BRA	_00181_DS_
                                           ;	.line	212; glcd.c	latched_lcd_cs2(1);
002678   0e01     movlw   0x1              	MOVLW	0x01
00267a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00267c   ec33     call    0x2866, 0        	CALL	_latched_lcd_cs2
00267e   f014
002680   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002682   d005     bra     0x268e           	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	216; glcd.c	latched_lcd_cs2(0);
002684   0e00     movlw   0                	MOVLW	0x00
002686   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002688   ec33     call    0x2866, 0        	CALL	_latched_lcd_cs2
00268a   f014
00268c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
00268e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002690   f000
002692   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002694   ffd9
002696   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	185; glcd.c	void lcd_write (unsigned char d) {
002726   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002728   ffe5
00272a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00272c   ffd9
00272e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002730   ffe5
002732   0e02     movlw   0x2              	MOVLW	0x02
002734   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002736   f000
                                           ;	.line	186; glcd.c	lcd_waitbusy();
002738   ec37     call    0x2a6e, 0        	CALL	_lcd_waitbusy
00273a   f015
                                           ;	.line	188; glcd.c	latched_lcd_di(1);
00273c   0e01     movlw   0x1              	MOVLW	0x01
00273e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002740   ec8a     call    0x2914, 0        	CALL	_latched_lcd_di
002742   f014
002744   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	190; glcd.c	latched_lcd_rw(0);
002746   0e00     movlw   0                	MOVLW	0x00
002748   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00274a   ec6d     call    0x28da, 0        	CALL	_latched_lcd_rw
00274c   f014
00274e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	latched_lcd_data(d);
002750   5000     movf    0, 0, 0          	MOVF	r0x00, W
002752   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002754   ec0d     call    0x2c1a, 0        	CALL	_latched_lcd_data
002756   f016
002758   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	194; glcd.c	lcd_enable();
00275a   ecb4     call    0x2768, 0        	CALL	_lcd_enable
00275c   f013
00275e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002760   f000
002762   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002764   ffd9
002766   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
002a6e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a70   ffe5
002a72   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a74   ffd9
002a76   0000     nop                      	nop 
002a78   0000     nop                      	nop 
002a7a   0000     nop                      	nop 
002a7c   0000     nop                      	nop 
002a7e   0000     nop                      	nop 
002a80   0000     nop                      	nop 
002a82   0000     nop                      	nop 
002a84   0000     nop                      	nop 
                                           ;	.line	180; glcd.c	sleep_ms(10);
002a86   0e00     movlw   0                	MOVLW	0x00
002a88   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002a8a   0e00     movlw   0                	MOVLW	0x00
002a8c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002a8e   0e00     movlw   0                	MOVLW	0x00
002a90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002a92   0e0a     movlw   0xa              	MOVLW	0x0a
002a94   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002a96   ec14     call    0x1628, 0        	CALL	_sleep_ms
002a98   f00b
002a9a   0e04     movlw   0x4              	MOVLW	0x04
002a9c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002a9e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002aa0   ffd9
002aa2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
002698   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00269a   ffe5
00269c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00269e   ffd9
0026a0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0026a2   ffe5
0026a4   0e02     movlw   0x2              	MOVLW	0x02
0026a6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0026a8   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
0026aa   ec37     call    0x2a6e, 0        	CALL	_lcd_waitbusy
0026ac   f015
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
0026ae   0e00     movlw   0                	MOVLW	0x00
0026b0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026b2   ec8a     call    0x2914, 0        	CALL	_latched_lcd_di
0026b4   f014
0026b6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
0026b8   0e00     movlw   0                	MOVLW	0x00
0026ba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026bc   ec6d     call    0x28da, 0        	CALL	_latched_lcd_rw
0026be   f014
0026c0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
0026c2   0e3f     movlw   0x3f             	MOVLW	0x3f
0026c4   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
0026c6   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
0026c8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0026ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026cc   ec0d     call    0x2c1a, 0        	CALL	_latched_lcd_data
0026ce   f016
0026d0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
0026d2   ecb4     call    0x2768, 0        	CALL	_lcd_enable
0026d4   f013
0026d6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0026d8   f000
0026da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026dc   ffd9
0026de   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
0026e0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026e2   ffe5
0026e4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026e6   ffd9
0026e8   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0026ea   ffe5
0026ec   0e02     movlw   0x2              	MOVLW	0x02
0026ee   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0026f0   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
0026f2   ec37     call    0x2a6e, 0        	CALL	_lcd_waitbusy
0026f4   f015
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
0026f6   0e00     movlw   0                	MOVLW	0x00
0026f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026fa   ec8a     call    0x2914, 0        	CALL	_latched_lcd_di
0026fc   f014
0026fe   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
002700   0e00     movlw   0                	MOVLW	0x00
002702   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002704   ec6d     call    0x28da, 0        	CALL	_latched_lcd_rw
002706   f014
002708   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
00270a   0eb8     movlw   0xb8             	MOVLW	0xb8
00270c   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
00270e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002710   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002712   ec0d     call    0x2c1a, 0        	CALL	_latched_lcd_data
002714   f016
002716   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
002718   ecb4     call    0x2768, 0        	CALL	_lcd_enable
00271a   f013
00271c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00271e   f000
002720   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002722   ffd9
002724   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
00224e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002250   ffe5
002252   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002254   ffd9
002256   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002258   ffe5
00225a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00225c   ffe5
00225e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002260   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
002262   0e03     movlw   0x3              	MOVLW	0x03
002264   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002266   ec24     call    0x2648, 0        	CALL	_lcd_selectside
002268   f013
00226a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
00226c   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
00226e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002270   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002272   ec70     call    0x26e0, 0        	CALL	_lcd_setpage
002274   f013
002276   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
002278   0e00     movlw   0                	MOVLW	0x00
00227a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00227c   ec4c     call    0x2698, 0        	CALL	_lcd_setyaddr
00227e   f013
002280   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
002282   0e00     movlw   0                	MOVLW	0x00
002284   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002286   ec0d     call    0x2c1a, 0        	CALL	_latched_lcd_data
002288   f016
00228a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
00228c   0e00     movlw   0                	MOVLW	0x00
00228e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002290   ec6d     call    0x28da, 0        	CALL	_latched_lcd_rw
002292   f014
002294   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
002296   0e01     movlw   0x1              	MOVLW	0x01
002298   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00229a   ec8a     call    0x2914, 0        	CALL	_latched_lcd_di
00229c   f014
00229e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
0022a0   0e40     movlw   0x40             	MOVLW	0x40
0022a2   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
0022a4   ecb4     call    0x2768, 0        	CALL	_lcd_enable
0022a6   f013
0022a8   0000     nop                      	nop 
0022aa   0000     nop                      	nop 
0022ac   0000     nop                      	nop 
0022ae   0000     nop                      	nop 
0022b0   0000     nop                      	nop 
0022b2   0000     nop                      	nop 
0022b4   0000     nop                      	nop 
0022b6   0000     nop                      	nop 
0022b8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0022ba   6e02     movwf   0x2, 0           	MOVWF	r0x02
0022bc   0402     decf    0x2, 0, 0        	DECF	r0x02, W
0022be   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
0022c0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0022c2   e1f0     bnz     0x22a4           	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
0022c4   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0022c6   0e08     movlw   0x8              	MOVLW	0x08
0022c8   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
0022ca   e3d1     bnc     0x226e           	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
0022cc   0e01     movlw   0x1              	MOVLW	0x01
0022ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022d0   ec24     call    0x2648, 0        	CALL	_lcd_selectside
0022d2   f013
0022d4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0022d6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0022d8   f002
0022da   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0022dc   f001
0022de   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0022e0   f000
0022e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022e4   ffd9
0022e6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
0024f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0024f6   ffe5
0024f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0024fa   ffd9
0024fc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0024fe   ffe5
002500   0e02     movlw   0x2              	MOVLW	0x02
002502   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002504   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(1);
002506   0e01     movlw   0x1              	MOVLW	0x01
002508   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00250a   ec16     call    0x282c, 0        	CALL	_latched_lcd_cs1
00250c   f014
00250e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(1);
002510   0e01     movlw   0x1              	MOVLW	0x01
002512   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002514   ec33     call    0x2866, 0        	CALL	_latched_lcd_cs2
002516   f014
002518   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
00251a   0e00     movlw   0                	MOVLW	0x00
00251c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00251e   ec6d     call    0x28da, 0        	CALL	_latched_lcd_rw
002520   f014
002522   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
002524   0e00     movlw   0                	MOVLW	0x00
002526   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002528   ec8a     call    0x2914, 0        	CALL	_latched_lcd_di
00252a   f014
00252c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
00252e   0e01     movlw   0x1              	MOVLW	0x01
002530   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002532   0e3e     movlw   0x3e             	MOVLW	0x3e
002534   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
002536   5000     movf    0, 0, 0          	MOVF	r0x00, W
002538   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00253a   ec0d     call    0x2c1a, 0        	CALL	_latched_lcd_data
00253c   f016
00253e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
002540   ecb4     call    0x2768, 0        	CALL	_lcd_enable
002542   f013
002544   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002546   f000
002548   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00254a   ffd9
00254c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
0025f6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025f8   ffe5
0025fa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025fc   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
0025fe   0e00     movlw   0                	MOVLW	0x00
002600   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002602   0e00     movlw   0                	MOVLW	0x00
002604   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002606   0e00     movlw   0                	MOVLW	0x00
002608   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00260a   0e01     movlw   0x1              	MOVLW	0x01
00260c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00260e   ec14     call    0x1628, 0        	CALL	_sleep_ms
002610   f00b
002612   0e04     movlw   0x4              	MOVLW	0x04
002614   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(0);
002616   0e00     movlw   0                	MOVLW	0x00
002618   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00261a   ec50     call    0x28a0, 0        	CALL	_latched_lcd_rst
00261c   f014
00261e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
002620   0e00     movlw   0                	MOVLW	0x00
002622   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002624   0e00     movlw   0                	MOVLW	0x00
002626   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002628   0e00     movlw   0                	MOVLW	0x00
00262a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00262c   0e01     movlw   0x1              	MOVLW	0x01
00262e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002630   ec14     call    0x1628, 0        	CALL	_sleep_ms
002632   f00b
002634   0e04     movlw   0x4              	MOVLW	0x04
002636   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(1);
002638   0e01     movlw   0x1              	MOVLW	0x01
00263a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00263c   ec50     call    0x28a0, 0        	CALL	_latched_lcd_rst
00263e   f014
002640   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002642   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002644   ffd9
002646   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
002c42   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c44   ffe5
002c46   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c48   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
002c4a   0e00     movlw   0                	MOVLW	0x00
002c4c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002c4e   0e00     movlw   0                	MOVLW	0x00
002c50   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002c52   0e00     movlw   0                	MOVLW	0x00
002c54   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002c56   0e0a     movlw   0xa              	MOVLW	0x0a
002c58   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002c5a   ec14     call    0x1628, 0        	CALL	_sleep_ms
002c5c   f00b
002c5e   0e04     movlw   0x4              	MOVLW	0x04
002c60   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
002c62   0e01     movlw   0x1              	MOVLW	0x01
002c64   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c66   ffd9
002c68   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
002768   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00276a   ffe5
00276c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00276e   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
002770   0e01     movlw   0x1              	MOVLW	0x01
002772   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002774   eca7     call    0x294e, 0        	CALL	_latched_lcd_enable
002776   f014
002778   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00277a   0000     nop                      	nop 
00277c   0000     nop                      	nop 
00277e   0000     nop                      	nop 
002780   0000     nop                      	nop 
002782   0000     nop                      	nop 
002784   0000     nop                      	nop 
002786   0000     nop                      	nop 
002788   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
00278a   0e00     movlw   0                	MOVLW	0x00
00278c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00278e   eca7     call    0x294e, 0        	CALL	_latched_lcd_enable
002790   f014
002792   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002794   0000     nop                      	nop 
002796   0000     nop                      	nop 
002798   0000     nop                      	nop 
00279a   0000     nop                      	nop 
00279c   0000     nop                      	nop 
00279e   0000     nop                      	nop 
0027a0   0000     nop                      	nop 
0027a2   0000     nop                      	nop 
0027a4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027a6   ffd9
0027a8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
0027aa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027ac   ffe5
0027ae   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027b0   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
0027b2   0e01     movlw   0x1              	MOVLW	0x01
0027b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027b6   ecc4     call    0x2988, 0        	CALL	_latched_lcd_power
0027b8   f014
0027ba   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027bc   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
0027be   6b16     clrf    0x16, 0x1        	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(0);
0027c0   0e00     movlw   0                	MOVLW	0x00
0027c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027c4   ec16     call    0x282c, 0        	CALL	_latched_lcd_cs1
0027c6   f014
0027c8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(0);
0027ca   0e00     movlw   0                	MOVLW	0x00
0027cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027ce   ec33     call    0x2866, 0        	CALL	_latched_lcd_cs2
0027d0   f014
0027d2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
0027d4   ecfb     call    0x25f6, 0        	CALL	_lcd_reset
0027d6   f012
                                           ;	.line	38; glcd.c	lcd_screenon(1);
0027d8   0e01     movlw   0x1              	MOVLW	0x01
0027da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027dc   ec7a     call    0x24f4, 0        	CALL	_lcd_screenon
0027de   f012
0027e0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
0027e2   ec27     call    0x224e, 0        	CALL	_lcd_cls
0027e4   f011
0027e6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027e8   ffd9
0027ea   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1470 (0x05be) bytes ( 1.12%)
                                           ;           	  735 (0x02df) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
