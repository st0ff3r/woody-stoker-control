gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-18-2013  01:20:58
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Wed Dec 18 01:20:58 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	WDTPS=8192
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	_my_usart_open
                                           	global	_fifo_in_use
                                           	global	_fifo_put
                                           	global	_fifo_get
                                           	global	_base64decode
                                           	global	_base64encode
                                           	global	_validate_command
                                           	global	_reset
                                           	global	__debug
                                           	global	_i
                                           	global	_timer_1_ms
                                           	global	_sensor_inputs
                                           	global	_last_inputs
                                           	global	_output_ac_power_pwm
                                           	global	_ac_power_pwm_counter
                                           	global	_ad_inputs
                                           	global	_fifo_head
                                           	global	_fifo_tail
                                           	global	_fifo_buffer
                                           	global	_command
                                           	global	_command_index
                                           	global	_valid_command
                                           	global	__latch_2_data
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_crc16
                                           	extern	_sprintf
                                           	extern	_strchr
                                           	extern	_memcpy
                                           	extern	_adc_open
                                           	extern	_adc_conv
                                           	extern	_adc_busy
                                           	extern	_adc_read
                                           	extern	_adc_setchannel
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_usart_puts
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           	extern	__moduint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _timer_1_ms	res	4
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _fifo_head	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _fifo_tail	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _command_index	res	1
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _ac_power_pwm_counter	res	1
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _output_ac_power_pwm	res	6
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _main_c_1_102	res	1
                                           
                                           udata_pillefyrsstyring_8	udata
                                           _sensor_inputs	res	1
                                           
                                           udata_pillefyrsstyring_9	udata
                                           _command	res	21
                                           
                                           udata_pillefyrsstyring_10	udata
                                           _valid_command	res	7
                                           
                                           udata_pillefyrsstyring_11	udata
                                           _main_buffer_1_102	res	10
                                           
                                           udata_pillefyrsstyring_12	udata
                                           _ad_inputs	res	16
                                           
                                           udata_pillefyrsstyring_13	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_14	udata
                                           __latch_2_data	res	1
                                           
                                           udata_pillefyrsstyring_15	udata
                                           _fifo_buffer	res	100
                                           
                                           udata_pillefyrsstyring_16	udata
                                           _base64decode_xlate_1_149	res	17
                                           
                                           udata_pillefyrsstyring_17	udata
                                           _validate_command_decoded_command_1_154	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_isr_high_prio	code	0X000008
                                           ivec_0x1_isr_high_prio:
000008   eff5     goto    0x13ea           	GOTO	_isr_high_prio
00000a   f009
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x2_isr_low_prio	code	0X000018
                                           ivec_0x2_isr_low_prio:
000018   ef0d     goto    0x221a           	GOTO	_isr_low_prio
00001a   f011
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	47; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000828   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00082a   0bfc     andlw   0xfc             	ANDLW	0xfc
00082c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	48; pillefyrsstyring.c	OSCCONbits.IRCF = 0x7;	// 8 MHz
00082e   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000830   0b8f     andlw   0x8f             	ANDLW	0x8f
000832   0970     iorlw   0x70             	IORLW	0x70
000834   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	49; pillefyrsstyring.c	WDTCONbits.SWDTEN = 1;	// enable watchdog
000836   80d1     bsf     0xd1, 0, 0       	BSF	_WDTCONbits, 0
000838   0004     clrwdt                   	clrwdt 
00083a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	52; pillefyrsstyring.c	timer_1_ms = 0;
00083c   6b67     clrf    0x67, 0x1        	CLRF	_timer_1_ms, B
00083e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
000840   6b68     clrf    0x68, 0x1        	CLRF	(_timer_1_ms + 1), B
000842   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
000844   6b69     clrf    0x69, 0x1        	CLRF	(_timer_1_ms + 2), B
000846   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
000848   6b6a     clrf    0x6a, 0x1        	CLRF	(_timer_1_ms + 3), B
00084a   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	54; pillefyrsstyring.c	fifo_head = 0;
00084c   6b03     clrf    0x3, 0x1         	CLRF	_fifo_head, B
00084e   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
000850   6b04     clrf    0x4, 0x1         	CLRF	(_fifo_head + 1), B
000852   0108     movlb   0x8              	BANKSEL	_fifo_tail
                                           ;	.line	55; pillefyrsstyring.c	fifo_tail = 0;
000854   6b05     clrf    0x5, 0x1         	CLRF	_fifo_tail, B
000856   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
000858   6b06     clrf    0x6, 0x1         	CLRF	(_fifo_tail + 1), B
00085a   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	56; pillefyrsstyring.c	command_index = 0;
00085c   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
00085e   010f     movlb   0xf              	BANKSEL	_output_ac_power_pwm
                                           ;	.line	59; pillefyrsstyring.c	output_ac_power_pwm[0] = 0;
000860   6b61     clrf    0x61, 0x1        	CLRF	_output_ac_power_pwm, B
000862   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 1)
                                           ;	.line	60; pillefyrsstyring.c	output_ac_power_pwm[1] = 0;
000864   6b62     clrf    0x62, 0x1        	CLRF	(_output_ac_power_pwm + 1), B
000866   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 2)
                                           ;	.line	61; pillefyrsstyring.c	output_ac_power_pwm[2] = 0;
000868   6b63     clrf    0x63, 0x1        	CLRF	(_output_ac_power_pwm + 2), B
00086a   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 3)
                                           ;	.line	62; pillefyrsstyring.c	output_ac_power_pwm[3] = 0;
00086c   6b64     clrf    0x64, 0x1        	CLRF	(_output_ac_power_pwm + 3), B
00086e   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 4)
                                           ;	.line	63; pillefyrsstyring.c	output_ac_power_pwm[4] = 0;
000870   6b65     clrf    0x65, 0x1        	CLRF	(_output_ac_power_pwm + 4), B
000872   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 5)
                                           ;	.line	64; pillefyrsstyring.c	output_ac_power_pwm[5] = 0;
000874   6b66     clrf    0x66, 0x1        	CLRF	(_output_ac_power_pwm + 5), B
000876   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	65; pillefyrsstyring.c	ac_power_pwm_counter = 0;
000878   6b10     clrf    0x10, 0x1        	CLRF	_ac_power_pwm_counter, B
                                           ;	.line	68; pillefyrsstyring.c	RCONbits.IPEN = 1;
00087a   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	70; pillefyrsstyring.c	init_timers();
00087c   ec50     call    0x2aa0, 0        	CALL	_init_timers
00087e   f015
                                           ;	.line	73; pillefyrsstyring.c	IPR1bits.RCIP = 0;
000880   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	74; pillefyrsstyring.c	IPR1bits.TXIP = 0;
000882   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	85; pillefyrsstyring.c	my_usart_open();
000884   ec19     call    0x2c32, 0        	CALL	_my_usart_open
000886   f016
                                           ;	.line	87; pillefyrsstyring.c	sleep_ms(1000);	// let stuff settle...
000888   0e00     movlw   0                	MOVLW	0x00
00088a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00088c   0e00     movlw   0                	MOVLW	0x00
00088e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000890   0e03     movlw   0x3              	MOVLW	0x03
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   0ee8     movlw   0xe8             	MOVLW	0xe8
000896   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000898   ec49     call    0x1692, 0        	CALL	_sleep_ms
00089a   f00b
00089c   0e04     movlw   0x4              	MOVLW	0x04
00089e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; pillefyrsstyring.c	usart_puts("OpenStoker starting... serial working\n\r");
0008a0   0e00     movlw   0                	MOVLW	UPPER(__str_0)
0008a2   6e02     movwf   0x2, 0           	MOVWF	r0x02
0008a4   0e14     movlw   0x14             	MOVLW	HIGH(__str_0)
0008a6   6e01     movwf   0x1, 0           	MOVWF	r0x01
0008a8   0efe     movlw   0xfe             	MOVLW	LOW(__str_0)
0008aa   6e00     movwf   0, 0             	MOVWF	r0x00
0008ac   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0008ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0008b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008b6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b8   ec73     call    0x24e6, 0        	CALL	_usart_puts
0008ba   f012
0008bc   0e03     movlw   0x3              	MOVLW	0x03
0008be   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	130; pillefyrsstyring.c	adc_open(ADC_CHN_0, ADC_FOSC_4 | ADC_ACQT_20, ADC_CFG_12A, ADC_FRM_RJUST | ADC_INT_OFF | ADC_VCFG_AN3_AN2);
0008c0   0eb0     movlw   0xb0             	MOVLW	0xb0
0008c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c4   0e03     movlw   0x3              	MOVLW	0x03
0008c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c8   0e3c     movlw   0x3c             	MOVLW	0x3c
0008ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008cc   0e00     movlw   0                	MOVLW	0x00
0008ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d0   ec35     call    0x246a, 0        	CALL	_adc_open
0008d2   f012
0008d4   0e04     movlw   0x4              	MOVLW	0x04
0008d6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	133; pillefyrsstyring.c	init_latches();
0008d8   ec2e     call    0x2c5c, 0        	CALL	_init_latches
0008da   f016
                                           _00105_DS_:
                                           ;	.line	138; pillefyrsstyring.c	while (!fifo_in_use()) {
0008dc   ecbc     call    0x2b78, 0        	CALL	_fifo_in_use
0008de   f015
0008e0   6e00     movwf   0, 0             	MOVWF	r0x00
0008e2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008e4   e123     bnz     0x92c            	BNZ	_00107_DS_
                                           ;	.line	139; pillefyrsstyring.c	latched_lcd_power(1);
0008e6   0e01     movlw   0x1              	MOVLW	0x01
0008e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ea   ecf9     call    0x29f2, 0        	CALL	_latched_lcd_power
0008ec   f014
0008ee   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	140; pillefyrsstyring.c	sleep_ms(1000);
0008f0   0e00     movlw   0                	MOVLW	0x00
0008f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f4   0e00     movlw   0                	MOVLW	0x00
0008f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f8   0e03     movlw   0x3              	MOVLW	0x03
0008fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fc   0ee8     movlw   0xe8             	MOVLW	0xe8
0008fe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000900   ec49     call    0x1692, 0        	CALL	_sleep_ms
000902   f00b
000904   0e04     movlw   0x4              	MOVLW	0x04
000906   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	141; pillefyrsstyring.c	latched_lcd_power(0);
000908   0e00     movlw   0                	MOVLW	0x00
00090a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00090c   ecf9     call    0x29f2, 0        	CALL	_latched_lcd_power
00090e   f014
000910   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	142; pillefyrsstyring.c	sleep_ms(1000);
000912   0e00     movlw   0                	MOVLW	0x00
000914   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000916   0e00     movlw   0                	MOVLW	0x00
000918   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00091a   0e03     movlw   0x3              	MOVLW	0x03
00091c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00091e   0ee8     movlw   0xe8             	MOVLW	0xe8
000920   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000922   ec49     call    0x1692, 0        	CALL	_sleep_ms
000924   f00b
000926   0e04     movlw   0x4              	MOVLW	0x04
000928   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00092a   d7d8     bra     0x8dc            	BRA	_00105_DS_
                                           _00107_DS_:
                                           ;	.line	147; pillefyrsstyring.c	latched_lcd_power(1);
00092c   0e01     movlw   0x1              	MOVLW	0x01
00092e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000930   ecf9     call    0x29f2, 0        	CALL	_latched_lcd_power
000932   f014
000934   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	149; pillefyrsstyring.c	last_inputs = get_inputs();
000936   ec91     call    0x2d22, 0        	CALL	_get_inputs
000938   f016
00093a   0108     movlb   0x8              	BANKSEL	_last_inputs
00093c   6f11     movwf   0x11, 0x1        	MOVWF	_last_inputs, B
                                           _00135_DS_:
                                           ;	.line	154; pillefyrsstyring.c	if (fifo_get(&c)) {
00093e   0e08     movlw   0x8              	MOVLW	HIGH(_main_c_1_102)
000940   6e01     movwf   0x1, 0           	MOVWF	r0x01
000942   0e12     movlw   0x12             	MOVLW	LOW(_main_c_1_102)
000944   6e00     movwf   0, 0             	MOVWF	r0x00
000946   0e80     movlw   0x80             	MOVLW	0x80
000948   6e02     movwf   0x2, 0           	MOVWF	r0x02
00094a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00094c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00094e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000950   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000952   5000     movf    0, 0, 0          	MOVF	r0x00, W
000954   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000956   ec14     call    0x2028, 0        	CALL	_fifo_get
000958   f010
00095a   6e00     movwf   0, 0             	MOVWF	r0x00
00095c   0e03     movlw   0x3              	MOVLW	0x03
00095e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000960   5000     movf    0, 0, 0          	MOVF	r0x00, W
000962   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000964   d13d     bra     0xbe0            	BRA	_00127_DS_
000966   0108     movlb   0x8              	BANKSEL	_main_c_1_102
                                           ;	.line	155; pillefyrsstyring.c	if (c == '\n' || c == '.') {
000968   5112     movf    0x12, 0, 0x1     	MOVF	_main_c_1_102, W, B
00096a   0a0a     xorlw   0xa              	XORLW	0x0a
00096c   e005     bz      0x978            	BZ	_00122_DS_
                                           _00208_DS_:
00096e   0108     movlb   0x8              	BANKSEL	_main_c_1_102
000970   5112     movf    0x12, 0, 0x1     	MOVF	_main_c_1_102, W, B
000972   0a2e     xorlw   0x2e             	XORLW	0x2e
000974   e001     bz      0x978            	BZ	_00122_DS_
000976   d109     bra     0xb8a            	BRA	_00123_DS_
                                           _00122_DS_:
000978   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	157; pillefyrsstyring.c	command_index = 0;
00097a   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	158; pillefyrsstyring.c	if (validate_command(command, valid_command)) {
00097c   0e00     movlw   0                	MOVLW	HIGH(_command)
00097e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000980   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000982   6e00     movwf   0, 0             	MOVWF	r0x00
000984   0e80     movlw   0x80             	MOVLW	0x80
000986   6e02     movwf   0x2, 0           	MOVWF	r0x02
000988   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
00098a   6e04     movwf   0x4, 0           	MOVWF	r0x04
00098c   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
00098e   6e03     movwf   0x3, 0           	MOVWF	r0x03
000990   0e80     movlw   0x80             	MOVLW	0x80
000992   6e05     movwf   0x5, 0           	MOVWF	r0x05
000994   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000996   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000998   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00099a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00099c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00099e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ac   eca0     call    0x1540, 0        	CALL	_validate_command
0009ae   f00a
0009b0   6e00     movwf   0, 0             	MOVWF	r0x00
0009b2   0e06     movlw   0x6              	MOVLW	0x06
0009b4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0009b6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009b8   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0009ba   d0e3     bra     0xb82            	BRA	_00117_DS_
0009bc   0004     clrwdt                   	clrwdt 
                                           ;	.line	160; pillefyrsstyring.c	RELAY = 1;
0009be   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
0009c0   0100     movlb   0                	BANKSEL	_valid_command
                                           ;	.line	162; pillefyrsstyring.c	switch (valid_command[0]) {					// only look at first character
0009c2   51f9     movf    0xf9, 0, 0x1     	MOVF	_valid_command, W, B
0009c4   6e00     movwf   0, 0             	MOVWF	r0x00
0009c6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c8   0a61     xorlw   0x61             	XORLW	0x61
0009ca   e101     bnz     0x9ce            	BNZ	_00212_DS_
0009cc   d096     bra     0xafa            	BRA	_00156_DS_
                                           _00212_DS_:
0009ce   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d0   0a67     xorlw   0x67             	XORLW	0x67
0009d2   e101     bnz     0x9d6            	BNZ	_00214_DS_
0009d4   d03c     bra     0xa4e            	BRA	_00110_DS_
                                           _00214_DS_:
0009d6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d8   0a73     xorlw   0x73             	XORLW	0x73
0009da   e005     bz      0x9e6            	BZ	_00108_DS_
0009dc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009de   0a7a     xorlw   0x7a             	XORLW	0x7a
0009e0   e101     bnz     0x9e4            	BNZ	_00218_DS_
0009e2   d069     bra     0xab6            	BRA	_00111_DS_
                                           _00218_DS_:
0009e4   d0ca     bra     0xb7a            	BRA	_00114_DS_
                                           _00108_DS_:
                                           ;	.line	164; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009e6   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00137_DS_:
                                           ;	.line	165; pillefyrsstyring.c	output_ac_power_pwm[j] = valid_command[j + 1];
0009e8   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
0009ea   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0009ec   6e01     movwf   0x1, 0           	MOVWF	r0x01
0009ee   6a02     clrf    0x2, 0           	CLRF	r0x02
0009f0   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
0009f2   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009f4   2800     incf    0, 0, 0          	INCF	r0x00, W
0009f6   6e03     movwf   0x3, 0           	MOVWF	r0x03
0009f8   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
0009fa   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0009fc   6e04     movwf   0x4, 0           	MOVWF	r0x04
0009fe   6a05     clrf    0x5, 0           	CLRF	r0x05
000a00   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000a02   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000a04   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000a06   ffe9
000a08   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000a0a   ffea
000a0c   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
000a0e   f004
000a10   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000a12   ffe9
000a14   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
000a16   ffea
000a18   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
000a1a   ffef
                                           ;	.line	164; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
000a1c   c003     movff   0x3, 0           	MOVFF	r0x03, r0x00
000a1e   f000
000a20   0e06     movlw   0x6              	MOVLW	0x06
000a22   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000a24   e3e1     bnc     0x9e8            	BNC	_00137_DS_
                                           ;	.line	167; pillefyrsstyring.c	usart_putc('!');	// ok values set to ac power pwm system
000a26   0e21     movlw   0x21             	MOVLW	0x21
000a28   ec13     call    0x2e26, 0        	CALL	_usart_putc
000a2a   f017
                                           ;	.line	168; pillefyrsstyring.c	usart_puts("\n\r");
000a2c   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a2e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a30   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000a32   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a34   0e26     movlw   0x26             	MOVLW	LOW(__str_1)
000a36   6e00     movwf   0, 0             	MOVWF	r0x00
000a38   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a3a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a3e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a40   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a42   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a44   ec73     call    0x24e6, 0        	CALL	_usart_puts
000a46   f012
000a48   0e03     movlw   0x3              	MOVLW	0x03
000a4a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	169; pillefyrsstyring.c	break;
000a4c   d0c9     bra     0xbe0            	BRA	_00127_DS_
                                           _00110_DS_:
                                           ;	.line	171; pillefyrsstyring.c	sprintf(buffer, "g%02x\n\r", sensor_inputs);
000a4e   c813     movff   0x813, 0         	MOVFF	_sensor_inputs, r0x00
000a50   f000
000a52   6a01     clrf    0x1, 0           	CLRF	r0x01
000a54   0e00     movlw   0                	MOVLW	UPPER(__str_2)
000a56   6e04     movwf   0x4, 0           	MOVWF	r0x04
000a58   0e15     movlw   0x15             	MOVLW	HIGH(__str_2)
000a5a   6e03     movwf   0x3, 0           	MOVWF	r0x03
000a5c   0e2a     movlw   0x2a             	MOVLW	LOW(__str_2)
000a5e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a60   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a62   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a64   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a66   6e05     movwf   0x5, 0           	MOVWF	r0x05
000a68   0e80     movlw   0x80             	MOVLW	0x80
000a6a   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a6c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a70   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a74   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a78   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a7c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a80   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a84   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a86   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a88   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a8a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a8c   ecbf     call    0x1b7e, 0        	CALL	_sprintf
000a8e   f00d
000a90   0e08     movlw   0x8              	MOVLW	0x08
000a92   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	172; pillefyrsstyring.c	usart_puts(buffer);
000a94   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a96   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a98   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a9a   6e00     movwf   0, 0             	MOVWF	r0x00
000a9c   0e80     movlw   0x80             	MOVLW	0x80
000a9e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000aa0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000aa2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aa6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa8   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aaa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aac   ec73     call    0x24e6, 0        	CALL	_usart_puts
000aae   f012
000ab0   0e03     movlw   0x3              	MOVLW	0x03
000ab2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	173; pillefyrsstyring.c	break;
000ab4   d095     bra     0xbe0            	BRA	_00127_DS_
                                           _00111_DS_:
                                           ;	.line	175; pillefyrsstyring.c	usart_putc('z');
000ab6   0e7a     movlw   0x7a             	MOVLW	0x7a
000ab8   ec13     call    0x2e26, 0        	CALL	_usart_putc
000aba   f017
                                           ;	.line	176; pillefyrsstyring.c	usart_puts("\n\r");
000abc   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000abe   6e02     movwf   0x2, 0           	MOVWF	r0x02
000ac0   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000ac2   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ac4   0e26     movlw   0x26             	MOVLW	LOW(__str_1)
000ac6   6e00     movwf   0, 0             	MOVWF	r0x00
000ac8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000aca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000acc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ace   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad0   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ad2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad4   ec73     call    0x24e6, 0        	CALL	_usart_puts
000ad6   f012
000ad8   0e03     movlw   0x3              	MOVLW	0x03
000ada   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	177; pillefyrsstyring.c	sleep_ms(100);
000adc   0e00     movlw   0                	MOVLW	0x00
000ade   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae0   0e00     movlw   0                	MOVLW	0x00
000ae2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae4   0e00     movlw   0                	MOVLW	0x00
000ae6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae8   0e64     movlw   0x64             	MOVLW	0x64
000aea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aec   ec49     call    0x1692, 0        	CALL	_sleep_ms
000aee   f00b
000af0   0e04     movlw   0x4              	MOVLW	0x04
000af2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	178; pillefyrsstyring.c	reset();
000af4   ec0b     call    0x2e16, 0        	CALL	_reset
000af6   f017
                                           ;	.line	179; pillefyrsstyring.c	break;
000af8   d073     bra     0xbe0            	BRA	_00127_DS_
                                           _00156_DS_:
                                           ;	.line	181; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000afa   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00139_DS_:
                                           ;	.line	182; pillefyrsstyring.c	sprintf(buffer, "ad%d: %04x\n\r", j, ad_inputs[0]);
000afc   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000afe   f001
000b00   6a02     clrf    0x2, 0           	CLRF	r0x02
000b02   0e00     movlw   0                	MOVLW	UPPER(__str_3)
000b04   6e05     movwf   0x5, 0           	MOVWF	r0x05
000b06   0e15     movlw   0x15             	MOVLW	HIGH(__str_3)
000b08   6e04     movwf   0x4, 0           	MOVWF	r0x04
000b0a   0e32     movlw   0x32             	MOVLW	LOW(__str_3)
000b0c   6e03     movwf   0x3, 0           	MOVWF	r0x03
000b0e   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000b10   6e07     movwf   0x7, 0           	MOVWF	r0x07
000b12   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000b14   6e06     movwf   0x6, 0           	MOVWF	r0x06
000b16   0e80     movlw   0x80             	MOVLW	0x80
000b18   6e08     movwf   0x8, 0           	MOVWF	r0x08
000b1a   010f     movlb   0xf              	BANKSEL	(_ad_inputs + 1)
000b1c   5132     movf    0x32, 0, 0x1     	MOVF	(_ad_inputs + 1), W, B
000b1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b20   010f     movlb   0xf              	BANKSEL	_ad_inputs
000b22   5131     movf    0x31, 0, 0x1     	MOVF	_ad_inputs, W, B
000b24   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b26   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b28   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b2c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b30   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b32   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b34   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b36   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b3a   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000b3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b3e   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000b40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b42   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b46   ecbf     call    0x1b7e, 0        	CALL	_sprintf
000b48   f00d
000b4a   0e0a     movlw   0xa              	MOVLW	0x0a
000b4c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	183; pillefyrsstyring.c	usart_puts(buffer);
000b4e   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000b50   6e02     movwf   0x2, 0           	MOVWF	r0x02
000b52   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000b54   6e01     movwf   0x1, 0           	MOVWF	r0x01
000b56   0e80     movlw   0x80             	MOVLW	0x80
000b58   6e03     movwf   0x3, 0           	MOVWF	r0x03
000b5a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b62   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b64   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b66   ec73     call    0x24e6, 0        	CALL	_usart_puts
000b68   f012
000b6a   0e03     movlw   0x3              	MOVLW	0x03
000b6c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	181; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000b6e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000b70   0e08     movlw   0x8              	MOVLW	0x08
000b72   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000b74   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000b76   d7c2     bra     0xafc            	BRA	_00139_DS_
                                           ;	.line	185; pillefyrsstyring.c	break;
000b78   d033     bra     0xbe0            	BRA	_00127_DS_
                                           _00114_DS_:
                                           ;	.line	187; pillefyrsstyring.c	usart_putc('?');	// unknown command
000b7a   0e3f     movlw   0x3f             	MOVLW	0x3f
000b7c   ec13     call    0x2e26, 0        	CALL	_usart_putc
000b7e   f017
                                           ;	.line	188; pillefyrsstyring.c	}		
000b80   d02f     bra     0xbe0            	BRA	_00127_DS_
                                           _00117_DS_:
                                           ;	.line	191; pillefyrsstyring.c	usart_putc('?');			// command not valid
000b82   0e3f     movlw   0x3f             	MOVLW	0x3f
000b84   ec13     call    0x2e26, 0        	CALL	_usart_putc
000b86   f017
000b88   d02b     bra     0xbe0            	BRA	_00127_DS_
                                           _00123_DS_:
                                           ;	.line	197; pillefyrsstyring.c	if (command_index <= COMMAND_LENGTH) {
000b8a   0e15     movlw   0x15             	MOVLW	0x15
000b8c   0108     movlb   0x8              	BANKSEL	_command_index
000b8e   5d0f     subwf   0xf, 0, 0x1      	SUBWF	_command_index, W, B
000b90   e210     bc      0xbb2            	BC	_00120_DS_
                                           ;	.line	198; pillefyrsstyring.c	command[command_index] = c;
000b92   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000b94   0108     movlb   0x8              	BANKSEL	_command_index
000b96   250f     addwf   0xf, 0, 0x1      	ADDWF	_command_index, W, B
000b98   6e00     movwf   0, 0             	MOVWF	r0x00
000b9a   6a01     clrf    0x1, 0           	CLRF	r0x01
000b9c   0e00     movlw   0                	MOVLW	HIGH(_command)
000b9e   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000ba0   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000ba2   ffe9
000ba4   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000ba6   ffea
000ba8   c812     movff   0x812, 0xfef     	MOVFF	_main_c_1_102, INDF0
000baa   ffef
000bac   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	199; pillefyrsstyring.c	command_index++;
000bae   2b0f     incf    0xf, 0x1, 0x1    	INCF	_command_index, F, B
000bb0   d017     bra     0xbe0            	BRA	_00127_DS_
                                           _00120_DS_:
000bb2   0100     movlb   0                	BANKSEL	(_command + 20)
                                           ;	.line	202; pillefyrsstyring.c	command[COMMAND_LENGTH] = '\0';	// null terminate it
000bb4   6bf8     clrf    0xf8, 0x1        	CLRF	(_command + 20), B
000bb6   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	203; pillefyrsstyring.c	command_index = 0;
000bb8   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	204; pillefyrsstyring.c	usart_putc('+');		// overflow
000bba   0e2b     movlw   0x2b             	MOVLW	0x2b
000bbc   ec13     call    0x2e26, 0        	CALL	_usart_putc
000bbe   f017
                                           ;	.line	205; pillefyrsstyring.c	usart_puts("\n\r");
000bc0   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000bc2   6e02     movwf   0x2, 0           	MOVWF	r0x02
000bc4   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000bc6   6e01     movwf   0x1, 0           	MOVWF	r0x01
000bc8   0e26     movlw   0x26             	MOVLW	LOW(__str_1)
000bca   6e00     movwf   0, 0             	MOVWF	r0x00
000bcc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000bce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000bd2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000bd6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd8   ec73     call    0x24e6, 0        	CALL	_usart_puts
000bda   f012
000bdc   0e03     movlw   0x3              	MOVLW	0x03
000bde   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00127_DS_:
000be0   0108     movlb   0x8              	BANKSEL	_sensor_inputs
                                           ;	.line	210; pillefyrsstyring.c	if (sensor_inputs != last_inputs) {
000be2   5113     movf    0x13, 0, 0x1     	MOVF	_sensor_inputs, W, B
000be4   0108     movlb   0x8              	BANKSEL	_last_inputs
000be6   1911     xorwf   0x11, 0, 0x1     	XORWF	_last_inputs, W, B
000be8   e004     bz      0xbf2            	BZ	_00162_DS_
                                           ;	.line	211; pillefyrsstyring.c	last_inputs = sensor_inputs;
000bea   c813     movff   0x813, 0x811     	MOVFF	_sensor_inputs, _last_inputs
000bec   f811
                                           ;	.line	212; pillefyrsstyring.c	_debug();	// blocks main for a while :-/
000bee   ec07     call    0x260e, 0        	CALL	__debug
000bf0   f013
                                           _00162_DS_:
                                           ;	.line	216; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000bf2   6a00     clrf    0, 0             	CLRF	r0x00
000bf4   6a01     clrf    0x1, 0           	CLRF	r0x01
000bf6   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00141_DS_:
                                           ;	.line	217; pillefyrsstyring.c	adc_setchannel(j);
000bf8   5000     movf    0, 0, 0          	MOVF	r0x00, W
000bfa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bfc   ec16     call    0x2a2c, 0        	CALL	_adc_setchannel
000bfe   f015
000c00   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	218; pillefyrsstyring.c	adc_conv();
000c02   ec0a     call    0x14, 0          	CALL	_adc_conv
000c04   f000
                                           _00130_DS_:
                                           ;	.line	219; pillefyrsstyring.c	while(adc_busy()) {
000c06   ec2e     call    0x2e5c, 0        	CALL	_adc_busy
000c08   f017
000c0a   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c0c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c0e   e1fb     bnz     0xc06            	BNZ	_00130_DS_
                                           ;	.line	222; pillefyrsstyring.c	ad_inputs[j] = adc_read();
000c10   0e31     movlw   0x31             	MOVLW	LOW(_ad_inputs)
000c12   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
000c14   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c16   0e0f     movlw   0xf              	MOVLW	HIGH(_ad_inputs)
000c18   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000c1a   6e04     movwf   0x4, 0           	MOVWF	r0x04
000c1c   ec22     call    0x2e44, 0        	CALL	_adc_read
000c1e   f017
000c20   6e05     movwf   0x5, 0           	MOVWF	r0x05
000c22   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
000c24   f006
000c26   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000c28   ffe9
000c2a   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000c2c   ffea
000c2e   c005     movff   0x5, 0xfee       	MOVFF	r0x05, POSTINC0
000c30   ffee
000c32   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000c34   ffef
                                           ;	.line	216; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000c36   0e02     movlw   0x2              	MOVLW	0x02
000c38   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000c3a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000c3c   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000c3e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000c40   0e08     movlw   0x8              	MOVLW	0x08
000c42   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000c44   e3d9     bnc     0xbf8            	BNC	_00141_DS_
000c46   d67b     bra     0x93e            	BRA	_00135_DS_
000c48   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	503; pillefyrsstyring.c	void _debug() {
00260e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002610   ffe5
002612   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002614   ffd9
                                           ;	.line	504; pillefyrsstyring.c	latched_lcd_power(0);
002616   0e00     movlw   0                	MOVLW	0x00
002618   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00261a   ecf9     call    0x29f2, 0        	CALL	_latched_lcd_power
00261c   f014
00261e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	505; pillefyrsstyring.c	sleep_ms(200);
002620   0e00     movlw   0                	MOVLW	0x00
002622   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002624   0e00     movlw   0                	MOVLW	0x00
002626   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002628   0e00     movlw   0                	MOVLW	0x00
00262a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00262c   0ec8     movlw   0xc8             	MOVLW	0xc8
00262e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002630   ec49     call    0x1692, 0        	CALL	_sleep_ms
002632   f00b
002634   0e04     movlw   0x4              	MOVLW	0x04
002636   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	506; pillefyrsstyring.c	latched_lcd_power(1);
002638   0e01     movlw   0x1              	MOVLW	0x01
00263a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00263c   ecf9     call    0x29f2, 0        	CALL	_latched_lcd_power
00263e   f014
002640   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	507; pillefyrsstyring.c	sleep_ms(200);
002642   0e00     movlw   0                	MOVLW	0x00
002644   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002646   0e00     movlw   0                	MOVLW	0x00
002648   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00264a   0e00     movlw   0                	MOVLW	0x00
00264c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00264e   0ec8     movlw   0xc8             	MOVLW	0xc8
002650   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002652   ec49     call    0x1692, 0        	CALL	_sleep_ms
002654   f00b
002656   0e04     movlw   0x4              	MOVLW	0x04
002658   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00265a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00265c   ffd9
00265e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__reset	code
                                           _reset:
                                           ;	.line	497; pillefyrsstyring.c	void reset() {
002e16   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002e18   ffe5
002e1a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002e1c   ffd9
002e1e   00ff     reset                    	reset
002e20   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e22   ffd9
002e24   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__validate_command	code
                                           _validate_command:
                                           ;	.line	480; pillefyrsstyring.c	unsigned char validate_command(unsigned char *encoded_command, unsigned char *validated_command) {
001540   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001542   ffe5
001544   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001546   ffd9
001548   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00154a   ffe5
00154c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00154e   ffe5
001550   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001552   ffe5
001554   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001556   ffe5
001558   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00155a   ffe5
00155c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00155e   ffe5
001560   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001562   ffe5
001564   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001566   ffe5
001568   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00156a   ffe5
00156c   0e02     movlw   0x2              	MOVLW	0x02
00156e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001570   f000
001572   0e03     movlw   0x3              	MOVLW	0x03
001574   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001576   f001
001578   0e04     movlw   0x4              	MOVLW	0x04
00157a   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
00157c   f002
00157e   0e05     movlw   0x5              	MOVLW	0x05
001580   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
001582   f003
001584   0e06     movlw   0x6              	MOVLW	0x06
001586   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
001588   f004
00158a   0e07     movlw   0x7              	MOVLW	0x07
00158c   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
00158e   f005
                                           ;	.line	484; pillefyrsstyring.c	base64decode(encoded_command, decoded_command);
001590   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
001592   6e07     movwf   0x7, 0           	MOVWF	r0x07
001594   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
001596   6e06     movwf   0x6, 0           	MOVWF	r0x06
001598   0e80     movlw   0x80             	MOVLW	0x80
00159a   6e08     movwf   0x8, 0           	MOVWF	r0x08
00159c   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00159e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a0   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0015a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a4   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0015a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0015aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ac   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015b0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015b4   ec2f     call    0x105e, 0        	CALL	_base64decode
0015b6   f008
0015b8   0e06     movlw   0x6              	MOVLW	0x06
0015ba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	485; pillefyrsstyring.c	received_checksum = (decoded_command[7] << 8) + decoded_command[8];
0015bc   cf5f     movff   0xf5f, 0         	MOVFF	(_validate_command_decoded_command_1_154 + 7), r0x00
0015be   f000
0015c0   6a01     clrf    0x1, 0           	CLRF	r0x01
0015c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015c4   6e06     movwf   0x6, 0           	MOVWF	r0x06
0015c6   6a02     clrf    0x2, 0           	CLRF	r0x02
0015c8   cf60     movff   0xf60, 0         	MOVFF	(_validate_command_decoded_command_1_154 + 8), r0x00
0015ca   f000
0015cc   6a01     clrf    0x1, 0           	CLRF	r0x01
0015ce   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015d0   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
0015d2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015d4   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
                                           ;	.line	486; pillefyrsstyring.c	checksum = crc16(decoded_command, 7, 0);
0015d6   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
0015d8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0015da   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
0015dc   6e00     movwf   0, 0             	MOVWF	r0x00
0015de   0e80     movlw   0x80             	MOVLW	0x80
0015e0   6e07     movwf   0x7, 0           	MOVWF	r0x07
0015e2   0e00     movlw   0                	MOVLW	0x00
0015e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e6   0e00     movlw   0                	MOVLW	0x00
0015e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ea   0e00     movlw   0                	MOVLW	0x00
0015ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ee   0e00     movlw   0                	MOVLW	0x00
0015f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f2   0e00     movlw   0                	MOVLW	0x00
0015f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f6   0e07     movlw   0x7              	MOVLW	0x07
0015f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015fa   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0015fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015fe   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001600   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001602   5000     movf    0, 0, 0          	MOVF	r0x00, W
001604   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001606   ecf1     call    0x17e2, 0        	CALL	_crc16
001608   f00b
00160a   6e00     movwf   0, 0             	MOVWF	r0x00
00160c   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
00160e   f001
001610   0e09     movlw   0x9              	MOVLW	0x09
001612   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	488; pillefyrsstyring.c	if (received_checksum == checksum) {
001614   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001616   1800     xorwf   0, 0, 0          	XORWF	r0x00, W
001618   e103     bnz     0x1620           	BNZ	_00381_DS_
00161a   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00161c   1801     xorwf   0x1, 0, 0        	XORWF	r0x01, W
00161e   e001     bz      0x1622           	BZ	_00382_DS_
                                           _00381_DS_:
001620   d022     bra     0x1666           	BRA	_00374_DS_
                                           _00382_DS_:
                                           ;	.line	489; pillefyrsstyring.c	memcpy(validated_command, decoded_command, 7);
001622   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001624   6e05     movwf   0x5, 0           	MOVWF	r0x05
001626   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001628   6e04     movwf   0x4, 0           	MOVWF	r0x04
00162a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00162c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00162e   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
001630   6e01     movwf   0x1, 0           	MOVWF	r0x01
001632   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
001634   6e00     movwf   0, 0             	MOVWF	r0x00
001636   0e80     movlw   0x80             	MOVLW	0x80
001638   6e02     movwf   0x2, 0           	MOVWF	r0x02
00163a   0e00     movlw   0                	MOVLW	0x00
00163c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00163e   0e07     movlw   0x7              	MOVLW	0x07
001640   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001642   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001644   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001646   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001648   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00164a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00164c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00164e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001650   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001652   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001654   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001656   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001658   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00165a   ecd2     call    0x1da4, 0        	CALL	_memcpy
00165c   f00e
00165e   0e08     movlw   0x8              	MOVLW	0x08
001660   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	490; pillefyrsstyring.c	return 1;
001662   0e01     movlw   0x1              	MOVLW	0x01
001664   d001     bra     0x1668           	BRA	_00376_DS_
                                           _00374_DS_:
                                           ;	.line	493; pillefyrsstyring.c	return 0;
001666   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00376_DS_:
001668   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00166a   f008
00166c   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00166e   f007
001670   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001672   f006
001674   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001676   f005
001678   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00167a   f004
00167c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00167e   f003
001680   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001682   f002
001684   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001686   f001
001688   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00168a   f000
00168c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00168e   ffd9
001690   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64encode	code
                                           _base64encode:
                                           ;	.line	470; pillefyrsstyring.c	void base64encode(unsigned char *s) {
002e36   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002e38   ffe5
002e3a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002e3c   ffd9
                                           ;	.line	478; pillefyrsstyring.c	}
002e3e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e40   ffd9
002e42   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64decode	code
                                           _base64decode:
                                           ;	.line	455; pillefyrsstyring.c	void base64decode(unsigned char *s, unsigned char *buffer) {
00105e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001060   ffe5
001062   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001064   ffd9
001066   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001068   ffe5
00106a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00106c   ffe5
00106e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001070   ffe5
001072   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001074   ffe5
001076   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001078   ffe5
00107a   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00107c   ffe5
00107e   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001080   ffe5
001082   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001084   ffe5
001086   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001088   ffe5
00108a   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
00108c   ffe5
00108e   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
001090   ffe5
001092   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
001094   ffe5
001096   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
001098   ffe5
00109a   0e02     movlw   0x2              	MOVLW	0x02
00109c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00109e   f000
0010a0   0e03     movlw   0x3              	MOVLW	0x03
0010a2   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0010a4   f001
0010a6   0e04     movlw   0x4              	MOVLW	0x04
0010a8   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0010aa   f002
0010ac   0e05     movlw   0x5              	MOVLW	0x05
0010ae   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0010b0   f003
0010b2   0e06     movlw   0x6              	MOVLW	0x06
0010b4   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
0010b6   f004
0010b8   0e07     movlw   0x7              	MOVLW	0x07
0010ba   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
0010bc   f005
                                           ;	.line	460; pillefyrsstyring.c	char xlate[] = "0123456789abcdef";
0010be   0e30     movlw   0x30             	MOVLW	0x30
0010c0   010f     movlb   0xf              	BANKSEL	_base64decode_xlate_1_149
0010c2   6f20     movwf   0x20, 0x1        	MOVWF	_base64decode_xlate_1_149, B
0010c4   0e31     movlw   0x31             	MOVLW	0x31
0010c6   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 1)
0010c8   6f21     movwf   0x21, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 1), B
0010ca   0e32     movlw   0x32             	MOVLW	0x32
0010cc   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 2)
0010ce   6f22     movwf   0x22, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 2), B
0010d0   0e33     movlw   0x33             	MOVLW	0x33
0010d2   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 3)
0010d4   6f23     movwf   0x23, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 3), B
0010d6   0e34     movlw   0x34             	MOVLW	0x34
0010d8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 4)
0010da   6f24     movwf   0x24, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 4), B
0010dc   0e35     movlw   0x35             	MOVLW	0x35
0010de   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 5)
0010e0   6f25     movwf   0x25, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 5), B
0010e2   0e36     movlw   0x36             	MOVLW	0x36
0010e4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 6)
0010e6   6f26     movwf   0x26, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 6), B
0010e8   0e37     movlw   0x37             	MOVLW	0x37
0010ea   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 7)
0010ec   6f27     movwf   0x27, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 7), B
0010ee   0e38     movlw   0x38             	MOVLW	0x38
0010f0   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 8)
0010f2   6f28     movwf   0x28, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 8), B
0010f4   0e39     movlw   0x39             	MOVLW	0x39
0010f6   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 9)
0010f8   6f29     movwf   0x29, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 9), B
0010fa   0e61     movlw   0x61             	MOVLW	0x61
0010fc   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 10)
0010fe   6f2a     movwf   0x2a, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 10), B
001100   0e62     movlw   0x62             	MOVLW	0x62
001102   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 11)
001104   6f2b     movwf   0x2b, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 11), B
001106   0e63     movlw   0x63             	MOVLW	0x63
001108   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 12)
00110a   6f2c     movwf   0x2c, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 12), B
00110c   0e64     movlw   0x64             	MOVLW	0x64
00110e   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 13)
001110   6f2d     movwf   0x2d, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 13), B
001112   0e65     movlw   0x65             	MOVLW	0x65
001114   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 14)
001116   6f2e     movwf   0x2e, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 14), B
001118   0e66     movlw   0x66             	MOVLW	0x66
00111a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 15)
00111c   6f2f     movwf   0x2f, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 15), B
00111e   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 16)
001120   6b30     clrf    0x30, 0x1        	CLRF	(_base64decode_xlate_1_149 + 16), B
                                           _00351_DS_:
                                           ;	.line	462; pillefyrsstyring.c	while (*h) {
001122   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001124   ffe9
001126   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001128   fff3
00112a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00112c   ecb5     call    0x2d6a, 0        	CALL	__gptrget1
00112e   f016
001130   6e06     movwf   0x6, 0           	MOVWF	r0x06
001132   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001134   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001136   d060     bra     0x11f8           	BRA	_00354_DS_
                                           ;	.line	463; pillefyrsstyring.c	*b = ((strchr(xlate, *h) - xlate) * 16) /* multiply leading digit by 16 */
001138   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
00113a   6e08     movwf   0x8, 0           	MOVWF	r0x08
00113c   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
00113e   6e07     movwf   0x7, 0           	MOVWF	r0x07
001140   0e80     movlw   0x80             	MOVLW	0x80
001142   6e09     movwf   0x9, 0           	MOVWF	r0x09
001144   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001146   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001148   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
00114a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00114c   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00114e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001150   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001152   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001154   eca9     call    0x2352, 0        	CALL	_strchr
001156   f011
001158   6e06     movwf   0x6, 0           	MOVWF	r0x06
00115a   cff3     movff   0xff3, 0x7       	MOVFF	PRODL, r0x07
00115c   f007
00115e   cff4     movff   0xff4, 0x8       	MOVFF	PRODH, r0x08
001160   f008
001162   0e04     movlw   0x4              	MOVLW	0x04
001164   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001166   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
001168   5e06     subwf   0x6, 0x1, 0      	SUBWF	r0x06, F
00116a   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
00116c   5a07     subwfb  0x7, 0x1, 0      	SUBWFB	r0x07, F
                                           ; ;multiply lit val:0x10 by variable r0x06 and store in r0x06
00116e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001170   0d10     mullw   0x10             	MULLW	0x10
001172   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
001174   f006
                                           ;	.line	464; pillefyrsstyring.c	+ ((strchr(xlate, *(h+1)) - xlate));
001176   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001178   6e08     movwf   0x8, 0           	MOVWF	r0x08
00117a   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
00117c   6e07     movwf   0x7, 0           	MOVWF	r0x07
00117e   0e80     movlw   0x80             	MOVLW	0x80
001180   6e09     movwf   0x9, 0           	MOVWF	r0x09
001182   5000     movf    0, 0, 0          	MOVF	r0x00, W
001184   0f01     addlw   0x1              	ADDLW	0x01
001186   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001188   0e00     movlw   0                	MOVLW	0x00
00118a   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
00118c   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
00118e   0e00     movlw   0                	MOVLW	0x00
001190   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
001192   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001194   c00a     movff   0xa, 0xfe9       	MOVFF	r0x0a, FSR0L
001196   ffe9
001198   c00b     movff   0xb, 0xff3       	MOVFF	r0x0b, PRODL
00119a   fff3
00119c   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
00119e   ecb5     call    0x2d6a, 0        	CALL	__gptrget1
0011a0   f016
0011a2   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0011a4   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0011a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011a8   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0011aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011ac   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0011ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011b0   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0011b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011b4   eca9     call    0x2352, 0        	CALL	_strchr
0011b6   f011
0011b8   6e07     movwf   0x7, 0           	MOVWF	r0x07
0011ba   cff3     movff   0xff3, 0x8       	MOVFF	PRODL, r0x08
0011bc   f008
0011be   cff4     movff   0xff4, 0x9       	MOVFF	PRODH, r0x09
0011c0   f009
0011c2   0e04     movlw   0x4              	MOVLW	0x04
0011c4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0011c6   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
0011c8   5e07     subwf   0x7, 0x1, 0      	SUBWF	r0x07, F
0011ca   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
0011cc   5a08     subwfb  0x8, 0x1, 0      	SUBWFB	r0x08, F
0011ce   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0011d0   2606     addwf   0x6, 0x1, 0      	ADDWF	r0x06, F
0011d2   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0011d4   ffe5
0011d6   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0011d8   ffe9
0011da   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0011dc   fff3
0011de   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0011e0   ece3     call    0x2dc6, 0        	CALL	__gptrput1
0011e2   f016
                                           ;	.line	465; pillefyrsstyring.c	h += 2;
0011e4   0e02     movlw   0x2              	MOVLW	0x02
0011e6   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0011e8   0e00     movlw   0                	MOVLW	0x00
0011ea   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0011ec   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
                                           ;	.line	466; pillefyrsstyring.c	b++;
0011ee   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0011f0   e398     bnc     0x1122           	BNC	_00351_DS_
0011f2   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
0011f4   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
                                           _00363_DS_:
0011f6   d795     bra     0x1122           	BRA	_00351_DS_
                                           _00354_DS_:
0011f8   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0011fa   f00c
0011fc   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0011fe   f00b
001200   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001202   f00a
001204   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001206   f009
001208   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00120a   f008
00120c   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00120e   f007
001210   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001212   f006
001214   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001216   f005
001218   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00121a   f004
00121c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00121e   f003
001220   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001222   f002
001224   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001226   f001
001228   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00122a   f000
00122c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00122e   ffd9
001230   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_get	code
                                           _fifo_get:
                                           ;	.line	445; pillefyrsstyring.c	unsigned char fifo_get(unsigned char *c) {
002028   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00202a   ffe5
00202c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00202e   ffd9
002030   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002032   ffe5
002034   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002036   ffe5
002038   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00203a   ffe5
00203c   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00203e   ffe5
002040   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
002042   ffe5
002044   0e02     movlw   0x2              	MOVLW	0x02
002046   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002048   f000
00204a   0e03     movlw   0x3              	MOVLW	0x03
00204c   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00204e   f001
002050   0e04     movlw   0x4              	MOVLW	0x04
002052   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
002054   f002
                                           ;	.line	446; pillefyrsstyring.c	if (fifo_in_use() != 0) {
002056   ecbc     call    0x2b78, 0        	CALL	_fifo_in_use
002058   f015
00205a   6e03     movwf   0x3, 0           	MOVWF	r0x03
00205c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00205e   e02d     bz      0x20ba           	BZ	_00344_DS_
                                           ;	.line	447; pillefyrsstyring.c	*c = fifo_buffer[fifo_tail++ % QUEUE_SIZE];
002060   c805     movff   0x805, 0x3       	MOVFF	_fifo_tail, r0x03
002062   f003
002064   c806     movff   0x806, 0x4       	MOVFF	(_fifo_tail + 1), r0x04
002066   f004
002068   0108     movlb   0x8              	BANKSEL	_fifo_tail
00206a   3f05     incfsz  0x5, 0x1, 0x1    	INCFSZ	_fifo_tail, F, B
00206c   d002     bra     0x2072           	BRA	_10392_DS_
00206e   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
002070   2b06     incf    0x6, 0x1, 0x1    	INCF	(_fifo_tail + 1), F, B
                                           _10392_DS_:
002072   0e00     movlw   0                	MOVLW	0x00
002074   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002076   0e64     movlw   0x64             	MOVLW	0x64
002078   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00207a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00207c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00207e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
002080   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002082   ecb7     call    0x1f6e, 0        	CALL	__moduint
002084   f00f
002086   6e03     movwf   0x3, 0           	MOVWF	r0x03
002088   cff3     movff   0xff3, 0x4       	MOVFF	PRODL, r0x04
00208a   f004
00208c   0e04     movlw   0x4              	MOVLW	0x04
00208e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002090   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
002092   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
002094   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002096   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
002098   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00209a   ffe9
00209c   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00209e   ffea
0020a0   cfef     movff   0xfef, 0x3       	MOVFF	INDF0, r0x03
0020a2   f003
0020a4   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0020a6   ffe5
0020a8   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0020aa   ffe9
0020ac   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0020ae   fff3
0020b0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0020b2   ece3     call    0x2dc6, 0        	CALL	__gptrput1
0020b4   f016
                                           ;	.line	448; pillefyrsstyring.c	return 1;
0020b6   0e01     movlw   0x1              	MOVLW	0x01
0020b8   d001     bra     0x20bc           	BRA	_00346_DS_
                                           _00344_DS_:
                                           ;	.line	451; pillefyrsstyring.c	return 0;
0020ba   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00346_DS_:
0020bc   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0020be   f004
0020c0   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0020c2   f003
0020c4   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0020c6   f002
0020c8   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0020ca   f001
0020cc   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0020ce   f000
0020d0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020d2   ffd9
0020d4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_put	code
                                           _fifo_put:
                                           ;	.line	435; pillefyrsstyring.c	unsigned char fifo_put(unsigned char c) {
0023e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0023ea   ffe5
0023ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0023ee   ffd9
0023f0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0023f2   ffe5
0023f4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0023f6   ffe5
0023f8   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0023fa   ffe5
0023fc   0e02     movlw   0x2              	MOVLW	0x02
0023fe   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002400   f000
                                           ;	.line	436; pillefyrsstyring.c	if (fifo_in_use() != QUEUE_SIZE) {
002402   ecbc     call    0x2b78, 0        	CALL	_fifo_in_use
002404   f015
002406   6e01     movwf   0x1, 0           	MOVWF	r0x01
002408   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00240a   0a64     xorlw   0x64             	XORLW	0x64
00240c   e024     bz      0x2456           	BZ	_00330_DS_
                                           ;	.line	437; pillefyrsstyring.c	fifo_buffer[fifo_head++ % QUEUE_SIZE] = c;
00240e   c803     movff   0x803, 0x1       	MOVFF	_fifo_head, r0x01
002410   f001
002412   c804     movff   0x804, 0x2       	MOVFF	(_fifo_head + 1), r0x02
002414   f002
002416   0108     movlb   0x8              	BANKSEL	_fifo_head
002418   3f03     incfsz  0x3, 0x1, 0x1    	INCFSZ	_fifo_head, F, B
00241a   d002     bra     0x2420           	BRA	_20393_DS_
00241c   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
00241e   2b04     incf    0x4, 0x1, 0x1    	INCF	(_fifo_head + 1), F, B
                                           _20393_DS_:
002420   0e00     movlw   0                	MOVLW	0x00
002422   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002424   0e64     movlw   0x64             	MOVLW	0x64
002426   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002428   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00242a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00242c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00242e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002430   ecb7     call    0x1f6e, 0        	CALL	__moduint
002432   f00f
002434   6e01     movwf   0x1, 0           	MOVWF	r0x01
002436   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
002438   f002
00243a   0e04     movlw   0x4              	MOVLW	0x04
00243c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00243e   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
002440   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
002442   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002444   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
002446   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
002448   ffe9
00244a   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
00244c   ffea
00244e   c000     movff   0, 0xfef         	MOVFF	r0x00, INDF0
002450   ffef
                                           ;	.line	438; pillefyrsstyring.c	return 1;
002452   0e01     movlw   0x1              	MOVLW	0x01
002454   d001     bra     0x2458           	BRA	_00332_DS_
                                           _00330_DS_:
                                           ;	.line	441; pillefyrsstyring.c	return 0;
002456   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00332_DS_:
002458   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00245a   f002
00245c   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00245e   f001
002460   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002462   f000
002464   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002466   ffd9
002468   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_in_use	code
                                           _fifo_in_use:
                                           ;	.line	431; pillefyrsstyring.c	unsigned char fifo_in_use() {
002b78   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b7a   ffe5
002b7c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b7e   ffd9
002b80   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b82   ffe5
002b84   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b86   ffe5
002b88   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	432; pillefyrsstyring.c	return fifo_head - fifo_tail;
002b8a   5103     movf    0x3, 0, 0x1      	MOVF	_fifo_head, W, B
002b8c   6e00     movwf   0, 0             	MOVWF	r0x00
002b8e   0108     movlb   0x8              	BANKSEL	_fifo_tail
002b90   5105     movf    0x5, 0, 0x1      	MOVF	_fifo_tail, W, B
002b92   6e01     movwf   0x1, 0           	MOVWF	r0x01
002b94   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002b96   5e00     subwf   0, 0x1, 0        	SUBWF	r0x00, F
002b98   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b9a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002b9c   f001
002b9e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002ba0   f000
002ba2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ba4   ffd9
002ba6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	401; pillefyrsstyring.c	void my_usart_open() {
002c32   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c34   ffe5
002c36   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c38   ffd9
                                           ;	.line	402; pillefyrsstyring.c	SPBRG = 103;					// 8MHz => 19230 baud
002c3a   0e67     movlw   0x67             	MOVLW	0x67
002c3c   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	403; pillefyrsstyring.c	TXSTAbits.BRGH = 1;	// (1 = high speed)
002c3e   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	404; pillefyrsstyring.c	TXSTAbits.SYNC = 0;	// (0 = asynchronous)
002c40   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	405; pillefyrsstyring.c	BAUDCONbits.BRG16 = 1;
002c42   86b8     bsf     0xb8, 0x3, 0     	BSF	_BAUDCONbits, 3
                                           ;	.line	408; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
002c44   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	411; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
002c46   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	412; pillefyrsstyring.c	IPR1bits.TXIP = 0; // USART Tx on low priority interrupt
002c48   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	415; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
002c4a   8a9d     bsf     0x9d, 0x5, 0     	BSF	_PIE1bits, 5
                                           ;	.line	416; pillefyrsstyring.c	IPR1bits.RCIP = 0; // USART Rx on low priority interrupt
002c4c   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	419; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
002c4e   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	422; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
002c50   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	425; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
002c52   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           ;	.line	428; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
002c54   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
002c56   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c58   ffd9
002c5a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	389; pillefyrsstyring.c	unsigned char get_inputs() {
002d22   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d24   ffe5
002d26   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d28   ffd9
002d2a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002d2c   ffe5
                                           ;	.line	393; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
002d2e   0eff     movlw   0xff             	MOVLW	0xff
002d30   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	394; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
002d32   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	395; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
002d34   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
002d36   f000
                                           ;	.line	396; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
002d38   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	398; pillefyrsstyring.c	return data;
002d3a   5000     movf    0, 0, 0          	MOVF	r0x00, W
002d3c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002d3e   f000
002d40   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d42   ffd9
002d44   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	371; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
0025b8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025ba   ffe5
0025bc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025be   ffd9
0025c0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0025c2   ffe5
0025c4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0025c6   ffe5
0025c8   0e02     movlw   0x2              	MOVLW	0x02
0025ca   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0025cc   f000
0025ce   0e03     movlw   0x3              	MOVLW	0x03
0025d0   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0025d2   f001
                                           ;	.line	372; pillefyrsstyring.c	header_mask &= (EXT_FEEDER_L1 | FAN_L2 | INT_FEEDER_L3 |HEATER_L4 | L5 | L6);	// BUG HERE! turning on L1 or L6 restarts
0025d4   0e3f     movlw   0x3f             	MOVLW	0x3f
0025d6   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	374; pillefyrsstyring.c	value &= header_mask;
0025d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025da   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	375; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
0025dc   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	376; pillefyrsstyring.c	if (value) {	// set it
0025de   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0025e0   e006     bz      0x25ee           	BZ	_00307_DS_
                                           ;	.line	377; pillefyrsstyring.c	_latch_2_data |= header_mask;
0025e2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025e4   0108     movlb   0x8              	BANKSEL	__latch_2_data
0025e6   1314     iorwf   0x14, 0x1, 0x1   	IORWF	__latch_2_data, F, B
                                           ;	.line	378; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
0025e8   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
0025ea   ff8c
0025ec   d006     bra     0x25fa           	BRA	_00308_DS_
                                           _00307_DS_:
                                           ;	.line	381; pillefyrsstyring.c	_latch_2_data &= ~header_mask;
0025ee   1e00     comf    0, 0x1, 0        	COMF	r0x00, F
0025f0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025f2   0108     movlb   0x8              	BANKSEL	__latch_2_data
0025f4   1714     andwf   0x14, 0x1, 0x1   	ANDWF	__latch_2_data, F, B
                                           ;	.line	382; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
0025f6   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
0025f8   ff8c
                                           _00308_DS_:
                                           ;	.line	384; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
0025fa   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	385; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
0025fc   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	386; pillefyrsstyring.c	LATCH_DATA = 0x00;
0025fe   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002600   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002602   f001
002604   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002606   f000
002608   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00260a   ffd9
00260c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	351; pillefyrsstyring.c	void init_latches() {
002c5c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c5e   ffe5
002c60   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c62   ffd9
                                           ;	.line	352; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c64   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	353; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
002c66   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	354; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
002c68   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	356; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
002c6a   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	357; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002c6c   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
002c6e   0108     movlb   0x8              	BANKSEL	__latch_2_data
                                           ;	.line	358; pillefyrsstyring.c	_latch_2_data = 0x00;
002c70   6b14     clrf    0x14, 0x1        	CLRF	__latch_2_data, B
                                           ;	.line	360; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
002c72   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	361; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
002c74   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	363; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
002c76   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	364; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
002c78   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	366; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
002c7a   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	367; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
002c7c   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
002c7e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c80   ffd9
002c82   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	297; pillefyrsstyring.c	void init_timers() {
002aa0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002aa2   ffe5
002aa4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002aa6   ffd9
                                           ;	.line	299; pillefyrsstyring.c	T0CONbits.TMR0ON = 1;
002aa8   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	300; pillefyrsstyring.c	T0CONbits.T0PS0 = 0;
002aaa   90d5     bcf     0xd5, 0, 0       	BCF	_T0CONbits, 0
                                           ;	.line	301; pillefyrsstyring.c	T0CONbits.T0PS1 = 0;
002aac   92d5     bcf     0xd5, 0x1, 0     	BCF	_T0CONbits, 1
                                           ;	.line	302; pillefyrsstyring.c	T0CONbits.T0PS2 = 0;	// prescaler 1:2
002aae   94d5     bcf     0xd5, 0x2, 0     	BCF	_T0CONbits, 2
                                           ;	.line	303; pillefyrsstyring.c	T0CONbits.T08BIT = 0;   // use timer0 16-bit counter
002ab0   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	304; pillefyrsstyring.c	T0CONbits.T0CS = 0;             // internal clock source
002ab2   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	305; pillefyrsstyring.c	T0CONbits.PSA = 0;              // enable timer0 prescaler
002ab4   96d5     bcf     0xd5, 0x3, 0     	BCF	_T0CONbits, 3
                                           ;	.line	306; pillefyrsstyring.c	INTCON2bits.TMR0IP = 1; // high priority
002ab6   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	307; pillefyrsstyring.c	INTCONbits.T0IE = 1;    // Ensure that TMR0 Interrupt is enabled
002ab8   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	308; pillefyrsstyring.c	INTCONbits.TMR0IF = 1;  // Force Instant entry to Timer 0 Interrupt
002aba   84f2     bsf     0xf2, 0x2, 0     	BSF	_INTCONbits, 2
                                           ;	.line	311; pillefyrsstyring.c	T1CONbits.TMR1ON = 1;
002abc   80cd     bsf     0xcd, 0, 0       	BSF	_T1CONbits, 0
                                           ;	.line	312; pillefyrsstyring.c	T1CONbits.RD16 = 1;
002abe   8ecd     bsf     0xcd, 0x7, 0     	BSF	_T1CONbits, 7
                                           ;	.line	313; pillefyrsstyring.c	T1CONbits.TMR1CS = 0;   // internal clock source
002ac0   92cd     bcf     0xcd, 0x1, 0     	BCF	_T1CONbits, 1
                                           ;	.line	314; pillefyrsstyring.c	T1CONbits.T1OSCEN = 0;  // dont put t1 on pin
002ac2   96cd     bcf     0xcd, 0x3, 0     	BCF	_T1CONbits, 3
                                           ;	.line	315; pillefyrsstyring.c	T1CONbits.T1CKPS0 = 1;
002ac4   88cd     bsf     0xcd, 0x4, 0     	BSF	_T1CONbits, 4
                                           ;	.line	316; pillefyrsstyring.c	T1CONbits.T1CKPS1 = 1;
002ac6   8acd     bsf     0xcd, 0x5, 0     	BSF	_T1CONbits, 5
                                           ;	.line	317; pillefyrsstyring.c	IPR1bits.TMR1IP = 0;	// low priority
002ac8   909f     bcf     0x9f, 0, 0       	BCF	_IPR1bits, 0
                                           ;	.line	318; pillefyrsstyring.c	PIE1bits.TMR1IE = 1;	// Ensure that TMR1 Interrupt is enabled
002aca   809d     bsf     0x9d, 0, 0       	BSF	_PIE1bits, 0
                                           ;	.line	319; pillefyrsstyring.c	PIR1bits.TMR1IF = 1;	// Force Instant entry to Timer 1 Interrupt
002acc   809e     bsf     0x9e, 0, 0       	BSF	_PIR1bits, 0
                                           ;	.line	347; pillefyrsstyring.c	INTCONbits.PEIE = 1;
002ace   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	348; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
002ad0   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
002ad2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ad4   ffd9
002ad6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	287; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
001692   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001694   ffe5
001696   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001698   ffd9
00169a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00169c   ffe5
00169e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0016a0   ffe5
0016a2   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0016a4   ffe5
0016a6   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0016a8   ffe5
0016aa   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0016ac   ffe5
0016ae   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0016b0   ffe5
0016b2   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0016b4   ffe5
0016b6   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0016b8   ffe5
0016ba   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0016bc   ffe5
0016be   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
0016c0   ffe5
0016c2   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
0016c4   ffe5
0016c6   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
0016c8   ffe5
0016ca   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
0016cc   ffe5
0016ce   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
0016d0   ffe5
0016d2   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
0016d4   ffe5
0016d6   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
0016d8   ffe5
0016da   0e02     movlw   0x2              	MOVLW	0x02
0016dc   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0016de   f000
0016e0   0e03     movlw   0x3              	MOVLW	0x03
0016e2   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0016e4   f001
0016e6   0e04     movlw   0x4              	MOVLW	0x04
0016e8   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0016ea   f002
0016ec   0e05     movlw   0x5              	MOVLW	0x05
0016ee   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0016f0   f003
                                           ;	.line	289; pillefyrsstyring.c	start_timer_1_ms = timer_1_ms;	
0016f2   cf67     movff   0xf67, 0x4       	MOVFF	_timer_1_ms, r0x04
0016f4   f004
0016f6   cf68     movff   0xf68, 0x5       	MOVFF	(_timer_1_ms + 1), r0x05
0016f8   f005
0016fa   cf69     movff   0xf69, 0x6       	MOVFF	(_timer_1_ms + 2), r0x06
0016fc   f006
0016fe   cf6a     movff   0xf6a, 0x7       	MOVFF	(_timer_1_ms + 3), r0x07
001700   f007
                                           _00278_DS_:
                                           ;	.line	292; pillefyrsstyring.c	while ( (((signed long)(timer_1_ms - start_timer_1_ms) < 0) ? (-1 * (timer_1_ms - start_timer_1_ms)) : (timer_1_ms - start_timer_1_ms)) < ms) {
001702   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001704   010f     movlb   0xf              	BANKSEL	_timer_1_ms
001706   5d67     subwf   0x67, 0, 0x1     	SUBWF	_timer_1_ms, W, B
001708   6e08     movwf   0x8, 0           	MOVWF	r0x08
00170a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00170c   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00170e   5968     subwfb  0x68, 0, 0x1     	SUBWFB	(_timer_1_ms + 1), W, B
001710   6e09     movwf   0x9, 0           	MOVWF	r0x09
001712   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001714   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
001716   5969     subwfb  0x69, 0, 0x1     	SUBWFB	(_timer_1_ms + 2), W, B
001718   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
00171a   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00171c   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
00171e   596a     subwfb  0x6a, 0, 0x1     	SUBWFB	(_timer_1_ms + 3), W, B
001720   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
001722   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001724   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001726   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001728   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
00172a   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
00172c   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
00172e   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
001730   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
001732   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
001734   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
001736   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
001738   e31c     bnc     0x1772           	BNC	_00283_DS_
00173a   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
00173c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00173e   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
001740   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001742   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001744   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001746   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001748   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00174a   0eff     movlw   0xff             	MOVLW	0xff
00174c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00174e   0eff     movlw   0xff             	MOVLW	0xff
001750   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001752   0eff     movlw   0xff             	MOVLW	0xff
001754   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001756   0eff     movlw   0xff             	MOVLW	0xff
001758   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00175a   ec25     call    0xc4a, 0         	CALL	__mullong
00175c   f006
00175e   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001760   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
001762   f00d
001764   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
001766   f00e
001768   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
00176a   f00f
00176c   0e08     movlw   0x8              	MOVLW	0x08
00176e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001770   d008     bra     0x1782           	BRA	_00284_DS_
                                           _00283_DS_:
001772   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
001774   f00c
001776   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
001778   f00d
00177a   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
00177c   f00e
00177e   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
001780   f00f
                                           _00284_DS_:
001782   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001784   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
001786   e108     bnz     0x1798           	BNZ	_00291_DS_
001788   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00178a   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
00178c   e105     bnz     0x1798           	BNZ	_00291_DS_
00178e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001790   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
001792   e102     bnz     0x1798           	BNZ	_00291_DS_
001794   5000     movf    0, 0, 0          	MOVF	r0x00, W
001796   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00291_DS_:
001798   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00179a   d7b3     bra     0x1702           	BRA	_00278_DS_
00179c   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
00179e   f00f
0017a0   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
0017a2   f00e
0017a4   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
0017a6   f00d
0017a8   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0017aa   f00c
0017ac   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0017ae   f00b
0017b0   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0017b2   f00a
0017b4   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
0017b6   f009
0017b8   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0017ba   f008
0017bc   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0017be   f007
0017c0   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0017c2   f006
0017c4   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0017c6   f005
0017c8   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0017ca   f004
0017cc   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0017ce   f003
0017d0   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0017d2   f002
0017d4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0017d6   f001
0017d8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0017da   f000
0017dc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0017de   ffd9
0017e0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_low_prio	code
                                           _isr_low_prio:
                                           ;	.line	261; pillefyrsstyring.c	static void isr_low_prio(void) __interrupt 2 {
00221a   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
00221c   ffe5
00221e   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
002220   ffe5
002222   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002224   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
002226   ffe5
002228   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
00222a   ffe5
00222c   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
00222e   ffe5
002230   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
002232   ffe5
002234   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
002236   ffe5
002238   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
00223a   ffe5
00223c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00223e   ffe5
002240   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002242   ffd9
002244   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002246   ffe5
                                           ;	.line	263; pillefyrsstyring.c	if (PIR1bits.TMR1IF) {
002248   a09e     btfss   0x9e, 0, 0       	BTFSS	_PIR1bits, 0
00224a   d010     bra     0x226c           	BRA	_00262_DS_
                                           ;	.line	264; pillefyrsstyring.c	TMR1H = (unsigned char)(TIMER1_RELOAD >> 8);    // 1 ms delay at 8 MHz
00224c   0efe     movlw   0xfe             	MOVLW	0xfe
00224e   6ecf     movwf   0xcf, 0          	MOVWF	_TMR1H
                                           ;	.line	265; pillefyrsstyring.c	TMR1L = (unsigned char)TIMER1_RELOAD;
002250   0ec8     movlw   0xc8             	MOVLW	0xc8
002252   6ece     movwf   0xce, 0          	MOVWF	_TMR1L
                                           ;	.line	266; pillefyrsstyring.c	PIR1bits.TMR1IF = 0;    /* Clear the Timer Flag  */
002254   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
002256   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	267; pillefyrsstyring.c	timer_1_ms++;
002258   2b67     incf    0x67, 0x1, 0x1   	INCF	_timer_1_ms, F, B
00225a   e308     bnc     0x226c           	BNC	_00262_DS_
00225c   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00225e   2b68     incf    0x68, 0x1, 0x1   	INCF	(_timer_1_ms + 1), F, B
002260   e305     bnc     0x226c           	BNC	_00262_DS_
002262   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
002264   3f69     incfsz  0x69, 0x1, 0x1   	INCFSZ	(_timer_1_ms + 2), F, B
002266   d002     bra     0x226c           	BRA	_30394_DS_
002268   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
00226a   2b6a     incf    0x6a, 0x1, 0x1   	INCF	(_timer_1_ms + 3), F, B
                                           _30394_DS_:
                                           _00273_DS_:
                                           _00262_DS_:
                                           ;	.line	271; pillefyrsstyring.c	if (usart_drdy()) {
00226c   ec2a     call    0x2e54, 0        	CALL	_usart_drdy
00226e   f017
002270   6e00     movwf   0, 0             	MOVWF	r0x00
002272   5000     movf    0, 0, 0          	MOVF	r0x00, W
002274   e00b     bz      0x228c           	BZ	_00265_DS_
                                           ;	.line	273; pillefyrsstyring.c	c = usart_getc();
002276   ec6a     call    0x2cd4, 0        	CALL	_usart_getc
002278   f016
00227a   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	274; pillefyrsstyring.c	fifo_put(c);
00227c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00227e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002280   ecf4     call    0x23e8, 0        	CALL	_fifo_put
002282   f011
002284   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	275; pillefyrsstyring.c	usart_putc(c);
002286   5000     movf    0, 0, 0          	MOVF	r0x00, W
002288   ec13     call    0x2e26, 0        	CALL	_usart_putc
00228a   f017
                                           _00265_DS_:
00228c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00228e   f000
002290   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002292   ffd9
002294   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002296   fffb
002298   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00229a   fffa
00229c   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00229e   ffea
0022a0   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0022a2   ffe9
0022a4   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0022a6   fff4
0022a8   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0022aa   fff3
0022ac   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0022ae   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0022b0   ffe0
0022b2   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0022b4   ffd8
0022b6   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_high_prio	code
                                           _isr_high_prio:
                                           ;	.line	227; pillefyrsstyring.c	static void isr_high_prio(void) __interrupt 1 {
0013ea   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0013ec   ffe5
0013ee   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0013f0   ffe5
0013f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013f4   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0013f6   ffe5
0013f8   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0013fa   ffe5
0013fc   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0013fe   ffe5
001400   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
001402   ffe5
001404   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001406   ffe5
001408   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
00140a   ffe5
00140c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00140e   ffe5
001410   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001412   ffd9
001414   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001416   ffe5
001418   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00141a   ffe5
                                           ;	.line	228; pillefyrsstyring.c	if (INTCONbits.TMR0IF) {
00141c   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
00141e   d057     bra     0x14ce           	BRA	_00237_DS_
                                           ;	.line	229; pillefyrsstyring.c	TMR0H = (unsigned char)(TIMER0_RELOAD >> 8);
001420   0efd     movlw   0xfd             	MOVLW	0xfd
001422   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	230; pillefyrsstyring.c	TMR0L = (unsigned char)TIMER0_RELOAD;   /* Reload the Timer ASAP */
001424   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
                                           ;	.line	231; pillefyrsstyring.c	INTCONbits.TMR0IF = 0;  /* Clear the Timer Flag  */
001426   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	234; pillefyrsstyring.c	sensor_inputs = get_inputs();
001428   ec91     call    0x2d22, 0        	CALL	_get_inputs
00142a   f016
00142c   0108     movlb   0x8              	BANKSEL	_sensor_inputs
00142e   6f13     movwf   0x13, 0x1        	MOVWF	_sensor_inputs, B
001430   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	237; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
001432   6b07     clrf    0x7, 0x1         	CLRF	_i, B
001434   0108     movlb   0x8              	BANKSEL	(_i + 1)
001436   6b08     clrf    0x8, 0x1         	CLRF	(_i + 1), B
                                           _00235_DS_:
                                           ;	.line	238; pillefyrsstyring.c	if (ac_power_pwm_counter < output_ac_power_pwm[i]) {
001438   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
00143a   0108     movlb   0x8              	BANKSEL	_i
00143c   2507     addwf   0x7, 0, 0x1      	ADDWF	_i, W, B
00143e   6e00     movwf   0, 0             	MOVWF	r0x00
001440   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
001442   0108     movlb   0x8              	BANKSEL	(_i + 1)
001444   2108     addwfc  0x8, 0, 0x1      	ADDWFC	(_i + 1), W, B
001446   6e01     movwf   0x1, 0           	MOVWF	r0x01
001448   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00144a   ffe9
00144c   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
00144e   ffea
001450   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
001452   f000
001454   5000     movf    0, 0, 0          	MOVF	r0x00, W
001456   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
001458   5d10     subwf   0x10, 0, 0x1     	SUBWF	_ac_power_pwm_counter, W, B
00145a   e215     bc      0x1486           	BC	_00230_DS_
                                           ;	.line	240; pillefyrsstyring.c	set_ac_power(1 << i, 0xff);
00145c   0e01     movlw   0x1              	MOVLW	0x01
00145e   6e00     movwf   0, 0             	MOVWF	r0x00
001460   6a01     clrf    0x1, 0           	CLRF	r0x01
001462   0108     movlb   0x8              	BANKSEL	_i
001464   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
001466   e006     bz      0x1474           	BZ	_00252_DS_
001468   6ce8     negf    0xe8, 0          	NEGF	WREG
00146a   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00253_DS_:
00146c   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
00146e   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001470   0f01     addlw   0x1              	ADDLW	0x01
001472   e3fc     bnc     0x146c           	BNC	_00253_DS_
                                           _00252_DS_:
001474   0eff     movlw   0xff             	MOVLW	0xff
001476   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001478   5000     movf    0, 0, 0          	MOVF	r0x00, W
00147a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00147c   ecdc     call    0x25b8, 0        	CALL	_set_ac_power
00147e   f012
001480   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001482   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001484   d014     bra     0x14ae           	BRA	_00236_DS_
                                           _00230_DS_:
                                           ;	.line	249; pillefyrsstyring.c	set_ac_power(1 << i, 0x00);
001486   0e01     movlw   0x1              	MOVLW	0x01
001488   6e00     movwf   0, 0             	MOVWF	r0x00
00148a   6a01     clrf    0x1, 0           	CLRF	r0x01
00148c   0108     movlb   0x8              	BANKSEL	_i
00148e   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
001490   e006     bz      0x149e           	BZ	_00254_DS_
001492   6ce8     negf    0xe8, 0          	NEGF	WREG
001494   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00255_DS_:
001496   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
001498   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
00149a   0f01     addlw   0x1              	ADDLW	0x01
00149c   e3fc     bnc     0x1496           	BNC	_00255_DS_
                                           _00254_DS_:
00149e   0e00     movlw   0                	MOVLW	0x00
0014a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014a2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0014a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014a6   ecdc     call    0x25b8, 0        	CALL	_set_ac_power
0014a8   f012
0014aa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0014ac   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00236_DS_:
0014ae   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	237; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
0014b0   3f07     incfsz  0x7, 0x1, 0x1    	INCFSZ	_i, F, B
0014b2   d002     bra     0x14b8           	BRA	_40395_DS_
0014b4   0108     movlb   0x8              	BANKSEL	(_i + 1)
0014b6   2b08     incf    0x8, 0x1, 0x1    	INCF	(_i + 1), F, B
                                           _40395_DS_:
0014b8   0e00     movlw   0                	MOVLW	0x00
0014ba   0108     movlb   0x8              	BANKSEL	(_i + 1)
0014bc   5d08     subwf   0x8, 0, 0x1      	SUBWF	(_i + 1), W, B
0014be   e103     bnz     0x14c6           	BNZ	_00256_DS_
0014c0   0e06     movlw   0x6              	MOVLW	0x06
0014c2   0108     movlb   0x8              	BANKSEL	_i
0014c4   5d07     subwf   0x7, 0, 0x1      	SUBWF	_i, W, B
                                           _00256_DS_:
0014c6   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0014c8   d7b7     bra     0x1438           	BRA	_00235_DS_
0014ca   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	257; pillefyrsstyring.c	ac_power_pwm_counter++;
0014cc   2b10     incf    0x10, 0x1, 0x1   	INCF	_ac_power_pwm_counter, F, B
                                           _00237_DS_:
0014ce   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0014d0   f001
0014d2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0014d4   f000
0014d6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014d8   ffd9
0014da   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0014dc   fffb
0014de   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0014e0   fffa
0014e2   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0014e4   ffea
0014e6   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0014e8   ffe9
0014ea   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0014ec   fff4
0014ee   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0014f0   fff3
0014f2   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0014f4   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0014f6   ffe0
0014f8   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0014fa   ffd8
0014fc   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0014fe   704f     btg     0x4f, 0, 0       	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
001500   6e65     movwf   0x65, 0          
001502   7453     btg     0x53, 0x2, 0     
001504   6b6f     clrf    0x6f, 0x1        
001506   7265     btg     0x65, 0x1, 0     
001508   7320     btg     0x20, 0x1, 0x1   
00150a   6174     cpfslt  0x74, 0x1        	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x20, 0x73
00150c   7472     btg     0x72, 0x2, 0     
00150e   6e69     movwf   0x69, 0          
001510   2e67     decfsz  0x67, 0x1, 0     
001512   2e2e     decfsz  0x2e, 0x1, 0     
001514   7320     btg     0x20, 0x1, 0x1   
001516   7265     btg     0x65, 0x1, 0     	DB	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e
001518   6169     cpfslt  0x69, 0x1        
00151a   206c     addwfc  0x6c, 0, 0       
00151c   6f77     movwf   0x77, 0x1        
00151e   6b72     clrf    0x72, 0x1        
001520   6e69     movwf   0x69, 0          
001522   0a67     xorlw   0x67             	DB	0x67, 0x0a, 0x0d, 0x00
001524   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_1:
001526   0d0a     mullw   0xa              	DB	0x0a, 0x0d, 0x00
001528   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
00152a   2567     addwf   0x67, 0, 0x1     	DB	0x67, 0x25, 0x30, 0x32, 0x78, 0x0a, 0x0d, 0x00
00152c   3230     rrcf    0x30, 0x1, 0     
00152e   0a78     xorlw   0x78             
001530   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_3:
001532   6461     cpfsgt  0x61, 0          	DB	0x61, 0x64, 0x25, 0x64, 0x3a, 0x20, 0x25, 0x30, 0x34, 0x78, 0x0a, 0x0d
001534   6425     cpfsgt  0x25, 0          
001536   203a     addwfc  0x3a, 0, 0       
001538   3025     rrcf    0x25, 0, 0       
00153a   7834     btg     0x34, 0x4, 0     
00153c   0d0a     mullw   0xa              
00153e   0000     nop                      	DB	0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3378 (0x0d32) bytes ( 2.58%)
                                           ;           	 1689 (0x0699) words
                                           ; udata size:	  202 (0x00ca) bytes ( 5.26%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Wed Dec 18 01:20:58 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	367; glcd.c	void latched_lcd_data(unsigned char value) {
002c84   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c86   ffe5
002c88   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c8a   ffd9
002c8c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c8e   ffe5
002c90   0e02     movlw   0x2              	MOVLW	0x02
002c92   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002c94   f000
                                           ;	.line	368; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c96   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; glcd.c	LATCH_DATA = value;
002c98   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
002c9a   ff8c
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_ENABLED;
002c9c   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_4 = LATCH_4_DISABLED;
002c9e   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	372; glcd.c	LATCH_DATA = 0x00;
002ca0   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002ca2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002ca4   f000
002ca6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ca8   ffd9
002caa   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	352; glcd.c	void latched_lcd_cs1(unsigned char value) {
002896   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002898   ffe5
00289a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00289c   ffd9
00289e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028a0   ffe5
0028a2   0e02     movlw   0x2              	MOVLW	0x02
0028a4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028a6   f000
                                           ;	.line	353; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028a8   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	354; glcd.c	if (value) {	// set it
0028aa   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028ac   e005     bz      0x28b8           	BZ	_00268_DS_
0028ae   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data |= 0b00100000;
0028b0   8b16     bsf     0x16, 0x5, 0x1   	BSF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
0028b2   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028b4   ff8c
0028b6   d004     bra     0x28c0           	BRA	_00269_DS_
                                           _00268_DS_:
0028b8   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	359; glcd.c	_latch_3_data &= 0b11011111;
0028ba   9b16     bcf     0x16, 0x5, 0x1   	BCF	__latch_3_data, 5, B
                                           ;	.line	360; glcd.c	LATCH_DATA = _latch_3_data;
0028bc   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028be   ff8c
                                           _00269_DS_:
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028c0   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028c2   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	364; glcd.c	LATCH_DATA = 0x00;
0028c4   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028c6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028c8   f000
0028ca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028cc   ffd9
0028ce   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	337; glcd.c	void latched_lcd_cs2(unsigned char value) {
0028d0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028d2   ffe5
0028d4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028d6   ffd9
0028d8   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028da   ffe5
0028dc   0e02     movlw   0x2              	MOVLW	0x02
0028de   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028e0   f000
                                           ;	.line	338; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028e2   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	339; glcd.c	if (value) {	// set it
0028e4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028e6   e005     bz      0x28f2           	BZ	_00260_DS_
0028e8   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data |= 0b00010000;
0028ea   8916     bsf     0x16, 0x4, 0x1   	BSF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
0028ec   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028ee   ff8c
0028f0   d004     bra     0x28fa           	BRA	_00261_DS_
                                           _00260_DS_:
0028f2   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	344; glcd.c	_latch_3_data &= 0b11101111;
0028f4   9916     bcf     0x16, 0x4, 0x1   	BCF	__latch_3_data, 4, B
                                           ;	.line	345; glcd.c	LATCH_DATA = _latch_3_data;
0028f6   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028f8   ff8c
                                           _00261_DS_:
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028fa   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028fc   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	349; glcd.c	LATCH_DATA = 0x00;
0028fe   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002900   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002902   f000
002904   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002906   ffd9
002908   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	322; glcd.c	void latched_lcd_rst(unsigned char value) {
00290a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00290c   ffe5
00290e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002910   ffd9
002912   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002914   ffe5
002916   0e02     movlw   0x2              	MOVLW	0x02
002918   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00291a   f000
                                           ;	.line	323; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00291c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	324; glcd.c	if (value) {	// set it
00291e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002920   e005     bz      0x292c           	BZ	_00252_DS_
002922   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data |= 0b00001000;
002924   8716     bsf     0x16, 0x3, 0x1   	BSF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
002926   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002928   ff8c
00292a   d004     bra     0x2934           	BRA	_00253_DS_
                                           _00252_DS_:
00292c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	329; glcd.c	_latch_3_data &= 0b11110111;
00292e   9716     bcf     0x16, 0x3, 0x1   	BCF	__latch_3_data, 3, B
                                           ;	.line	330; glcd.c	LATCH_DATA = _latch_3_data;
002930   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002932   ff8c
                                           _00253_DS_:
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002934   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002936   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	334; glcd.c	LATCH_DATA = 0x00;
002938   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00293a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00293c   f000
00293e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002940   ffd9
002942   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	307; glcd.c	void latched_lcd_rw(unsigned char value) {
002944   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002946   ffe5
002948   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00294a   ffd9
00294c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00294e   ffe5
002950   0e02     movlw   0x2              	MOVLW	0x02
002952   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002954   f000
                                           ;	.line	308; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002956   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	309; glcd.c	if (value) {	// set it
002958   5000     movf    0, 0, 0          	MOVF	r0x00, W
00295a   e005     bz      0x2966           	BZ	_00244_DS_
00295c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data |= 0b00000100;
00295e   8516     bsf     0x16, 0x2, 0x1   	BSF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
002960   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002962   ff8c
002964   d004     bra     0x296e           	BRA	_00245_DS_
                                           _00244_DS_:
002966   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	314; glcd.c	_latch_3_data &= 0b11111011;
002968   9516     bcf     0x16, 0x2, 0x1   	BCF	__latch_3_data, 2, B
                                           ;	.line	315; glcd.c	LATCH_DATA = _latch_3_data;
00296a   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00296c   ff8c
                                           _00245_DS_:
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00296e   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002970   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	319; glcd.c	LATCH_DATA = 0x00;
002972   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002974   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002976   f000
002978   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00297a   ffd9
00297c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	292; glcd.c	void latched_lcd_di(unsigned char value) {
00297e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002980   ffe5
002982   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002984   ffd9
002986   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002988   ffe5
00298a   0e02     movlw   0x2              	MOVLW	0x02
00298c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00298e   f000
                                           ;	.line	293; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002990   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; glcd.c	if (value) {	// set it
002992   5000     movf    0, 0, 0          	MOVF	r0x00, W
002994   e005     bz      0x29a0           	BZ	_00236_DS_
002996   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data |= 0b00000010;
002998   8316     bsf     0x16, 0x1, 0x1   	BSF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
00299a   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00299c   ff8c
00299e   d004     bra     0x29a8           	BRA	_00237_DS_
                                           _00236_DS_:
0029a0   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	299; glcd.c	_latch_3_data &= 0b11111101;
0029a2   9316     bcf     0x16, 0x1, 0x1   	BCF	__latch_3_data, 1, B
                                           ;	.line	300; glcd.c	LATCH_DATA = _latch_3_data;
0029a4   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029a6   ff8c
                                           _00237_DS_:
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0029a8   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029aa   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; glcd.c	LATCH_DATA = 0x00;
0029ac   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029ae   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029b0   f000
0029b2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029b4   ffd9
0029b6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	277; glcd.c	void latched_lcd_enable(unsigned char value) {
0029b8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029ba   ffe5
0029bc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029be   ffd9
0029c0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029c2   ffe5
0029c4   0e02     movlw   0x2              	MOVLW	0x02
0029c6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0029c8   f000
                                           ;	.line	278; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0029ca   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	279; glcd.c	if (value) {	// set it
0029cc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0029ce   e005     bz      0x29da           	BZ	_00228_DS_
0029d0   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data |= 0b00000001;
0029d2   8116     bsf     0x16, 0, 0x1     	BSF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
0029d4   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029d6   ff8c
0029d8   d004     bra     0x29e2           	BRA	_00229_DS_
                                           _00228_DS_:
0029da   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	284; glcd.c	_latch_3_data &= 0b11111110;
0029dc   9116     bcf     0x16, 0, 0x1     	BCF	__latch_3_data, 0, B
                                           ;	.line	285; glcd.c	LATCH_DATA = _latch_3_data;
0029de   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029e0   ff8c
                                           _00229_DS_:
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0029e2   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029e4   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	289; glcd.c	LATCH_DATA = 0x00;
0029e6   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029e8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029ea   f000
0029ec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029ee   ffd9
0029f0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	262; glcd.c	void latched_lcd_power(unsigned char value) {
0029f2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029f4   ffe5
0029f6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029f8   ffd9
0029fa   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029fc   ffe5
0029fe   0e02     movlw   0x2              	MOVLW	0x02
002a00   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002a02   f000
                                           ;	.line	263; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002a04   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	264; glcd.c	if (value) {	// set it
002a06   5000     movf    0, 0, 0          	MOVF	r0x00, W
002a08   e005     bz      0x2a14           	BZ	_00220_DS_
002a0a   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data |= 0b10000000;
002a0c   8f16     bsf     0x16, 0x7, 0x1   	BSF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
002a0e   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002a10   ff8c
002a12   d004     bra     0x2a1c           	BRA	_00221_DS_
                                           _00220_DS_:
002a14   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	269; glcd.c	_latch_3_data &= 0b01111111;
002a16   9f16     bcf     0x16, 0x7, 0x1   	BCF	__latch_3_data, 7, B
                                           ;	.line	270; glcd.c	LATCH_DATA = _latch_3_data;
002a18   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002a1a   ff8c
                                           _00221_DS_:
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002a1c   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002a1e   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	274; glcd.c	LATCH_DATA = 0x00;
002a20   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002a22   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002a24   f000
002a26   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a28   ffd9
002a2a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	242; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
0020d6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020d8   ffe5
0020da   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020dc   ffd9
0020de   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0020e0   ffe5
0020e2   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0020e4   ffe5
0020e6   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0020e8   ffe5
0020ea   0e02     movlw   0x2              	MOVLW	0x02
0020ec   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0020ee   f000
0020f0   0e03     movlw   0x3              	MOVLW	0x03
0020f2   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0020f4   f001
                                           ;	.line	247; glcd.c	if (rx & 64) {
0020f6   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
0020f8   d006     bra     0x2106           	BRA	_00203_DS_
                                           ;	.line	248; glcd.c	lcd_selectside(LCD_RIGHT);
0020fa   0e02     movlw   0x2              	MOVLW	0x02
0020fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020fe   ec59     call    0x26b2, 0        	CALL	_lcd_selectside
002100   f013
002102   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002104   d005     bra     0x2110           	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	251; glcd.c	lcd_selectside(LCD_LEFT);
002106   0e01     movlw   0x1              	MOVLW	0x01
002108   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00210a   ec59     call    0x26b2, 0        	CALL	_lcd_selectside
00210c   f013
00210e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	254; glcd.c	lcd_setpage( ry >> 3);		// fast /8
002110   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
002112   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002114   0b1f     andlw   0x1f             	ANDLW	0x1f
002116   6e02     movwf   0x2, 0           	MOVWF	r0x02
002118   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00211a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00211c   eca5     call    0x274a, 0        	CALL	_lcd_setpage
00211e   f013
002120   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_setyaddr( rx & 0b00111111);
002122   0e3f     movlw   0x3f             	MOVLW	0x3f
002124   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002126   5000     movf    0, 0, 0          	MOVF	r0x00, W
002128   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00212a   ec81     call    0x2702, 0        	CALL	_lcd_setyaddr
00212c   f013
00212e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	256; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
002130   ecee     call    0x2ddc, 0        	CALL	_lcd_read
002132   f016
                                           ;	.line	257; glcd.c	d = lcd_read();				// read again to transfer to pic
002134   ecee     call    0x2ddc, 0        	CALL	_lcd_read
002136   f016
002138   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	258; glcd.c	lcd_setyaddr( rx & 0b00111111); 
00213a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00213c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00213e   ec81     call    0x2702, 0        	CALL	_lcd_setyaddr
002140   f013
002142   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	259; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
002144   0e07     movlw   0x7              	MOVLW	0x07
002146   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
002148   0e01     movlw   0x1              	MOVLW	0x01
00214a   6e00     movwf   0, 0             	MOVWF	r0x00
00214c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00214e   e005     bz      0x215a           	BZ	_00213_DS_
002150   6ce8     negf    0xe8, 0          	NEGF	WREG
002152   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
002154   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
002156   0f01     addlw   0x1              	ADDLW	0x01
002158   e3fd     bnc     0x2154           	BNC	_00214_DS_
                                           _00213_DS_:
00215a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00215c   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
00215e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002160   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002162   ecc8     call    0x2790, 0        	CALL	_lcd_write
002164   f013
002166   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002168   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00216a   f002
00216c   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00216e   f001
002170   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002172   f000
002174   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002176   ffd9
002178   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	223; glcd.c	unsigned char lcd_read (void) {
002ddc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002dde   ffe5
002de0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002de2   ffd9
                                           ;	.line	237; glcd.c	lcd_enable();
002de4   ece9     call    0x27d2, 0        	CALL	_lcd_enable
002de6   f013
                                           ;	.line	238; glcd.c	return 0;
002de8   6ae8     clrf    0xe8, 0          	CLRF	WREG
002dea   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002dec   ffd9
002dee   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	198; glcd.c	void lcd_selectside(unsigned char sides) {
0026b2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026b4   ffe5
0026b6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026b8   ffd9
0026ba   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0026bc   ffe5
0026be   0e02     movlw   0x2              	MOVLW	0x02
0026c0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0026c2   f000
                                           ;	.line	201; glcd.c	if (sides & LCD_LEFT) {
0026c4   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
0026c6   d006     bra     0x26d4           	BRA	_00178_DS_
                                           ;	.line	203; glcd.c	latched_lcd_cs1(1);
0026c8   0e01     movlw   0x1              	MOVLW	0x01
0026ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026cc   ec4b     call    0x2896, 0        	CALL	_latched_lcd_cs1
0026ce   f014
0026d0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026d2   d005     bra     0x26de           	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	207; glcd.c	latched_lcd_cs1(0);
0026d4   0e00     movlw   0                	MOVLW	0x00
0026d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026d8   ec4b     call    0x2896, 0        	CALL	_latched_lcd_cs1
0026da   f014
0026dc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	210; glcd.c	if (sides & LCD_RIGHT) {
0026de   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
0026e0   d006     bra     0x26ee           	BRA	_00181_DS_
                                           ;	.line	212; glcd.c	latched_lcd_cs2(1);
0026e2   0e01     movlw   0x1              	MOVLW	0x01
0026e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026e6   ec68     call    0x28d0, 0        	CALL	_latched_lcd_cs2
0026e8   f014
0026ea   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026ec   d005     bra     0x26f8           	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	216; glcd.c	latched_lcd_cs2(0);
0026ee   0e00     movlw   0                	MOVLW	0x00
0026f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026f2   ec68     call    0x28d0, 0        	CALL	_latched_lcd_cs2
0026f4   f014
0026f6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
0026f8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0026fa   f000
0026fc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026fe   ffd9
002700   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	185; glcd.c	void lcd_write (unsigned char d) {
002790   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002792   ffe5
002794   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002796   ffd9
002798   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00279a   ffe5
00279c   0e02     movlw   0x2              	MOVLW	0x02
00279e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0027a0   f000
                                           ;	.line	186; glcd.c	lcd_waitbusy();
0027a2   ec6c     call    0x2ad8, 0        	CALL	_lcd_waitbusy
0027a4   f015
                                           ;	.line	188; glcd.c	latched_lcd_di(1);
0027a6   0e01     movlw   0x1              	MOVLW	0x01
0027a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027aa   ecbf     call    0x297e, 0        	CALL	_latched_lcd_di
0027ac   f014
0027ae   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	190; glcd.c	latched_lcd_rw(0);
0027b0   0e00     movlw   0                	MOVLW	0x00
0027b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027b4   eca2     call    0x2944, 0        	CALL	_latched_lcd_rw
0027b6   f014
0027b8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	latched_lcd_data(d);
0027ba   5000     movf    0, 0, 0          	MOVF	r0x00, W
0027bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027be   ec42     call    0x2c84, 0        	CALL	_latched_lcd_data
0027c0   f016
0027c2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	194; glcd.c	lcd_enable();
0027c4   ece9     call    0x27d2, 0        	CALL	_lcd_enable
0027c6   f013
0027c8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0027ca   f000
0027cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027ce   ffd9
0027d0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
002ad8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ada   ffe5
002adc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ade   ffd9
002ae0   0000     nop                      	nop 
002ae2   0000     nop                      	nop 
002ae4   0000     nop                      	nop 
002ae6   0000     nop                      	nop 
002ae8   0000     nop                      	nop 
002aea   0000     nop                      	nop 
002aec   0000     nop                      	nop 
002aee   0000     nop                      	nop 
                                           ;	.line	180; glcd.c	sleep_ms(10);
002af0   0e00     movlw   0                	MOVLW	0x00
002af2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af4   0e00     movlw   0                	MOVLW	0x00
002af6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af8   0e00     movlw   0                	MOVLW	0x00
002afa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002afc   0e0a     movlw   0xa              	MOVLW	0x0a
002afe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b00   ec49     call    0x1692, 0        	CALL	_sleep_ms
002b02   f00b
002b04   0e04     movlw   0x4              	MOVLW	0x04
002b06   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002b08   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b0a   ffd9
002b0c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
002702   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002704   ffe5
002706   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002708   ffd9
00270a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00270c   ffe5
00270e   0e02     movlw   0x2              	MOVLW	0x02
002710   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002712   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
002714   ec6c     call    0x2ad8, 0        	CALL	_lcd_waitbusy
002716   f015
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
002718   0e00     movlw   0                	MOVLW	0x00
00271a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00271c   ecbf     call    0x297e, 0        	CALL	_latched_lcd_di
00271e   f014
002720   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
002722   0e00     movlw   0                	MOVLW	0x00
002724   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002726   eca2     call    0x2944, 0        	CALL	_latched_lcd_rw
002728   f014
00272a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
00272c   0e3f     movlw   0x3f             	MOVLW	0x3f
00272e   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002730   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
002732   5000     movf    0, 0, 0          	MOVF	r0x00, W
002734   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002736   ec42     call    0x2c84, 0        	CALL	_latched_lcd_data
002738   f016
00273a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
00273c   ece9     call    0x27d2, 0        	CALL	_lcd_enable
00273e   f013
002740   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002742   f000
002744   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002746   ffd9
002748   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
00274a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00274c   ffe5
00274e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002750   ffd9
002752   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002754   ffe5
002756   0e02     movlw   0x2              	MOVLW	0x02
002758   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00275a   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
00275c   ec6c     call    0x2ad8, 0        	CALL	_lcd_waitbusy
00275e   f015
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
002760   0e00     movlw   0                	MOVLW	0x00
002762   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002764   ecbf     call    0x297e, 0        	CALL	_latched_lcd_di
002766   f014
002768   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
00276a   0e00     movlw   0                	MOVLW	0x00
00276c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00276e   eca2     call    0x2944, 0        	CALL	_latched_lcd_rw
002770   f014
002772   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
002774   0eb8     movlw   0xb8             	MOVLW	0xb8
002776   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
002778   5000     movf    0, 0, 0          	MOVF	r0x00, W
00277a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00277c   ec42     call    0x2c84, 0        	CALL	_latched_lcd_data
00277e   f016
002780   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
002782   ece9     call    0x27d2, 0        	CALL	_lcd_enable
002784   f013
002786   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002788   f000
00278a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00278c   ffd9
00278e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
0022b8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022ba   ffe5
0022bc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022be   ffd9
0022c0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0022c2   ffe5
0022c4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0022c6   ffe5
0022c8   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0022ca   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
0022cc   0e03     movlw   0x3              	MOVLW	0x03
0022ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022d0   ec59     call    0x26b2, 0        	CALL	_lcd_selectside
0022d2   f013
0022d4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
0022d6   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
0022d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0022da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022dc   eca5     call    0x274a, 0        	CALL	_lcd_setpage
0022de   f013
0022e0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
0022e2   0e00     movlw   0                	MOVLW	0x00
0022e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022e6   ec81     call    0x2702, 0        	CALL	_lcd_setyaddr
0022e8   f013
0022ea   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
0022ec   0e00     movlw   0                	MOVLW	0x00
0022ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022f0   ec42     call    0x2c84, 0        	CALL	_latched_lcd_data
0022f2   f016
0022f4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
0022f6   0e00     movlw   0                	MOVLW	0x00
0022f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022fa   eca2     call    0x2944, 0        	CALL	_latched_lcd_rw
0022fc   f014
0022fe   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
002300   0e01     movlw   0x1              	MOVLW	0x01
002302   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002304   ecbf     call    0x297e, 0        	CALL	_latched_lcd_di
002306   f014
002308   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
00230a   0e40     movlw   0x40             	MOVLW	0x40
00230c   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
00230e   ece9     call    0x27d2, 0        	CALL	_lcd_enable
002310   f013
002312   0000     nop                      	nop 
002314   0000     nop                      	nop 
002316   0000     nop                      	nop 
002318   0000     nop                      	nop 
00231a   0000     nop                      	nop 
00231c   0000     nop                      	nop 
00231e   0000     nop                      	nop 
002320   0000     nop                      	nop 
002322   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002324   6e02     movwf   0x2, 0           	MOVWF	r0x02
002326   0402     decf    0x2, 0, 0        	DECF	r0x02, W
002328   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
00232a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00232c   e1f0     bnz     0x230e           	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
00232e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
002330   0e08     movlw   0x8              	MOVLW	0x08
002332   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
002334   e3d1     bnc     0x22d8           	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
002336   0e01     movlw   0x1              	MOVLW	0x01
002338   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00233a   ec59     call    0x26b2, 0        	CALL	_lcd_selectside
00233c   f013
00233e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002340   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002342   f002
002344   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002346   f001
002348   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00234a   f000
00234c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00234e   ffd9
002350   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
00255e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002560   ffe5
002562   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002564   ffd9
002566   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002568   ffe5
00256a   0e02     movlw   0x2              	MOVLW	0x02
00256c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00256e   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(1);
002570   0e01     movlw   0x1              	MOVLW	0x01
002572   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002574   ec4b     call    0x2896, 0        	CALL	_latched_lcd_cs1
002576   f014
002578   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(1);
00257a   0e01     movlw   0x1              	MOVLW	0x01
00257c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257e   ec68     call    0x28d0, 0        	CALL	_latched_lcd_cs2
002580   f014
002582   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
002584   0e00     movlw   0                	MOVLW	0x00
002586   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002588   eca2     call    0x2944, 0        	CALL	_latched_lcd_rw
00258a   f014
00258c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
00258e   0e00     movlw   0                	MOVLW	0x00
002590   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002592   ecbf     call    0x297e, 0        	CALL	_latched_lcd_di
002594   f014
002596   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
002598   0e01     movlw   0x1              	MOVLW	0x01
00259a   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
00259c   0e3e     movlw   0x3e             	MOVLW	0x3e
00259e   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
0025a0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a4   ec42     call    0x2c84, 0        	CALL	_latched_lcd_data
0025a6   f016
0025a8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
0025aa   ece9     call    0x27d2, 0        	CALL	_lcd_enable
0025ac   f013
0025ae   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0025b0   f000
0025b2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025b4   ffd9
0025b6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
002660   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002662   ffe5
002664   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002666   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
002668   0e00     movlw   0                	MOVLW	0x00
00266a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00266c   0e00     movlw   0                	MOVLW	0x00
00266e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002670   0e00     movlw   0                	MOVLW	0x00
002672   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002674   0e01     movlw   0x1              	MOVLW	0x01
002676   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002678   ec49     call    0x1692, 0        	CALL	_sleep_ms
00267a   f00b
00267c   0e04     movlw   0x4              	MOVLW	0x04
00267e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(0);
002680   0e00     movlw   0                	MOVLW	0x00
002682   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002684   ec85     call    0x290a, 0        	CALL	_latched_lcd_rst
002686   f014
002688   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
00268a   0e00     movlw   0                	MOVLW	0x00
00268c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00268e   0e00     movlw   0                	MOVLW	0x00
002690   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002692   0e00     movlw   0                	MOVLW	0x00
002694   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002696   0e01     movlw   0x1              	MOVLW	0x01
002698   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00269a   ec49     call    0x1692, 0        	CALL	_sleep_ms
00269c   f00b
00269e   0e04     movlw   0x4              	MOVLW	0x04
0026a0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(1);
0026a2   0e01     movlw   0x1              	MOVLW	0x01
0026a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026a6   ec85     call    0x290a, 0        	CALL	_latched_lcd_rst
0026a8   f014
0026aa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026ac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026ae   ffd9
0026b0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
002cac   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cae   ffe5
002cb0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cb2   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
002cb4   0e00     movlw   0                	MOVLW	0x00
002cb6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cb8   0e00     movlw   0                	MOVLW	0x00
002cba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cbc   0e00     movlw   0                	MOVLW	0x00
002cbe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cc0   0e0a     movlw   0xa              	MOVLW	0x0a
002cc2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cc4   ec49     call    0x1692, 0        	CALL	_sleep_ms
002cc6   f00b
002cc8   0e04     movlw   0x4              	MOVLW	0x04
002cca   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
002ccc   0e01     movlw   0x1              	MOVLW	0x01
002cce   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cd0   ffd9
002cd2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
0027d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027d4   ffe5
0027d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027d8   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
0027da   0e01     movlw   0x1              	MOVLW	0x01
0027dc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027de   ecdc     call    0x29b8, 0        	CALL	_latched_lcd_enable
0027e0   f014
0027e2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027e4   0000     nop                      	nop 
0027e6   0000     nop                      	nop 
0027e8   0000     nop                      	nop 
0027ea   0000     nop                      	nop 
0027ec   0000     nop                      	nop 
0027ee   0000     nop                      	nop 
0027f0   0000     nop                      	nop 
0027f2   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
0027f4   0e00     movlw   0                	MOVLW	0x00
0027f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027f8   ecdc     call    0x29b8, 0        	CALL	_latched_lcd_enable
0027fa   f014
0027fc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027fe   0000     nop                      	nop 
002800   0000     nop                      	nop 
002802   0000     nop                      	nop 
002804   0000     nop                      	nop 
002806   0000     nop                      	nop 
002808   0000     nop                      	nop 
00280a   0000     nop                      	nop 
00280c   0000     nop                      	nop 
00280e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002810   ffd9
002812   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
002814   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002816   ffe5
002818   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00281a   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
00281c   0e01     movlw   0x1              	MOVLW	0x01
00281e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002820   ecf9     call    0x29f2, 0        	CALL	_latched_lcd_power
002822   f014
002824   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002826   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
002828   6b16     clrf    0x16, 0x1        	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(0);
00282a   0e00     movlw   0                	MOVLW	0x00
00282c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00282e   ec4b     call    0x2896, 0        	CALL	_latched_lcd_cs1
002830   f014
002832   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(0);
002834   0e00     movlw   0                	MOVLW	0x00
002836   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002838   ec68     call    0x28d0, 0        	CALL	_latched_lcd_cs2
00283a   f014
00283c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
00283e   ec30     call    0x2660, 0        	CALL	_lcd_reset
002840   f013
                                           ;	.line	38; glcd.c	lcd_screenon(1);
002842   0e01     movlw   0x1              	MOVLW	0x01
002844   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002846   ecaf     call    0x255e, 0        	CALL	_lcd_screenon
002848   f012
00284a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
00284c   ec5c     call    0x22b8, 0        	CALL	_lcd_cls
00284e   f011
002850   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002852   ffd9
002854   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1470 (0x05be) bytes ( 1.12%)
                                           ;           	  735 (0x02df) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
