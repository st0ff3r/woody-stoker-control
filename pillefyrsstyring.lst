gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-12-2013  21:26:20
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Thu Dec 12 21:26:20 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_last_inputs
                                           	global	_last_button
                                           	global	_lcd_buf
                                           	global	_chimney_temp
                                           	global	_smoke_temp
                                           	global	_boiler_temp
                                           	global	_i
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	__debug
                                           	global	_timer_2
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _boiler_temp	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _smoke_temp	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _chimney_temp	res	2
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _lcd_buf	res	22
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _last_button	res	1
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _timer_2	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_timer_control	code	0X000008
                                           ivec_0x1_timer_control:
000008   ef53     goto    0x4a6            	GOTO	_timer_control
00000a   f002
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	27; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000414   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000416   0bfc     andlw   0xfc             	ANDLW	0xfc
000418   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	28; pillefyrsstyring.c	OSCCONbits.IRCF = 0x6;	// 4 MHz
00041a   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00041c   0b8f     andlw   0x8f             	ANDLW	0x8f
00041e   0960     iorlw   0x60             	IORLW	0x60
000420   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
000422   0100     movlb   0                	BANKSEL	_timer_2
                                           ;	.line	30; pillefyrsstyring.c	timer_2 = 0;
000424   6b96     clrf    0x96, 0x1        	CLRF	_timer_2, B
000426   0100     movlb   0                	BANKSEL	(_timer_2 + 1)
000428   6b97     clrf    0x97, 0x1        	CLRF	(_timer_2 + 1), B
00042a   0100     movlb   0                	BANKSEL	(_timer_2 + 2)
00042c   6b98     clrf    0x98, 0x1        	CLRF	(_timer_2 + 2), B
00042e   0100     movlb   0                	BANKSEL	(_timer_2 + 3)
000430   6b99     clrf    0x99, 0x1        	CLRF	(_timer_2 + 3), B
000432   0100     movlb   0                	BANKSEL	_boiler_temp
                                           ;	.line	31; pillefyrsstyring.c	boiler_temp = 0;
000434   6bb0     clrf    0xb0, 0x1        	CLRF	_boiler_temp, B
000436   0100     movlb   0                	BANKSEL	(_boiler_temp + 1)
000438   6bb1     clrf    0xb1, 0x1        	CLRF	(_boiler_temp + 1), B
00043a   0100     movlb   0                	BANKSEL	_smoke_temp
                                           ;	.line	32; pillefyrsstyring.c	smoke_temp = 0;
00043c   6bb2     clrf    0xb2, 0x1        	CLRF	_smoke_temp, B
00043e   0100     movlb   0                	BANKSEL	(_smoke_temp + 1)
000440   6bb3     clrf    0xb3, 0x1        	CLRF	(_smoke_temp + 1), B
000442   0100     movlb   0                	BANKSEL	_chimney_temp
                                           ;	.line	33; pillefyrsstyring.c	chimney_temp = 0;
000444   6bb4     clrf    0xb4, 0x1        	CLRF	_chimney_temp, B
000446   0100     movlb   0                	BANKSEL	(_chimney_temp + 1)
000448   6bb5     clrf    0xb5, 0x1        	CLRF	(_chimney_temp + 1), B
                                           ;	.line	35; pillefyrsstyring.c	init_timers();
00044a   ecfc     call    0x9f8, 0         	CALL	_init_timers
00044c   f004
                                           ;	.line	60; pillefyrsstyring.c	init_latches();
00044e   ec79     call    0xaf2, 0         	CALL	_init_latches
000450   f005
                                           ;	.line	61; pillefyrsstyring.c	latched_lcd_power(1);
000452   0e01     movlw   0x1              	MOVLW	0x01
000454   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000456   ecdf     call    0x9be, 0         	CALL	_latched_lcd_power
000458   f004
00045a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	64; pillefyrsstyring.c	sleep_ms(1000);
00045c   0e00     movlw   0                	MOVLW	0x00
00045e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000460   0e00     movlw   0                	MOVLW	0x00
000462   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000464   0e03     movlw   0x3              	MOVLW	0x03
000466   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000468   0ee8     movlw   0xe8             	MOVLW	0xe8
00046a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00046c   ec10     call    0x220, 0         	CALL	_sleep_ms
00046e   f001
000470   0e04     movlw   0x4              	MOVLW	0x04
000472   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	65; pillefyrsstyring.c	set_ac_power(0x00, 0x00);
000474   0e00     movlw   0                	MOVLW	0x00
000476   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000478   0e00     movlw   0                	MOVLW	0x00
00047a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00047c   ec12     call    0x824, 0         	CALL	_set_ac_power
00047e   f004
000480   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000482   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	66; pillefyrsstyring.c	RELAY = 1;
000484   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
                                           ;	.line	68; pillefyrsstyring.c	TRISCbits.TRISC7 = 0x1;	// rx
000486   8e94     bsf     0x94, 0x7, 0     	BSF	_TRISCbits, 7
                                           ;	.line	69; pillefyrsstyring.c	TRISCbits.TRISC6 = 0x0;	// tx
000488   9c94     bcf     0x94, 0x6, 0     	BCF	_TRISCbits, 6
                                           _00106_DS_:
                                           ;	.line	71; pillefyrsstyring.c	LATCbits.LATC6 = PORTCbits.RC7;
00048a   6a00     clrf    0, 0             	CLRF	r0x00
00048c   be82     btfsc   0x82, 0x7, 0     	BTFSC	_PORTCbits, 7
00048e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000490   5000     movf    0, 0, 0          	MOVF	r0x00, W
000492   0b01     andlw   0x1              	ANDLW	0x01
000494   40e8     rrncf   0xe8, 0, 0       	RRNCF	WREG, W
000496   40e8     rrncf   0xe8, 0, 0       	RRNCF	WREG, W
000498   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
00049a   508b     movf    0x8b, 0, 0       	MOVF	_LATCbits, W
00049c   0bbf     andlw   0xbf             	ANDLW	0xbf
00049e   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
0004a0   6e8b     movwf   0x8b, 0          	MOVWF	_LATCbits
0004a2   d7f3     bra     0x48a            	BRA	_00106_DS_
0004a4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	167; pillefyrsstyring.c	void _debug() {
00061e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000620   ffe5
000622   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000624   ffd9
                                           ;	.line	168; pillefyrsstyring.c	latched_lcd_power(1);
000626   0e01     movlw   0x1              	MOVLW	0x01
000628   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00062a   ecdf     call    0x9be, 0         	CALL	_latched_lcd_power
00062c   f004
00062e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	169; pillefyrsstyring.c	sleep_ms(500);
000630   0e00     movlw   0                	MOVLW	0x00
000632   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000634   0e00     movlw   0                	MOVLW	0x00
000636   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000638   0e01     movlw   0x1              	MOVLW	0x01
00063a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00063c   0ef4     movlw   0xf4             	MOVLW	0xf4
00063e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000640   ec10     call    0x220, 0         	CALL	_sleep_ms
000642   f001
000644   0e04     movlw   0x4              	MOVLW	0x04
000646   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	170; pillefyrsstyring.c	latched_lcd_power(0);
000648   0e00     movlw   0                	MOVLW	0x00
00064a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00064c   ecdf     call    0x9be, 0         	CALL	_latched_lcd_power
00064e   f004
000650   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; pillefyrsstyring.c	sleep_ms(500);
000652   0e00     movlw   0                	MOVLW	0x00
000654   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000656   0e00     movlw   0                	MOVLW	0x00
000658   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00065a   0e01     movlw   0x1              	MOVLW	0x01
00065c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00065e   0ef4     movlw   0xf4             	MOVLW	0xf4
000660   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000662   ec10     call    0x220, 0         	CALL	_sleep_ms
000664   f001
000666   0e04     movlw   0x4              	MOVLW	0x04
000668   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00066a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00066c   ffd9
00066e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	155; pillefyrsstyring.c	unsigned char get_inputs() {
000ace   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000ad0   ffe5
000ad2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ad4   ffd9
000ad6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000ad8   ffe5
                                           ;	.line	159; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
000ada   0eff     movlw   0xff             	MOVLW	0xff
000adc   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	160; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
000ade   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	161; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
000ae0   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
000ae2   f000
                                           ;	.line	162; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
000ae4   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	164; pillefyrsstyring.c	return data;
000ae6   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ae8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000aea   f000
000aec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000aee   ffd9
000af0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	145; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
000824   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000826   ffe5
000828   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00082a   ffd9
00082c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00082e   ffe5
000830   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000832   ffe5
000834   0e02     movlw   0x2              	MOVLW	0x02
000836   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000838   f000
00083a   0e03     movlw   0x3              	MOVLW	0x03
00083c   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00083e   f001
                                           ;	.line	146; pillefyrsstyring.c	header_mask &= 0b00111111;		// only 6 outputs on this hardware
000840   0e3f     movlw   0x3f             	MOVLW	0x3f
000842   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	147; pillefyrsstyring.c	value &= header_mask;
000844   5000     movf    0, 0, 0          	MOVF	r0x00, W
000846   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	148; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
000848   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	149; pillefyrsstyring.c	LATCH_DATA = value;
00084a   c001     movff   0x1, 0xf8c       	MOVFF	r0x01, _LATD
00084c   ff8c
                                           ;	.line	150; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
00084e   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	151; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
000850   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	152; pillefyrsstyring.c	LATCH_DATA = 0x00;
000852   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000854   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000856   f001
000858   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00085a   f000
00085c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00085e   ffd9
000860   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	126; pillefyrsstyring.c	void init_latches() {
000af2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000af4   ffe5
000af6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000af8   ffd9
                                           ;	.line	127; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
000afa   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	128; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
000afc   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	129; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
000afe   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	131; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
000b00   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	132; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
000b02   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	134; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
000b04   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	135; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
000b06   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	137; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
000b08   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	138; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
000b0a   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	140; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
000b0c   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	141; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
000b0e   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
000b10   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b12   ffd9
000b14   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	99; pillefyrsstyring.c	void init_timers() {
0009f8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0009fa   ffe5
0009fc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0009fe   ffd9
                                           ;	.line	101; pillefyrsstyring.c	T2CONbits.T2CKPS0 = 1;
000a00   80ca     bsf     0xca, 0, 0       	BSF	_T2CONbits, 0
                                           ;	.line	102; pillefyrsstyring.c	T2CONbits.T2CKPS1 = 0;
000a02   92ca     bcf     0xca, 0x1, 0     	BCF	_T2CONbits, 1
                                           ;	.line	103; pillefyrsstyring.c	T2CONbits.T2OUTPS0 = 1;
000a04   86ca     bsf     0xca, 0x3, 0     	BSF	_T2CONbits, 3
                                           ;	.line	104; pillefyrsstyring.c	T2CONbits.T2OUTPS1 = 0;
000a06   98ca     bcf     0xca, 0x4, 0     	BCF	_T2CONbits, 4
                                           ;	.line	105; pillefyrsstyring.c	T2CONbits.T2OUTPS2 = 0;
000a08   9aca     bcf     0xca, 0x5, 0     	BCF	_T2CONbits, 5
                                           ;	.line	106; pillefyrsstyring.c	T2CONbits.T2OUTPS3 = 1;
000a0a   8cca     bsf     0xca, 0x6, 0     	BSF	_T2CONbits, 6
                                           ;	.line	107; pillefyrsstyring.c	IPR1bits.TMR2IP = 1;		// high priority
000a0c   829f     bsf     0x9f, 0x1, 0     	BSF	_IPR1bits, 1
                                           ;	.line	108; pillefyrsstyring.c	PIR1bits.TMR2IF = 1;
000a0e   829e     bsf     0x9e, 0x1, 0     	BSF	_PIR1bits, 1
                                           ;	.line	109; pillefyrsstyring.c	T2CONbits.TMR2ON = 1;
000a10   84ca     bsf     0xca, 0x2, 0     	BSF	_T2CONbits, 2
                                           ;	.line	110; pillefyrsstyring.c	PIE1bits.TMR2IE = 1;
000a12   829d     bsf     0x9d, 0x1, 0     	BSF	_PIE1bits, 1
                                           ;	.line	113; pillefyrsstyring.c	T3CONbits.RD16 = 1;
000a14   8eb1     bsf     0xb1, 0x7, 0     	BSF	_T3CONbits, 7
                                           ;	.line	114; pillefyrsstyring.c	T3CONbits.TMR3CS = 0;	// internal clock source
000a16   92b1     bcf     0xb1, 0x1, 0     	BCF	_T3CONbits, 1
                                           ;	.line	115; pillefyrsstyring.c	T3CONbits.T3CKPS0 = 1;
000a18   88b1     bsf     0xb1, 0x4, 0     	BSF	_T3CONbits, 4
                                           ;	.line	116; pillefyrsstyring.c	T3CONbits.T3CKPS0 = 1;
000a1a   88b1     bsf     0xb1, 0x4, 0     	BSF	_T3CONbits, 4
                                           ;	.line	117; pillefyrsstyring.c	IPR2bits.TMR3IP = 0;		// low priority
000a1c   92a2     bcf     0xa2, 0x1, 0     	BCF	_IPR2bits, 1
                                           ;	.line	118; pillefyrsstyring.c	T3CONbits.TMR3ON = 1;
000a1e   80b1     bsf     0xb1, 0, 0       	BSF	_T3CONbits, 0
                                           ;	.line	120; pillefyrsstyring.c	PIR2bits.TMR3IF = 1;
000a20   82a1     bsf     0xa1, 0x1, 0     	BSF	_PIR2bits, 1
                                           ;	.line	122; pillefyrsstyring.c	INTCONbits.PEIE = 1;
000a22   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	123; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
000a24   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
000a26   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a28   ffd9
000a2a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	89; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
000220   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000222   ffe5
000224   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000226   ffd9
000228   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00022a   ffe5
00022c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00022e   ffe5
000230   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000232   ffe5
000234   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000236   ffe5
000238   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00023a   ffe5
00023c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00023e   ffe5
000240   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000242   ffe5
000244   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000246   ffe5
000248   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00024a   ffe5
00024c   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
00024e   ffe5
000250   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000252   ffe5
000254   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000256   ffe5
000258   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00025a   ffe5
00025c   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
00025e   ffe5
000260   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
000262   ffe5
000264   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
000266   ffe5
000268   0e02     movlw   0x2              	MOVLW	0x02
00026a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00026c   f000
00026e   0e03     movlw   0x3              	MOVLW	0x03
000270   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000272   f001
000274   0e04     movlw   0x4              	MOVLW	0x04
000276   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000278   f002
00027a   0e05     movlw   0x5              	MOVLW	0x05
00027c   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00027e   f003
                                           ;	.line	91; pillefyrsstyring.c	start_timer_2 = timer_2;	
000280   c096     movff   0x96, 0x4        	MOVFF	_timer_2, r0x04
000282   f004
000284   c097     movff   0x97, 0x5        	MOVFF	(_timer_2 + 1), r0x05
000286   f005
000288   c098     movff   0x98, 0x6        	MOVFF	(_timer_2 + 2), r0x06
00028a   f006
00028c   c099     movff   0x99, 0x7        	MOVFF	(_timer_2 + 3), r0x07
00028e   f007
                                           _00130_DS_:
                                           ;	.line	94; pillefyrsstyring.c	while ( (((signed long)(timer_2 - start_timer_2) < 0) ? (-1 * (timer_2 - start_timer_2)) : (timer_2 - start_timer_2)) < ms) {
000290   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000292   0100     movlb   0                	BANKSEL	_timer_2
000294   5d96     subwf   0x96, 0, 0x1     	SUBWF	_timer_2, W, B
000296   6e08     movwf   0x8, 0           	MOVWF	r0x08
000298   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00029a   0100     movlb   0                	BANKSEL	(_timer_2 + 1)
00029c   5997     subwfb  0x97, 0, 0x1     	SUBWFB	(_timer_2 + 1), W, B
00029e   6e09     movwf   0x9, 0           	MOVWF	r0x09
0002a0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0002a2   0100     movlb   0                	BANKSEL	(_timer_2 + 2)
0002a4   5998     subwfb  0x98, 0, 0x1     	SUBWFB	(_timer_2 + 2), W, B
0002a6   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0002a8   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0002aa   0100     movlb   0                	BANKSEL	(_timer_2 + 3)
0002ac   5999     subwfb  0x99, 0, 0x1     	SUBWFB	(_timer_2 + 3), W, B
0002ae   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
0002b0   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0002b2   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0002b4   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0002b6   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
0002b8   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0002ba   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
0002bc   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0002be   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
0002c0   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
0002c2   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
0002c4   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
0002c6   e31c     bnc     0x300            	BNC	_00135_DS_
0002c8   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0002ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002cc   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0002ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002d0   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0002d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002d4   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0002d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002d8   0eff     movlw   0xff             	MOVLW	0xff
0002da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002dc   0eff     movlw   0xff             	MOVLW	0xff
0002de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002e0   0eff     movlw   0xff             	MOVLW	0xff
0002e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002e4   0eff     movlw   0xff             	MOVLW	0xff
0002e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002e8   ec06     call    0xc, 0           	CALL	__mullong
0002ea   f000
0002ec   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0002ee   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
0002f0   f00d
0002f2   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
0002f4   f00e
0002f6   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
0002f8   f00f
0002fa   0e08     movlw   0x8              	MOVLW	0x08
0002fc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0002fe   d008     bra     0x310            	BRA	_00136_DS_
                                           _00135_DS_:
000300   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
000302   f00c
000304   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
000306   f00d
000308   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
00030a   f00e
00030c   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
00030e   f00f
                                           _00136_DS_:
000310   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000312   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
000314   e108     bnz     0x326            	BNZ	_00143_DS_
000316   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000318   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
00031a   e105     bnz     0x326            	BNZ	_00143_DS_
00031c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00031e   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
000320   e102     bnz     0x326            	BNZ	_00143_DS_
000322   5000     movf    0, 0, 0          	MOVF	r0x00, W
000324   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00143_DS_:
000326   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000328   d7b3     bra     0x290            	BRA	_00130_DS_
00032a   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
00032c   f00f
00032e   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
000330   f00e
000332   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
000334   f00d
000336   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000338   f00c
00033a   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
00033c   f00b
00033e   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
000340   f00a
000342   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000344   f009
000346   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000348   f008
00034a   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00034c   f007
00034e   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000350   f006
000352   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000354   f005
000356   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000358   f004
00035a   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00035c   f003
00035e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000360   f002
000362   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000364   f001
000366   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000368   f000
00036a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00036c   ffd9
00036e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__timer_control	code
                                           _timer_control:
                                           ;	.line	76; pillefyrsstyring.c	static void timer_control(void) __interrupt 1 {
0004a6   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0004a8   ffe5
0004aa   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0004ac   ffe5
0004ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004b0   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0004b2   ffe5
0004b4   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0004b6   ffe5
0004b8   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0004ba   ffe5
0004bc   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0004be   ffe5
0004c0   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0004c2   ffe5
0004c4   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0004c6   ffe5
0004c8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0004ca   ffe5
0004cc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0004ce   ffd9
0004d0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0004d2   ffe5
                                           ;	.line	77; pillefyrsstyring.c	if (PIR1bits.TMR2IF) {
0004d4   a29e     btfss   0x9e, 0x1, 0     	BTFSS	_PIR1bits, 1
0004d6   d00e     bra     0x4f4            	BRA	_00114_DS_
                                           ;	.line	78; pillefyrsstyring.c	PR2 = TIMER2_RELOAD;		// 1 ms delay at 4 MHz
0004d8   0e18     movlw   0x18             	MOVLW	0x18
0004da   6ecb     movwf   0xcb, 0          	MOVWF	_PR2
                                           ;	.line	79; pillefyrsstyring.c	PIR1bits.TMR2IF = 0;
0004dc   929e     bcf     0x9e, 0x1, 0     	BCF	_PIR1bits, 1
0004de   0100     movlb   0                	BANKSEL	_timer_2
                                           ;	.line	80; pillefyrsstyring.c	timer_2++;
0004e0   2b96     incf    0x96, 0x1, 0x1   	INCF	_timer_2, F, B
0004e2   e308     bnc     0x4f4            	BNC	_00114_DS_
0004e4   0100     movlb   0                	BANKSEL	(_timer_2 + 1)
0004e6   2b97     incf    0x97, 0x1, 0x1   	INCF	(_timer_2 + 1), F, B
0004e8   e305     bnc     0x4f4            	BNC	_00114_DS_
0004ea   0100     movlb   0                	BANKSEL	(_timer_2 + 2)
0004ec   3f98     incfsz  0x98, 0x1, 0x1   	INCFSZ	(_timer_2 + 2), F, B
0004ee   d002     bra     0x4f4            	BRA	_10168_DS_
0004f0   0100     movlb   0                	BANKSEL	(_timer_2 + 3)
0004f2   2b99     incf    0x99, 0x1, 0x1   	INCF	(_timer_2 + 3), F, B
                                           _10168_DS_:
                                           _00125_DS_:
                                           _00114_DS_:
                                           ;	.line	83; pillefyrsstyring.c	if (usart_drdy()) {
0004f4   ecb0     call    0xb60, 0         	CALL	_usart_drdy
0004f6   f005
0004f8   6e00     movwf   0, 0             	MOVWF	r0x00
0004fa   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004fc   e006     bz      0x50a            	BZ	_00117_DS_
                                           ;	.line	85; pillefyrsstyring.c	usart_putc(usart_getc());
0004fe   ec53     call    0xaa6, 0         	CALL	_usart_getc
000500   f005
000502   6e00     movwf   0, 0             	MOVWF	r0x00
000504   5000     movf    0, 0, 0          	MOVF	r0x00, W
000506   eca8     call    0xb50, 0         	CALL	_usart_putc
000508   f005
                                           _00117_DS_:
00050a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00050c   f000
00050e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000510   ffd9
000512   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
000514   fffb
000516   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
000518   fffa
00051a   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00051c   ffea
00051e   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
000520   ffe9
000522   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
000524   fff4
000526   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
000528   fff3
00052a   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
00052c   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
00052e   ffe0
000530   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
000532   ffd8
000534   0010     retfie  0                	RETFIE	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  896 (0x0380) bytes ( 0.68%)
                                           ;           	  448 (0x01c0) words
                                           ; udata size:	   36 (0x0024) bytes ( 0.94%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Thu Dec 12 21:26:20 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	366; glcd.c	void latched_lcd_data(unsigned char value) {
000a56   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a58   ffe5
000a5a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000a5c   ffd9
000a5e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000a60   ffe5
000a62   0e02     movlw   0x2              	MOVLW	0x02
000a64   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000a66   f000
                                           ;	.line	367; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000a68   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	368; glcd.c	LATCH_DATA = value;
000a6a   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
000a6c   ff8c
                                           ;	.line	369; glcd.c	LATCH_4 = LATCH_4_ENABLED;
000a6e   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_DISABLED;
000a70   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_DATA = 0x00;
000a72   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000a74   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000a76   f000
000a78   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a7a   ffd9
000a7c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	351; glcd.c	void latched_lcd_cs1(unsigned char value) {
000862   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000864   ffe5
000866   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000868   ffd9
00086a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00086c   ffe5
00086e   0e02     movlw   0x2              	MOVLW	0x02
000870   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000872   f000
                                           ;	.line	352; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000874   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	353; glcd.c	if (value) {	// set it
000876   5000     movf    0, 0, 0          	MOVF	r0x00, W
000878   e005     bz      0x884            	BZ	_00268_DS_
00087a   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	354; glcd.c	_latch_3_data |= 0b00100000;
00087c   8bb9     bsf     0xb9, 0x5, 0x1   	BSF	__latch_3_data, 5, B
                                           ;	.line	355; glcd.c	LATCH_DATA = _latch_3_data;
00087e   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000880   ff8c
000882   d004     bra     0x88c            	BRA	_00269_DS_
                                           _00268_DS_:
000884   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	358; glcd.c	_latch_3_data &= 0b11011111;
000886   9bb9     bcf     0xb9, 0x5, 0x1   	BCF	__latch_3_data, 5, B
                                           ;	.line	359; glcd.c	LATCH_DATA = _latch_3_data;
000888   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
00088a   ff8c
                                           _00269_DS_:
                                           ;	.line	361; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00088c   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00088e   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_DATA = 0x00;
000890   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000892   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000894   f000
000896   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000898   ffd9
00089a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	336; glcd.c	void latched_lcd_cs2(unsigned char value) {
00089c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00089e   ffe5
0008a0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0008a2   ffd9
0008a4   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0008a6   ffe5
0008a8   0e02     movlw   0x2              	MOVLW	0x02
0008aa   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0008ac   f000
                                           ;	.line	337; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0008ae   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	338; glcd.c	if (value) {	// set it
0008b0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008b2   e005     bz      0x8be            	BZ	_00260_DS_
0008b4   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	339; glcd.c	_latch_3_data |= 0b00010000;
0008b6   89b9     bsf     0xb9, 0x4, 0x1   	BSF	__latch_3_data, 4, B
                                           ;	.line	340; glcd.c	LATCH_DATA = _latch_3_data;
0008b8   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0008ba   ff8c
0008bc   d004     bra     0x8c6            	BRA	_00261_DS_
                                           _00260_DS_:
0008be   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	343; glcd.c	_latch_3_data &= 0b11101111;
0008c0   99b9     bcf     0xb9, 0x4, 0x1   	BCF	__latch_3_data, 4, B
                                           ;	.line	344; glcd.c	LATCH_DATA = _latch_3_data;
0008c2   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0008c4   ff8c
                                           _00261_DS_:
                                           ;	.line	346; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0008c6   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0008c8   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_DATA = 0x00;
0008ca   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0008cc   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0008ce   f000
0008d0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0008d2   ffd9
0008d4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	321; glcd.c	void latched_lcd_rst(unsigned char value) {
0008d6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0008d8   ffe5
0008da   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0008dc   ffd9
0008de   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0008e0   ffe5
0008e2   0e02     movlw   0x2              	MOVLW	0x02
0008e4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0008e6   f000
                                           ;	.line	322; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0008e8   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	323; glcd.c	if (value) {	// set it
0008ea   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008ec   e005     bz      0x8f8            	BZ	_00252_DS_
0008ee   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	324; glcd.c	_latch_3_data |= 0b00001000;
0008f0   87b9     bsf     0xb9, 0x3, 0x1   	BSF	__latch_3_data, 3, B
                                           ;	.line	325; glcd.c	LATCH_DATA = _latch_3_data;
0008f2   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0008f4   ff8c
0008f6   d004     bra     0x900            	BRA	_00253_DS_
                                           _00252_DS_:
0008f8   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	328; glcd.c	_latch_3_data &= 0b11110111;
0008fa   97b9     bcf     0xb9, 0x3, 0x1   	BCF	__latch_3_data, 3, B
                                           ;	.line	329; glcd.c	LATCH_DATA = _latch_3_data;
0008fc   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0008fe   ff8c
                                           _00253_DS_:
                                           ;	.line	331; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000900   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000902   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_DATA = 0x00;
000904   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000906   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000908   f000
00090a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00090c   ffd9
00090e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	306; glcd.c	void latched_lcd_rw(unsigned char value) {
000910   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000912   ffe5
000914   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000916   ffd9
000918   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00091a   ffe5
00091c   0e02     movlw   0x2              	MOVLW	0x02
00091e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000920   f000
                                           ;	.line	307; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000922   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	308; glcd.c	if (value) {	// set it
000924   5000     movf    0, 0, 0          	MOVF	r0x00, W
000926   e005     bz      0x932            	BZ	_00244_DS_
000928   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	309; glcd.c	_latch_3_data |= 0b00000100;
00092a   85b9     bsf     0xb9, 0x2, 0x1   	BSF	__latch_3_data, 2, B
                                           ;	.line	310; glcd.c	LATCH_DATA = _latch_3_data;
00092c   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
00092e   ff8c
000930   d004     bra     0x93a            	BRA	_00245_DS_
                                           _00244_DS_:
000932   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	313; glcd.c	_latch_3_data &= 0b11111011;
000934   95b9     bcf     0xb9, 0x2, 0x1   	BCF	__latch_3_data, 2, B
                                           ;	.line	314; glcd.c	LATCH_DATA = _latch_3_data;
000936   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000938   ff8c
                                           _00245_DS_:
                                           ;	.line	316; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00093a   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00093c   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_DATA = 0x00;
00093e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
000940   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000942   f000
000944   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000946   ffd9
000948   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	291; glcd.c	void latched_lcd_di(unsigned char value) {
00094a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00094c   ffe5
00094e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000950   ffd9
000952   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000954   ffe5
000956   0e02     movlw   0x2              	MOVLW	0x02
000958   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00095a   f000
                                           ;	.line	292; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00095c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	293; glcd.c	if (value) {	// set it
00095e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000960   e005     bz      0x96c            	BZ	_00236_DS_
000962   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	294; glcd.c	_latch_3_data |= 0b00000010;
000964   83b9     bsf     0xb9, 0x1, 0x1   	BSF	__latch_3_data, 1, B
                                           ;	.line	295; glcd.c	LATCH_DATA = _latch_3_data;
000966   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000968   ff8c
00096a   d004     bra     0x974            	BRA	_00237_DS_
                                           _00236_DS_:
00096c   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	298; glcd.c	_latch_3_data &= 0b11111101;
00096e   93b9     bcf     0xb9, 0x1, 0x1   	BCF	__latch_3_data, 1, B
                                           ;	.line	299; glcd.c	LATCH_DATA = _latch_3_data;
000970   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
000972   ff8c
                                           _00237_DS_:
                                           ;	.line	301; glcd.c	LATCH_3 = LATCH_3_ENABLED;
000974   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_DISABLED;
000976   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_DATA = 0x00;
000978   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00097a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00097c   f000
00097e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000980   ffd9
000982   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	276; glcd.c	void latched_lcd_enable(unsigned char value) {
000984   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000986   ffe5
000988   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00098a   ffd9
00098c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00098e   ffe5
000990   0e02     movlw   0x2              	MOVLW	0x02
000992   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000994   f000
                                           ;	.line	277; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
000996   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	278; glcd.c	if (value) {	// set it
000998   5000     movf    0, 0, 0          	MOVF	r0x00, W
00099a   e005     bz      0x9a6            	BZ	_00228_DS_
00099c   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	279; glcd.c	_latch_3_data |= 0b00000001;
00099e   81b9     bsf     0xb9, 0, 0x1     	BSF	__latch_3_data, 0, B
                                           ;	.line	280; glcd.c	LATCH_DATA = _latch_3_data;
0009a0   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009a2   ff8c
0009a4   d004     bra     0x9ae            	BRA	_00229_DS_
                                           _00228_DS_:
0009a6   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	283; glcd.c	_latch_3_data &= 0b11111110;
0009a8   91b9     bcf     0xb9, 0, 0x1     	BCF	__latch_3_data, 0, B
                                           ;	.line	284; glcd.c	LATCH_DATA = _latch_3_data;
0009aa   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009ac   ff8c
                                           _00229_DS_:
                                           ;	.line	286; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0009ae   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0009b0   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_DATA = 0x00;
0009b2   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0009b4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009b6   f000
0009b8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0009ba   ffd9
0009bc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	261; glcd.c	void latched_lcd_power(unsigned char value) {
0009be   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0009c0   ffe5
0009c2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0009c4   ffd9
0009c6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0009c8   ffe5
0009ca   0e02     movlw   0x2              	MOVLW	0x02
0009cc   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0009ce   f000
                                           ;	.line	262; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0009d0   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	263; glcd.c	if (value) {	// set it
0009d2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d4   e005     bz      0x9e0            	BZ	_00220_DS_
0009d6   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	264; glcd.c	_latch_3_data |= 0b10000000;
0009d8   8fb9     bsf     0xb9, 0x7, 0x1   	BSF	__latch_3_data, 7, B
                                           ;	.line	265; glcd.c	LATCH_DATA = _latch_3_data;
0009da   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009dc   ff8c
0009de   d004     bra     0x9e8            	BRA	_00221_DS_
                                           _00220_DS_:
0009e0   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	268; glcd.c	_latch_3_data &= 0b01111111;
0009e2   9fb9     bcf     0xb9, 0x7, 0x1   	BCF	__latch_3_data, 7, B
                                           ;	.line	269; glcd.c	LATCH_DATA = _latch_3_data;
0009e4   c0b9     movff   0xb9, 0xf8c      	MOVFF	__latch_3_data, _LATD
0009e6   ff8c
                                           _00221_DS_:
                                           ;	.line	271; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0009e8   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0009ea   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_DATA = 0x00;
0009ec   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0009ee   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009f0   f000
0009f2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0009f4   ffd9
0009f6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	241; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
000370   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000372   ffe5
000374   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000376   ffd9
000378   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00037a   ffe5
00037c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00037e   ffe5
000380   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000382   ffe5
000384   0e02     movlw   0x2              	MOVLW	0x02
000386   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000388   f000
00038a   0e03     movlw   0x3              	MOVLW	0x03
00038c   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00038e   f001
                                           ;	.line	246; glcd.c	if (rx & 64) {
000390   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
000392   d006     bra     0x3a0            	BRA	_00203_DS_
                                           ;	.line	247; glcd.c	lcd_selectside(LCD_RIGHT);
000394   0e02     movlw   0x2              	MOVLW	0x02
000396   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000398   ec61     call    0x6c2, 0         	CALL	_lcd_selectside
00039a   f003
00039c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00039e   d005     bra     0x3aa            	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	250; glcd.c	lcd_selectside(LCD_LEFT);
0003a0   0e01     movlw   0x1              	MOVLW	0x01
0003a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003a4   ec61     call    0x6c2, 0         	CALL	_lcd_selectside
0003a6   f003
0003a8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	253; glcd.c	lcd_setpage( ry >> 3);		// fast /8
0003aa   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
0003ac   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0003ae   0b1f     andlw   0x1f             	ANDLW	0x1f
0003b0   6e02     movwf   0x2, 0           	MOVWF	r0x02
0003b2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0003b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003b6   ecad     call    0x75a, 0         	CALL	_lcd_setpage
0003b8   f003
0003ba   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	254; glcd.c	lcd_setyaddr( rx & 0b00111111);
0003bc   0e3f     movlw   0x3f             	MOVLW	0x3f
0003be   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
0003c0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0003c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003c4   ec89     call    0x712, 0         	CALL	_lcd_setyaddr
0003c6   f003
0003c8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
0003ca   ec8b     call    0xb16, 0         	CALL	_lcd_read
0003cc   f005
                                           ;	.line	256; glcd.c	d = lcd_read();				// read again to transfer to pic
0003ce   ec8b     call    0xb16, 0         	CALL	_lcd_read
0003d0   f005
0003d2   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	257; glcd.c	lcd_setyaddr( rx & 0b00111111); 
0003d4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0003d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003d8   ec89     call    0x712, 0         	CALL	_lcd_setyaddr
0003da   f003
0003dc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	258; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
0003de   0e07     movlw   0x7              	MOVLW	0x07
0003e0   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
0003e2   0e01     movlw   0x1              	MOVLW	0x01
0003e4   6e00     movwf   0, 0             	MOVWF	r0x00
0003e6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0003e8   e005     bz      0x3f4            	BZ	_00213_DS_
0003ea   6ce8     negf    0xe8, 0          	NEGF	WREG
0003ec   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
0003ee   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
0003f0   0f01     addlw   0x1              	ADDLW	0x01
0003f2   e3fd     bnc     0x3ee            	BNC	_00214_DS_
                                           _00213_DS_:
0003f4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0003f6   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
0003f8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0003fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003fc   ecd0     call    0x7a0, 0         	CALL	_lcd_write
0003fe   f003
000400   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000402   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000404   f002
000406   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000408   f001
00040a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00040c   f000
00040e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000410   ffd9
000412   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	222; glcd.c	unsigned char lcd_read (void) {
000b16   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b18   ffe5
000b1a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b1c   ffd9
                                           ;	.line	236; glcd.c	lcd_enable();
000b1e   ec16     call    0xa2c, 0         	CALL	_lcd_enable
000b20   f005
                                           ;	.line	237; glcd.c	return 0;
000b22   6ae8     clrf    0xe8, 0          	CLRF	WREG
000b24   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b26   ffd9
000b28   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	197; glcd.c	void lcd_selectside(unsigned char sides) {
0006c2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0006c4   ffe5
0006c6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0006c8   ffd9
0006ca   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0006cc   ffe5
0006ce   0e02     movlw   0x2              	MOVLW	0x02
0006d0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0006d2   f000
                                           ;	.line	200; glcd.c	if (sides & LCD_LEFT) {
0006d4   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
0006d6   d006     bra     0x6e4            	BRA	_00178_DS_
                                           ;	.line	202; glcd.c	latched_lcd_cs1(0);
0006d8   0e00     movlw   0                	MOVLW	0x00
0006da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006dc   ec31     call    0x862, 0         	CALL	_latched_lcd_cs1
0006de   f004
0006e0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0006e2   d005     bra     0x6ee            	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	206; glcd.c	latched_lcd_cs1(1);
0006e4   0e01     movlw   0x1              	MOVLW	0x01
0006e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006e8   ec31     call    0x862, 0         	CALL	_latched_lcd_cs1
0006ea   f004
0006ec   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	209; glcd.c	if (sides & LCD_RIGHT) {
0006ee   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
0006f0   d006     bra     0x6fe            	BRA	_00181_DS_
                                           ;	.line	211; glcd.c	latched_lcd_cs2(0);
0006f2   0e00     movlw   0                	MOVLW	0x00
0006f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006f6   ec4e     call    0x89c, 0         	CALL	_latched_lcd_cs2
0006f8   f004
0006fa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0006fc   d005     bra     0x708            	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	215; glcd.c	latched_lcd_cs2(1);
0006fe   0e01     movlw   0x1              	MOVLW	0x01
000700   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000702   ec4e     call    0x89c, 0         	CALL	_latched_lcd_cs2
000704   f004
000706   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
000708   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00070a   f000
00070c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00070e   ffd9
000710   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	184; glcd.c	void lcd_write (unsigned char d) {
0007a0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0007a2   ffe5
0007a4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0007a6   ffd9
0007a8   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0007aa   ffe5
0007ac   0e02     movlw   0x2              	MOVLW	0x02
0007ae   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0007b0   f000
                                           ;	.line	185; glcd.c	lcd_waitbusy();
0007b2   ec9f     call    0xb3e, 0         	CALL	_lcd_waitbusy
0007b4   f005
                                           ;	.line	187; glcd.c	latched_lcd_di(1);
0007b6   0e01     movlw   0x1              	MOVLW	0x01
0007b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007ba   eca5     call    0x94a, 0         	CALL	_latched_lcd_di
0007bc   f004
0007be   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	189; glcd.c	latched_lcd_rw(0);
0007c0   0e00     movlw   0                	MOVLW	0x00
0007c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007c4   ec88     call    0x910, 0         	CALL	_latched_lcd_rw
0007c6   f004
0007c8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	192; glcd.c	latched_lcd_data(d);
0007ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0007cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007ce   ec2b     call    0xa56, 0         	CALL	_latched_lcd_data
0007d0   f005
0007d2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	lcd_enable();
0007d4   ec16     call    0xa2c, 0         	CALL	_lcd_enable
0007d6   f005
0007d8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0007da   f000
0007dc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0007de   ffd9
0007e0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
000b3e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b40   ffe5
000b42   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b44   ffd9
000b46   0000     nop                      	nop 
000b48   0000     nop                      	nop 
000b4a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b4c   ffd9
000b4e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
000712   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000714   ffe5
000716   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000718   ffd9
00071a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00071c   ffe5
00071e   0e02     movlw   0x2              	MOVLW	0x02
000720   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000722   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
000724   ec9f     call    0xb3e, 0         	CALL	_lcd_waitbusy
000726   f005
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
000728   0e00     movlw   0                	MOVLW	0x00
00072a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00072c   eca5     call    0x94a, 0         	CALL	_latched_lcd_di
00072e   f004
000730   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
000732   0e00     movlw   0                	MOVLW	0x00
000734   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000736   ec88     call    0x910, 0         	CALL	_latched_lcd_rw
000738   f004
00073a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
00073c   0e3f     movlw   0x3f             	MOVLW	0x3f
00073e   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
000740   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
000742   5000     movf    0, 0, 0          	MOVF	r0x00, W
000744   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000746   ec2b     call    0xa56, 0         	CALL	_latched_lcd_data
000748   f005
00074a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
00074c   ec16     call    0xa2c, 0         	CALL	_lcd_enable
00074e   f005
000750   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000752   f000
000754   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000756   ffd9
000758   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
00075a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00075c   ffe5
00075e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000760   ffd9
000762   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000764   ffe5
000766   0e02     movlw   0x2              	MOVLW	0x02
000768   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00076a   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
00076c   ec9f     call    0xb3e, 0         	CALL	_lcd_waitbusy
00076e   f005
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
000770   0e00     movlw   0                	MOVLW	0x00
000772   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000774   eca5     call    0x94a, 0         	CALL	_latched_lcd_di
000776   f004
000778   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
00077a   0e00     movlw   0                	MOVLW	0x00
00077c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00077e   ec88     call    0x910, 0         	CALL	_latched_lcd_rw
000780   f004
000782   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
000784   0eb8     movlw   0xb8             	MOVLW	0xb8
000786   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
000788   5000     movf    0, 0, 0          	MOVF	r0x00, W
00078a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00078c   ec2b     call    0xa56, 0         	CALL	_latched_lcd_data
00078e   f005
000790   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
000792   ec16     call    0xa2c, 0         	CALL	_lcd_enable
000794   f005
000796   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000798   f000
00079a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00079c   ffd9
00079e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
000536   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000538   ffe5
00053a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00053c   ffd9
00053e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000540   ffe5
000542   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000544   ffe5
000546   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000548   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
00054a   0e03     movlw   0x3              	MOVLW	0x03
00054c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00054e   ec61     call    0x6c2, 0         	CALL	_lcd_selectside
000550   f003
000552   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
000554   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
000556   5000     movf    0, 0, 0          	MOVF	r0x00, W
000558   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00055a   ecad     call    0x75a, 0         	CALL	_lcd_setpage
00055c   f003
00055e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
000560   0e00     movlw   0                	MOVLW	0x00
000562   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000564   ec89     call    0x712, 0         	CALL	_lcd_setyaddr
000566   f003
000568   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
00056a   0e00     movlw   0                	MOVLW	0x00
00056c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00056e   ec2b     call    0xa56, 0         	CALL	_latched_lcd_data
000570   f005
000572   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
000574   0e00     movlw   0                	MOVLW	0x00
000576   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000578   ec88     call    0x910, 0         	CALL	_latched_lcd_rw
00057a   f004
00057c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
00057e   0e01     movlw   0x1              	MOVLW	0x01
000580   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000582   eca5     call    0x94a, 0         	CALL	_latched_lcd_di
000584   f004
000586   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
000588   0e40     movlw   0x40             	MOVLW	0x40
00058a   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
00058c   ec16     call    0xa2c, 0         	CALL	_lcd_enable
00058e   f005
000590   0000     nop                      	nop 
000592   0000     nop                      	nop 
000594   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000596   6e02     movwf   0x2, 0           	MOVWF	r0x02
000598   0402     decf    0x2, 0, 0        	DECF	r0x02, W
00059a   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
00059c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00059e   e1f6     bnz     0x58c            	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
0005a0   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0005a2   0e08     movlw   0x8              	MOVLW	0x08
0005a4   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
0005a6   e3d7     bnc     0x556            	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
0005a8   0e01     movlw   0x1              	MOVLW	0x01
0005aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005ac   ec61     call    0x6c2, 0         	CALL	_lcd_selectside
0005ae   f003
0005b0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0005b2   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0005b4   f002
0005b6   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0005b8   f001
0005ba   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0005bc   f000
0005be   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0005c0   ffd9
0005c2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
0005c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0005c6   ffe5
0005c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0005ca   ffd9
0005cc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0005ce   ffe5
0005d0   0e02     movlw   0x2              	MOVLW	0x02
0005d2   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0005d4   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(0);
0005d6   0e00     movlw   0                	MOVLW	0x00
0005d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005da   ec31     call    0x862, 0         	CALL	_latched_lcd_cs1
0005dc   f004
0005de   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(0);
0005e0   0e00     movlw   0                	MOVLW	0x00
0005e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005e4   ec4e     call    0x89c, 0         	CALL	_latched_lcd_cs2
0005e6   f004
0005e8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
0005ea   0e00     movlw   0                	MOVLW	0x00
0005ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005ee   ec88     call    0x910, 0         	CALL	_latched_lcd_rw
0005f0   f004
0005f2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
0005f4   0e00     movlw   0                	MOVLW	0x00
0005f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005f8   eca5     call    0x94a, 0         	CALL	_latched_lcd_di
0005fa   f004
0005fc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
0005fe   0e01     movlw   0x1              	MOVLW	0x01
000600   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
000602   0e3e     movlw   0x3e             	MOVLW	0x3e
000604   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
000606   5000     movf    0, 0, 0          	MOVF	r0x00, W
000608   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00060a   ec2b     call    0xa56, 0         	CALL	_latched_lcd_data
00060c   f005
00060e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
000610   ec16     call    0xa2c, 0         	CALL	_lcd_enable
000612   f005
000614   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000616   f000
000618   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00061a   ffd9
00061c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
000670   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000672   ffe5
000674   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000676   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
000678   0e00     movlw   0                	MOVLW	0x00
00067a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00067c   0e00     movlw   0                	MOVLW	0x00
00067e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000680   0e00     movlw   0                	MOVLW	0x00
000682   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000684   0e01     movlw   0x1              	MOVLW	0x01
000686   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000688   ec10     call    0x220, 0         	CALL	_sleep_ms
00068a   f001
00068c   0e04     movlw   0x4              	MOVLW	0x04
00068e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(1);
000690   0e01     movlw   0x1              	MOVLW	0x01
000692   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000694   ec6b     call    0x8d6, 0         	CALL	_latched_lcd_rst
000696   f004
000698   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
00069a   0e00     movlw   0                	MOVLW	0x00
00069c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00069e   0e00     movlw   0                	MOVLW	0x00
0006a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006a2   0e00     movlw   0                	MOVLW	0x00
0006a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006a6   0e01     movlw   0x1              	MOVLW	0x01
0006a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006aa   ec10     call    0x220, 0         	CALL	_sleep_ms
0006ac   f001
0006ae   0e04     movlw   0x4              	MOVLW	0x04
0006b0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(0);
0006b2   0e00     movlw   0                	MOVLW	0x00
0006b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006b6   ec6b     call    0x8d6, 0         	CALL	_latched_lcd_rst
0006b8   f004
0006ba   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0006bc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0006be   ffd9
0006c0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
000a7e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a80   ffe5
000a82   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000a84   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
000a86   0e00     movlw   0                	MOVLW	0x00
000a88   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a8a   0e00     movlw   0                	MOVLW	0x00
000a8c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a8e   0e00     movlw   0                	MOVLW	0x00
000a90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a92   0e0a     movlw   0xa              	MOVLW	0x0a
000a94   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a96   ec10     call    0x220, 0         	CALL	_sleep_ms
000a98   f001
000a9a   0e04     movlw   0x4              	MOVLW	0x04
000a9c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
000a9e   0e01     movlw   0x1              	MOVLW	0x01
000aa0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000aa2   ffd9
000aa4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
000a2c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a2e   ffe5
000a30   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000a32   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
000a34   0e01     movlw   0x1              	MOVLW	0x01
000a36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a38   ecc2     call    0x984, 0         	CALL	_latched_lcd_enable
000a3a   f004
000a3c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000a3e   0000     nop                      	nop 
000a40   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
000a42   0e00     movlw   0                	MOVLW	0x00
000a44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a46   ecc2     call    0x984, 0         	CALL	_latched_lcd_enable
000a48   f004
000a4a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000a4c   0000     nop                      	nop 
000a4e   0000     nop                      	nop 
000a50   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a52   ffd9
000a54   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
0007e2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0007e4   ffe5
0007e6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0007e8   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
0007ea   0e01     movlw   0x1              	MOVLW	0x01
0007ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007ee   ecdf     call    0x9be, 0         	CALL	_latched_lcd_power
0007f0   f004
0007f2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0007f4   0100     movlb   0                	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
0007f6   6bb9     clrf    0xb9, 0x1        	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(1);
0007f8   0e01     movlw   0x1              	MOVLW	0x01
0007fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007fc   ec31     call    0x862, 0         	CALL	_latched_lcd_cs1
0007fe   f004
000800   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(1);
000802   0e01     movlw   0x1              	MOVLW	0x01
000804   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000806   ec4e     call    0x89c, 0         	CALL	_latched_lcd_cs2
000808   f004
00080a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
00080c   ec38     call    0x670, 0         	CALL	_lcd_reset
00080e   f003
                                           ;	.line	38; glcd.c	lcd_screenon(1);
000810   0e01     movlw   0x1              	MOVLW	0x01
000812   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000814   ece2     call    0x5c4, 0         	CALL	_lcd_screenon
000816   f002
000818   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
00081a   ec9b     call    0x536, 0         	CALL	_lcd_cls
00081c   f002
00081e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000820   ffd9
000822   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1398 (0x0576) bytes ( 1.07%)
                                           ;           	  699 (0x02bb) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
