gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-16-2013  14:25:07
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Mon Dec 16 14:25:07 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	WDTPS=8192
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	_my_usart_open
                                           	global	_fifo_in_use
                                           	global	_fifo_put
                                           	global	_fifo_get
                                           	global	_base64decode
                                           	global	_base64encode
                                           	global	_validate_command
                                           	global	_reset
                                           	global	__debug
                                           	global	_i
                                           	global	_timer_1_ms
                                           	global	_sensor_inputs
                                           	global	_last_inputs
                                           	global	_output_ac_power_pwm
                                           	global	_ac_power_pwm_counter
                                           	global	_fifo_head
                                           	global	_fifo_tail
                                           	global	_fifo_buffer
                                           	global	_command
                                           	global	_command_index
                                           	global	_valid_command
                                           	global	__latch_2_data
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_crc16
                                           	extern	_sprintf
                                           	extern	_strchr
                                           	extern	_memcpy
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_usart_puts
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           	extern	__moduint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _timer_1_ms	res	4
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _fifo_head	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _fifo_tail	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _command_index	res	1
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _output_ac_power_pwm	res	6
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _main_c_1_96	res	1
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _sensor_inputs	res	1
                                           
                                           udata_pillefyrsstyring_8	udata
                                           _command	res	21
                                           
                                           udata_pillefyrsstyring_9	udata
                                           _valid_command	res	7
                                           
                                           udata_pillefyrsstyring_10	udata
                                           _main_buffer_1_96	res	10
                                           
                                           udata_pillefyrsstyring_11	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_12	udata
                                           _ac_power_pwm_counter	res	1
                                           
                                           udata_pillefyrsstyring_13	udata
                                           __latch_2_data	res	1
                                           
                                           udata_pillefyrsstyring_14	udata
                                           _fifo_buffer	res	100
                                           
                                           udata_pillefyrsstyring_15	udata
                                           _base64decode_xlate_1_140	res	17
                                           
                                           udata_pillefyrsstyring_16	udata
                                           _validate_command_decoded_command_1_145	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_isr_high_prio	code	0X000008
                                           ivec_0x1_isr_high_prio:
000008   ef70     goto    0x16e0           	GOTO	_isr_high_prio
00000a   f00b
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x2_isr_low_prio	code	0X000018
                                           ivec_0x2_isr_low_prio:
000018   ef8b     goto    0x2116           	GOTO	_isr_low_prio
00001a   f010
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	44; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000828   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00082a   0bfc     andlw   0xfc             	ANDLW	0xfc
00082c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	45; pillefyrsstyring.c	OSCCONbits.IRCF = 0x7;	// 8 MHz
00082e   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000830   0b8f     andlw   0x8f             	ANDLW	0x8f
000832   0970     iorlw   0x70             	IORLW	0x70
000834   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	46; pillefyrsstyring.c	WDTCONbits.SWDTEN = 1;	// enable watchdog
000836   80d1     bsf     0xd1, 0, 0       	BSF	_WDTCONbits, 0
000838   0004     clrwdt                   	clrwdt 
00083a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	49; pillefyrsstyring.c	timer_1_ms = 0;
00083c   6b57     clrf    0x57, 0x1        	CLRF	_timer_1_ms, B
00083e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
000840   6b58     clrf    0x58, 0x1        	CLRF	(_timer_1_ms + 1), B
000842   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
000844   6b59     clrf    0x59, 0x1        	CLRF	(_timer_1_ms + 2), B
000846   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
000848   6b5a     clrf    0x5a, 0x1        	CLRF	(_timer_1_ms + 3), B
00084a   010f     movlb   0xf              	BANKSEL	_fifo_head
                                           ;	.line	51; pillefyrsstyring.c	fifo_head = 0;
00084c   6b72     clrf    0x72, 0x1        	CLRF	_fifo_head, B
00084e   010f     movlb   0xf              	BANKSEL	(_fifo_head + 1)
000850   6b73     clrf    0x73, 0x1        	CLRF	(_fifo_head + 1), B
000852   010f     movlb   0xf              	BANKSEL	_fifo_tail
                                           ;	.line	52; pillefyrsstyring.c	fifo_tail = 0;
000854   6b74     clrf    0x74, 0x1        	CLRF	_fifo_tail, B
000856   010f     movlb   0xf              	BANKSEL	(_fifo_tail + 1)
000858   6b75     clrf    0x75, 0x1        	CLRF	(_fifo_tail + 1), B
00085a   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	53; pillefyrsstyring.c	command_index = 0;
00085c   6b7e     clrf    0x7e, 0x1        	CLRF	_command_index, B
                                           ;	.line	56; pillefyrsstyring.c	RCONbits.IPEN = 1;
00085e   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	58; pillefyrsstyring.c	init_timers();
000860   ec73     call    0x28e6, 0        	CALL	_init_timers
000862   f014
                                           ;	.line	61; pillefyrsstyring.c	IPR1bits.RCIP = 0;
000864   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	62; pillefyrsstyring.c	IPR1bits.TXIP = 0;
000866   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	73; pillefyrsstyring.c	my_usart_open();
000868   ec3c     call    0x2a78, 0        	CALL	_my_usart_open
00086a   f015
                                           ;	.line	75; pillefyrsstyring.c	sleep_ms(1000);	// let stuff settle...
00086c   0e00     movlw   0                	MOVLW	0x00
00086e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000870   0e00     movlw   0                	MOVLW	0x00
000872   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000874   0e03     movlw   0x3              	MOVLW	0x03
000876   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000878   0ee8     movlw   0xe8             	MOVLW	0xe8
00087a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00087c   ec23     call    0x1446, 0        	CALL	_sleep_ms
00087e   f00a
000880   0e04     movlw   0x4              	MOVLW	0x04
000882   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	76; pillefyrsstyring.c	usart_puts("OpenStoker starting... serial working\n\r");
000884   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000886   6e02     movwf   0x2, 0           	MOVWF	r0x02
000888   0e17     movlw   0x17             	MOVLW	HIGH(__str_0)
00088a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00088c   0ef4     movlw   0xf4             	MOVLW	LOW(__str_0)
00088e   6e00     movwf   0, 0             	MOVWF	r0x00
000890   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000896   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000898   5000     movf    0, 0, 0          	MOVF	r0x00, W
00089a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00089c   ecb3     call    0x2366, 0        	CALL	_usart_puts
00089e   f011
0008a0   0e03     movlw   0x3              	MOVLW	0x03
0008a2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	82; pillefyrsstyring.c	init_latches();
0008a4   ec51     call    0x2aa2, 0        	CALL	_init_latches
0008a6   f015
                                           _00105_DS_:
                                           ;	.line	86; pillefyrsstyring.c	while (!fifo_in_use()) {
0008a8   ecdf     call    0x29be, 0        	CALL	_fifo_in_use
0008aa   f014
0008ac   6e00     movwf   0, 0             	MOVWF	r0x00
0008ae   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008b0   e123     bnz     0x8f8            	BNZ	_00107_DS_
                                           ;	.line	87; pillefyrsstyring.c	latched_lcd_power(1);
0008b2   0e01     movlw   0x1              	MOVLW	0x01
0008b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b6   ec39     call    0x2872, 0        	CALL	_latched_lcd_power
0008b8   f014
0008ba   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	88; pillefyrsstyring.c	sleep_ms(1000);
0008bc   0e00     movlw   0                	MOVLW	0x00
0008be   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c0   0e00     movlw   0                	MOVLW	0x00
0008c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c4   0e03     movlw   0x3              	MOVLW	0x03
0008c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c8   0ee8     movlw   0xe8             	MOVLW	0xe8
0008ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008cc   ec23     call    0x1446, 0        	CALL	_sleep_ms
0008ce   f00a
0008d0   0e04     movlw   0x4              	MOVLW	0x04
0008d2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	89; pillefyrsstyring.c	latched_lcd_power(0);
0008d4   0e00     movlw   0                	MOVLW	0x00
0008d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d8   ec39     call    0x2872, 0        	CALL	_latched_lcd_power
0008da   f014
0008dc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	90; pillefyrsstyring.c	sleep_ms(1000);
0008de   0e00     movlw   0                	MOVLW	0x00
0008e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e2   0e00     movlw   0                	MOVLW	0x00
0008e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e6   0e03     movlw   0x3              	MOVLW	0x03
0008e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ea   0ee8     movlw   0xe8             	MOVLW	0xe8
0008ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ee   ec23     call    0x1446, 0        	CALL	_sleep_ms
0008f0   f00a
0008f2   0e04     movlw   0x4              	MOVLW	0x04
0008f4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0008f6   d7d8     bra     0x8a8            	BRA	_00105_DS_
                                           _00107_DS_:
                                           ;	.line	92; pillefyrsstyring.c	latched_lcd_power(1);
0008f8   0e01     movlw   0x1              	MOVLW	0x01
0008fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fc   ec39     call    0x2872, 0        	CALL	_latched_lcd_power
0008fe   f014
000900   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	93; pillefyrsstyring.c	RELAY = 1;
000902   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
                                           ;	.line	95; pillefyrsstyring.c	last_inputs = get_inputs();
000904   ecb4     call    0x2b68, 0        	CALL	_get_inputs
000906   f015
000908   0108     movlb   0x8              	BANKSEL	_last_inputs
00090a   6f00     movwf   0, 0x1           	MOVWF	_last_inputs, B
00090c   010f     movlb   0xf              	BANKSEL	_output_ac_power_pwm
                                           ;	.line	97; pillefyrsstyring.c	output_ac_power_pwm[0] = 0;
00090e   6b51     clrf    0x51, 0x1        	CLRF	_output_ac_power_pwm, B
000910   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 1)
                                           ;	.line	98; pillefyrsstyring.c	output_ac_power_pwm[1] = 0;
000912   6b52     clrf    0x52, 0x1        	CLRF	(_output_ac_power_pwm + 1), B
000914   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 2)
                                           ;	.line	99; pillefyrsstyring.c	output_ac_power_pwm[2] = 0;
000916   6b53     clrf    0x53, 0x1        	CLRF	(_output_ac_power_pwm + 2), B
000918   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 3)
                                           ;	.line	100; pillefyrsstyring.c	output_ac_power_pwm[3] = 0;
00091a   6b54     clrf    0x54, 0x1        	CLRF	(_output_ac_power_pwm + 3), B
00091c   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 4)
                                           ;	.line	101; pillefyrsstyring.c	output_ac_power_pwm[4] = 0;
00091e   6b55     clrf    0x55, 0x1        	CLRF	(_output_ac_power_pwm + 4), B
000920   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 5)
                                           ;	.line	102; pillefyrsstyring.c	output_ac_power_pwm[5] = 0;
000922   6b56     clrf    0x56, 0x1        	CLRF	(_output_ac_power_pwm + 5), B
                                           _00129_DS_:
                                           ;	.line	108; pillefyrsstyring.c	if (fifo_get(&c)) {
000924   0e08     movlw   0x8              	MOVLW	HIGH(_main_c_1_96)
000926   6e01     movwf   0x1, 0           	MOVWF	r0x01
000928   0e01     movlw   0x1              	MOVLW	LOW(_main_c_1_96)
00092a   6e00     movwf   0, 0             	MOVWF	r0x00
00092c   0e80     movlw   0x80             	MOVLW	0x80
00092e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000930   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000932   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000934   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000936   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000938   5000     movf    0, 0, 0          	MOVF	r0x00, W
00093a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00093c   ec92     call    0x1f24, 0        	CALL	_fifo_get
00093e   f00f
000940   6e00     movwf   0, 0             	MOVWF	r0x00
000942   0e03     movlw   0x3              	MOVLW	0x03
000944   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000946   5000     movf    0, 0, 0          	MOVF	r0x00, W
000948   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
00094a   d0f8     bra     0xb3c            	BRA	_00125_DS_
00094c   0108     movlb   0x8              	BANKSEL	_main_c_1_96
                                           ;	.line	109; pillefyrsstyring.c	if (c == '\n' || c == '.') {
00094e   5101     movf    0x1, 0, 0x1      	MOVF	_main_c_1_96, W, B
000950   0a0a     xorlw   0xa              	XORLW	0x0a
000952   e005     bz      0x95e            	BZ	_00120_DS_
                                           _00175_DS_:
000954   0108     movlb   0x8              	BANKSEL	_main_c_1_96
000956   5101     movf    0x1, 0, 0x1      	MOVF	_main_c_1_96, W, B
000958   0a2e     xorlw   0x2e             	XORLW	0x2e
00095a   e001     bz      0x95e            	BZ	_00120_DS_
00095c   d0c4     bra     0xae6            	BRA	_00121_DS_
                                           _00120_DS_:
00095e   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	111; pillefyrsstyring.c	command_index = 0;
000960   6b7e     clrf    0x7e, 0x1        	CLRF	_command_index, B
                                           ;	.line	112; pillefyrsstyring.c	if (validate_command(command, valid_command)) {
000962   0e00     movlw   0                	MOVLW	HIGH(_command)
000964   6e01     movwf   0x1, 0           	MOVWF	r0x01
000966   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000968   6e00     movwf   0, 0             	MOVWF	r0x00
00096a   0e80     movlw   0x80             	MOVLW	0x80
00096c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00096e   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000970   6e04     movwf   0x4, 0           	MOVWF	r0x04
000972   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
000974   6e03     movwf   0x3, 0           	MOVWF	r0x03
000976   0e80     movlw   0x80             	MOVLW	0x80
000978   6e05     movwf   0x5, 0           	MOVWF	r0x05
00097a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00097c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00097e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000980   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000982   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000984   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000986   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000988   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00098a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00098c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00098e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000990   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000992   ec7a     call    0x12f4, 0        	CALL	_validate_command
000994   f009
000996   6e00     movwf   0, 0             	MOVWF	r0x00
000998   0e06     movlw   0x6              	MOVLW	0x06
00099a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00099c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00099e   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0009a0   d09e     bra     0xade            	BRA	_00115_DS_
0009a2   0004     clrwdt                   	clrwdt 
0009a4   0100     movlb   0                	BANKSEL	_valid_command
                                           ;	.line	115; pillefyrsstyring.c	switch (valid_command[0]) {					// only look at first character
0009a6   51f9     movf    0xf9, 0, 0x1     	MOVF	_valid_command, W, B
0009a8   6e00     movwf   0, 0             	MOVWF	r0x00
0009aa   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009ac   0a67     xorlw   0x67             	XORLW	0x67
0009ae   e101     bnz     0x9b2            	BNZ	_00179_DS_
0009b0   d03c     bra     0xa2a            	BRA	_00110_DS_
                                           _00179_DS_:
0009b2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009b4   0a73     xorlw   0x73             	XORLW	0x73
0009b6   e005     bz      0x9c2            	BZ	_00108_DS_
0009b8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009ba   0a7a     xorlw   0x7a             	XORLW	0x7a
0009bc   e101     bnz     0x9c0            	BNZ	_00183_DS_
0009be   d069     bra     0xa92            	BRA	_00111_DS_
                                           _00183_DS_:
0009c0   d08a     bra     0xad6            	BRA	_00112_DS_
                                           _00108_DS_:
                                           ;	.line	117; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009c2   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00131_DS_:
                                           ;	.line	118; pillefyrsstyring.c	output_ac_power_pwm[j] = valid_command[j + 1];
0009c4   0e51     movlw   0x51             	MOVLW	LOW(_output_ac_power_pwm)
0009c6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0009c8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0009ca   6a02     clrf    0x2, 0           	CLRF	r0x02
0009cc   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
0009ce   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009d0   2800     incf    0, 0, 0          	INCF	r0x00, W
0009d2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0009d4   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
0009d6   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0009d8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0009da   6a05     clrf    0x5, 0           	CLRF	r0x05
0009dc   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
0009de   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
0009e0   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0009e2   ffe9
0009e4   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0009e6   ffea
0009e8   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
0009ea   f004
0009ec   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0009ee   ffe9
0009f0   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0009f2   ffea
0009f4   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
0009f6   ffef
                                           ;	.line	117; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009f8   c003     movff   0x3, 0           	MOVFF	r0x03, r0x00
0009fa   f000
0009fc   0e06     movlw   0x6              	MOVLW	0x06
0009fe   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000a00   e3e1     bnc     0x9c4            	BNC	_00131_DS_
                                           ;	.line	120; pillefyrsstyring.c	usart_putc('!');	// ok values set to ac power pwm system
000a02   0e21     movlw   0x21             	MOVLW	0x21
000a04   ec36     call    0x2c6c, 0        	CALL	_usart_putc
000a06   f016
                                           ;	.line	121; pillefyrsstyring.c	usart_puts("\n\r");
000a08   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a0a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a0c   0e18     movlw   0x18             	MOVLW	HIGH(__str_1)
000a0e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a10   0e1c     movlw   0x1c             	MOVLW	LOW(__str_1)
000a12   6e00     movwf   0, 0             	MOVWF	r0x00
000a14   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a16   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a18   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a1c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a1e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a20   ecb3     call    0x2366, 0        	CALL	_usart_puts
000a22   f011
000a24   0e03     movlw   0x3              	MOVLW	0x03
000a26   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	122; pillefyrsstyring.c	break;
000a28   d089     bra     0xb3c            	BRA	_00125_DS_
                                           _00110_DS_:
                                           ;	.line	124; pillefyrsstyring.c	sprintf(buffer, "g%02x\n\r", sensor_inputs);
000a2a   c802     movff   0x802, 0         	MOVFF	_sensor_inputs, r0x00
000a2c   f000
000a2e   6a01     clrf    0x1, 0           	CLRF	r0x01
000a30   0e00     movlw   0                	MOVLW	UPPER(__str_2)
000a32   6e04     movwf   0x4, 0           	MOVWF	r0x04
000a34   0e18     movlw   0x18             	MOVLW	HIGH(__str_2)
000a36   6e03     movwf   0x3, 0           	MOVWF	r0x03
000a38   0e20     movlw   0x20             	MOVLW	LOW(__str_2)
000a3a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a3c   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_96)
000a3e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a40   0e3e     movlw   0x3e             	MOVLW	LOW(_main_buffer_1_96)
000a42   6e05     movwf   0x5, 0           	MOVWF	r0x05
000a44   0e80     movlw   0x80             	MOVLW	0x80
000a46   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a48   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a4a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a4c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a4e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a50   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a52   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a54   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a56   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a58   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a5a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a5c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a5e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a60   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a62   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a64   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a66   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a68   ec3d     call    0x1a7a, 0        	CALL	_sprintf
000a6a   f00d
000a6c   0e08     movlw   0x8              	MOVLW	0x08
000a6e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	125; pillefyrsstyring.c	usart_puts(buffer);
000a70   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_96)
000a72   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a74   0e3e     movlw   0x3e             	MOVLW	LOW(_main_buffer_1_96)
000a76   6e00     movwf   0, 0             	MOVWF	r0x00
000a78   0e80     movlw   0x80             	MOVLW	0x80
000a7a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a7c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a80   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a84   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a86   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a88   ecb3     call    0x2366, 0        	CALL	_usart_puts
000a8a   f011
000a8c   0e03     movlw   0x3              	MOVLW	0x03
000a8e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	126; pillefyrsstyring.c	break;
000a90   d055     bra     0xb3c            	BRA	_00125_DS_
                                           _00111_DS_:
                                           ;	.line	128; pillefyrsstyring.c	usart_putc('z');
000a92   0e7a     movlw   0x7a             	MOVLW	0x7a
000a94   ec36     call    0x2c6c, 0        	CALL	_usart_putc
000a96   f016
                                           ;	.line	129; pillefyrsstyring.c	usart_puts("\n\r");
000a98   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a9a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a9c   0e18     movlw   0x18             	MOVLW	HIGH(__str_1)
000a9e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000aa0   0e1c     movlw   0x1c             	MOVLW	LOW(__str_1)
000aa2   6e00     movwf   0, 0             	MOVWF	r0x00
000aa4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000aa6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aaa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aac   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ab0   ecb3     call    0x2366, 0        	CALL	_usart_puts
000ab2   f011
000ab4   0e03     movlw   0x3              	MOVLW	0x03
000ab6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	130; pillefyrsstyring.c	sleep_ms(100);
000ab8   0e00     movlw   0                	MOVLW	0x00
000aba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000abc   0e00     movlw   0                	MOVLW	0x00
000abe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac0   0e00     movlw   0                	MOVLW	0x00
000ac2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac4   0e64     movlw   0x64             	MOVLW	0x64
000ac6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac8   ec23     call    0x1446, 0        	CALL	_sleep_ms
000aca   f00a
000acc   0e04     movlw   0x4              	MOVLW	0x04
000ace   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	131; pillefyrsstyring.c	reset();
000ad0   ec2e     call    0x2c5c, 0        	CALL	_reset
000ad2   f016
                                           ;	.line	132; pillefyrsstyring.c	break;
000ad4   d033     bra     0xb3c            	BRA	_00125_DS_
                                           _00112_DS_:
                                           ;	.line	134; pillefyrsstyring.c	usart_putc('?');	// unknown command
000ad6   0e3f     movlw   0x3f             	MOVLW	0x3f
000ad8   ec36     call    0x2c6c, 0        	CALL	_usart_putc
000ada   f016
                                           ;	.line	135; pillefyrsstyring.c	}		
000adc   d02f     bra     0xb3c            	BRA	_00125_DS_
                                           _00115_DS_:
                                           ;	.line	138; pillefyrsstyring.c	usart_putc('?');			// command not valid
000ade   0e3f     movlw   0x3f             	MOVLW	0x3f
000ae0   ec36     call    0x2c6c, 0        	CALL	_usart_putc
000ae2   f016
000ae4   d02b     bra     0xb3c            	BRA	_00125_DS_
                                           _00121_DS_:
                                           ;	.line	144; pillefyrsstyring.c	if (command_index <= COMMAND_LENGTH) {
000ae6   0e15     movlw   0x15             	MOVLW	0x15
000ae8   010f     movlb   0xf              	BANKSEL	_command_index
000aea   5d7e     subwf   0x7e, 0, 0x1     	SUBWF	_command_index, W, B
000aec   e210     bc      0xb0e            	BC	_00118_DS_
                                           ;	.line	145; pillefyrsstyring.c	command[command_index] = c;
000aee   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000af0   010f     movlb   0xf              	BANKSEL	_command_index
000af2   257e     addwf   0x7e, 0, 0x1     	ADDWF	_command_index, W, B
000af4   6e00     movwf   0, 0             	MOVWF	r0x00
000af6   6a01     clrf    0x1, 0           	CLRF	r0x01
000af8   0e00     movlw   0                	MOVLW	HIGH(_command)
000afa   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000afc   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000afe   ffe9
000b00   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000b02   ffea
000b04   c801     movff   0x801, 0xfef     	MOVFF	_main_c_1_96, INDF0
000b06   ffef
000b08   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	146; pillefyrsstyring.c	command_index++;
000b0a   2b7e     incf    0x7e, 0x1, 0x1   	INCF	_command_index, F, B
000b0c   d017     bra     0xb3c            	BRA	_00125_DS_
                                           _00118_DS_:
000b0e   0100     movlb   0                	BANKSEL	(_command + 20)
                                           ;	.line	149; pillefyrsstyring.c	command[COMMAND_LENGTH] = '\0';	// null terminate it
000b10   6bf8     clrf    0xf8, 0x1        	CLRF	(_command + 20), B
000b12   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	150; pillefyrsstyring.c	command_index = 0;
000b14   6b7e     clrf    0x7e, 0x1        	CLRF	_command_index, B
                                           ;	.line	151; pillefyrsstyring.c	usart_putc('+');		// overflow
000b16   0e2b     movlw   0x2b             	MOVLW	0x2b
000b18   ec36     call    0x2c6c, 0        	CALL	_usart_putc
000b1a   f016
                                           ;	.line	152; pillefyrsstyring.c	usart_puts("\n\r");
000b1c   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000b1e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000b20   0e18     movlw   0x18             	MOVLW	HIGH(__str_1)
000b22   6e01     movwf   0x1, 0           	MOVWF	r0x01
000b24   0e1c     movlw   0x1c             	MOVLW	LOW(__str_1)
000b26   6e00     movwf   0, 0             	MOVWF	r0x00
000b28   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b2a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b2e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b30   5000     movf    0, 0, 0          	MOVF	r0x00, W
000b32   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b34   ecb3     call    0x2366, 0        	CALL	_usart_puts
000b36   f011
000b38   0e03     movlw   0x3              	MOVLW	0x03
000b3a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00125_DS_:
000b3c   0108     movlb   0x8              	BANKSEL	_sensor_inputs
                                           ;	.line	157; pillefyrsstyring.c	if (sensor_inputs != last_inputs) {
000b3e   5102     movf    0x2, 0, 0x1      	MOVF	_sensor_inputs, W, B
000b40   0108     movlb   0x8              	BANKSEL	_last_inputs
000b42   1900     xorwf   0, 0, 0x1        	XORWF	_last_inputs, W, B
000b44   e101     bnz     0xb48            	BNZ	_00187_DS_
000b46   d6ee     bra     0x924            	BRA	_00129_DS_
                                           _00187_DS_:
                                           ;	.line	158; pillefyrsstyring.c	last_inputs = sensor_inputs;
000b48   c802     movff   0x802, 0x800     	MOVFF	_sensor_inputs, _last_inputs
000b4a   f800
                                           ;	.line	159; pillefyrsstyring.c	_debug();	// blocks main for a while :-/
000b4c   ec47     call    0x248e, 0        	CALL	__debug
000b4e   f012
000b50   d6e9     bra     0x924            	BRA	_00129_DS_
000b52   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	405; pillefyrsstyring.c	void _debug() {
00248e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002490   ffe5
002492   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002494   ffd9
                                           ;	.line	406; pillefyrsstyring.c	latched_lcd_power(0);
002496   0e00     movlw   0                	MOVLW	0x00
002498   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00249a   ec39     call    0x2872, 0        	CALL	_latched_lcd_power
00249c   f014
00249e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	407; pillefyrsstyring.c	sleep_ms(200);
0024a0   0e00     movlw   0                	MOVLW	0x00
0024a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a4   0e00     movlw   0                	MOVLW	0x00
0024a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a8   0e00     movlw   0                	MOVLW	0x00
0024aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ac   0ec8     movlw   0xc8             	MOVLW	0xc8
0024ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024b0   ec23     call    0x1446, 0        	CALL	_sleep_ms
0024b2   f00a
0024b4   0e04     movlw   0x4              	MOVLW	0x04
0024b6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	408; pillefyrsstyring.c	latched_lcd_power(1);
0024b8   0e01     movlw   0x1              	MOVLW	0x01
0024ba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024bc   ec39     call    0x2872, 0        	CALL	_latched_lcd_power
0024be   f014
0024c0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	409; pillefyrsstyring.c	sleep_ms(200);
0024c2   0e00     movlw   0                	MOVLW	0x00
0024c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024c6   0e00     movlw   0                	MOVLW	0x00
0024c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ca   0e00     movlw   0                	MOVLW	0x00
0024cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ce   0ec8     movlw   0xc8             	MOVLW	0xc8
0024d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024d2   ec23     call    0x1446, 0        	CALL	_sleep_ms
0024d4   f00a
0024d6   0e04     movlw   0x4              	MOVLW	0x04
0024d8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0024da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0024dc   ffd9
0024de   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__reset	code
                                           _reset:
                                           ;	.line	399; pillefyrsstyring.c	void reset() {
002c5c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c5e   ffe5
002c60   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c62   ffd9
002c64   00ff     reset                    	reset
002c66   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c68   ffd9
002c6a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__validate_command	code
                                           _validate_command:
                                           ;	.line	382; pillefyrsstyring.c	unsigned char validate_command(unsigned char *encoded_command, unsigned char *validated_command) {
0012f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0012f6   ffe5
0012f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0012fa   ffd9
0012fc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0012fe   ffe5
001300   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001302   ffe5
001304   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001306   ffe5
001308   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00130a   ffe5
00130c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00130e   ffe5
001310   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001312   ffe5
001314   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001316   ffe5
001318   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00131a   ffe5
00131c   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00131e   ffe5
001320   0e02     movlw   0x2              	MOVLW	0x02
001322   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001324   f000
001326   0e03     movlw   0x3              	MOVLW	0x03
001328   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00132a   f001
00132c   0e04     movlw   0x4              	MOVLW	0x04
00132e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001330   f002
001332   0e05     movlw   0x5              	MOVLW	0x05
001334   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
001336   f003
001338   0e06     movlw   0x6              	MOVLW	0x06
00133a   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
00133c   f004
00133e   0e07     movlw   0x7              	MOVLW	0x07
001340   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
001342   f005
                                           ;	.line	386; pillefyrsstyring.c	base64decode(encoded_command, decoded_command);
001344   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_145)
001346   6e07     movwf   0x7, 0           	MOVWF	r0x07
001348   0e48     movlw   0x48             	MOVLW	LOW(_validate_command_decoded_command_1_145)
00134a   6e06     movwf   0x6, 0           	MOVWF	r0x06
00134c   0e80     movlw   0x80             	MOVLW	0x80
00134e   6e08     movwf   0x8, 0           	MOVWF	r0x08
001350   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001352   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001354   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001356   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001358   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00135a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00135c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00135e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001360   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001362   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001364   5000     movf    0, 0, 0          	MOVF	r0x00, W
001366   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001368   ecb4     call    0xf68, 0         	CALL	_base64decode
00136a   f007
00136c   0e06     movlw   0x6              	MOVLW	0x06
00136e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	387; pillefyrsstyring.c	received_checksum = (decoded_command[7] << 8) + decoded_command[8];
001370   cf4f     movff   0xf4f, 0         	MOVFF	(_validate_command_decoded_command_1_145 + 7), r0x00
001372   f000
001374   6a01     clrf    0x1, 0           	CLRF	r0x01
001376   5000     movf    0, 0, 0          	MOVF	r0x00, W
001378   6e06     movwf   0x6, 0           	MOVWF	r0x06
00137a   6a02     clrf    0x2, 0           	CLRF	r0x02
00137c   cf50     movff   0xf50, 0         	MOVFF	(_validate_command_decoded_command_1_145 + 8), r0x00
00137e   f000
001380   6a01     clrf    0x1, 0           	CLRF	r0x01
001382   5000     movf    0, 0, 0          	MOVF	r0x00, W
001384   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
001386   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001388   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
                                           ;	.line	388; pillefyrsstyring.c	checksum = crc16(decoded_command, 7, 0);
00138a   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_145)
00138c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00138e   0e48     movlw   0x48             	MOVLW	LOW(_validate_command_decoded_command_1_145)
001390   6e00     movwf   0, 0             	MOVWF	r0x00
001392   0e80     movlw   0x80             	MOVLW	0x80
001394   6e07     movwf   0x7, 0           	MOVWF	r0x07
001396   0e00     movlw   0                	MOVLW	0x00
001398   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00139a   0e00     movlw   0                	MOVLW	0x00
00139c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00139e   0e00     movlw   0                	MOVLW	0x00
0013a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013a2   0e00     movlw   0                	MOVLW	0x00
0013a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013a6   0e00     movlw   0                	MOVLW	0x00
0013a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013aa   0e07     movlw   0x7              	MOVLW	0x07
0013ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013ae   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0013b0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013b2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0013b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013b6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0013b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013ba   eccb     call    0x1596, 0        	CALL	_crc16
0013bc   f00a
0013be   6e00     movwf   0, 0             	MOVWF	r0x00
0013c0   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0013c2   f001
0013c4   0e09     movlw   0x9              	MOVLW	0x09
0013c6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	390; pillefyrsstyring.c	if (received_checksum == checksum) {
0013c8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0013ca   1800     xorwf   0, 0, 0          	XORWF	r0x00, W
0013cc   e103     bnz     0x13d4           	BNZ	_00344_DS_
0013ce   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0013d0   1801     xorwf   0x1, 0, 0        	XORWF	r0x01, W
0013d2   e001     bz      0x13d6           	BZ	_00345_DS_
                                           _00344_DS_:
0013d4   d022     bra     0x141a           	BRA	_00337_DS_
                                           _00345_DS_:
                                           ;	.line	391; pillefyrsstyring.c	memcpy(validated_command, decoded_command, 7);
0013d6   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0013d8   6e05     movwf   0x5, 0           	MOVWF	r0x05
0013da   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0013dc   6e04     movwf   0x4, 0           	MOVWF	r0x04
0013de   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0013e0   6e03     movwf   0x3, 0           	MOVWF	r0x03
0013e2   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_145)
0013e4   6e01     movwf   0x1, 0           	MOVWF	r0x01
0013e6   0e48     movlw   0x48             	MOVLW	LOW(_validate_command_decoded_command_1_145)
0013e8   6e00     movwf   0, 0             	MOVWF	r0x00
0013ea   0e80     movlw   0x80             	MOVLW	0x80
0013ec   6e02     movwf   0x2, 0           	MOVWF	r0x02
0013ee   0e00     movlw   0                	MOVLW	0x00
0013f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013f2   0e07     movlw   0x7              	MOVLW	0x07
0013f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013f6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0013f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013fa   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0013fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013fe   5000     movf    0, 0, 0          	MOVF	r0x00, W
001400   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001402   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001404   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001406   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001408   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00140a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00140c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00140e   ec50     call    0x1ca0, 0        	CALL	_memcpy
001410   f00e
001412   0e08     movlw   0x8              	MOVLW	0x08
001414   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	392; pillefyrsstyring.c	return 1;
001416   0e01     movlw   0x1              	MOVLW	0x01
001418   d001     bra     0x141c           	BRA	_00339_DS_
                                           _00337_DS_:
                                           ;	.line	395; pillefyrsstyring.c	return 0;
00141a   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00339_DS_:
00141c   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00141e   f008
001420   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001422   f007
001424   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001426   f006
001428   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00142a   f005
00142c   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00142e   f004
001430   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001432   f003
001434   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001436   f002
001438   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00143a   f001
00143c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00143e   f000
001440   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001442   ffd9
001444   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64encode	code
                                           _base64encode:
                                           ;	.line	372; pillefyrsstyring.c	void base64encode(unsigned char *s) {
002c7c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c7e   ffe5
002c80   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c82   ffd9
                                           ;	.line	380; pillefyrsstyring.c	}
002c84   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c86   ffd9
002c88   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64decode	code
                                           _base64decode:
                                           ;	.line	357; pillefyrsstyring.c	void base64decode(unsigned char *s, unsigned char *buffer) {
000f68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000f6a   ffe5
000f6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000f6e   ffd9
000f70   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000f72   ffe5
000f74   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000f76   ffe5
000f78   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000f7a   ffe5
000f7c   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000f7e   ffe5
000f80   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000f82   ffe5
000f84   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000f86   ffe5
000f88   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000f8a   ffe5
000f8c   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000f8e   ffe5
000f90   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000f92   ffe5
000f94   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000f96   ffe5
000f98   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000f9a   ffe5
000f9c   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000f9e   ffe5
000fa0   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
000fa2   ffe5
000fa4   0e02     movlw   0x2              	MOVLW	0x02
000fa6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000fa8   f000
000faa   0e03     movlw   0x3              	MOVLW	0x03
000fac   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000fae   f001
000fb0   0e04     movlw   0x4              	MOVLW	0x04
000fb2   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000fb4   f002
000fb6   0e05     movlw   0x5              	MOVLW	0x05
000fb8   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
000fba   f003
000fbc   0e06     movlw   0x6              	MOVLW	0x06
000fbe   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
000fc0   f004
000fc2   0e07     movlw   0x7              	MOVLW	0x07
000fc4   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
000fc6   f005
                                           ;	.line	362; pillefyrsstyring.c	char xlate[] = "0123456789abcdef";
000fc8   0e30     movlw   0x30             	MOVLW	0x30
000fca   010f     movlb   0xf              	BANKSEL	_base64decode_xlate_1_140
000fcc   6f20     movwf   0x20, 0x1        	MOVWF	_base64decode_xlate_1_140, B
000fce   0e31     movlw   0x31             	MOVLW	0x31
000fd0   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 1)
000fd2   6f21     movwf   0x21, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 1), B
000fd4   0e32     movlw   0x32             	MOVLW	0x32
000fd6   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 2)
000fd8   6f22     movwf   0x22, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 2), B
000fda   0e33     movlw   0x33             	MOVLW	0x33
000fdc   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 3)
000fde   6f23     movwf   0x23, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 3), B
000fe0   0e34     movlw   0x34             	MOVLW	0x34
000fe2   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 4)
000fe4   6f24     movwf   0x24, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 4), B
000fe6   0e35     movlw   0x35             	MOVLW	0x35
000fe8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 5)
000fea   6f25     movwf   0x25, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 5), B
000fec   0e36     movlw   0x36             	MOVLW	0x36
000fee   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 6)
000ff0   6f26     movwf   0x26, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 6), B
000ff2   0e37     movlw   0x37             	MOVLW	0x37
000ff4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 7)
000ff6   6f27     movwf   0x27, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 7), B
000ff8   0e38     movlw   0x38             	MOVLW	0x38
000ffa   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 8)
000ffc   6f28     movwf   0x28, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 8), B
000ffe   0e39     movlw   0x39             	MOVLW	0x39
001000   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 9)
001002   6f29     movwf   0x29, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 9), B
001004   0e61     movlw   0x61             	MOVLW	0x61
001006   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 10)
001008   6f2a     movwf   0x2a, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 10), B
00100a   0e62     movlw   0x62             	MOVLW	0x62
00100c   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 11)
00100e   6f2b     movwf   0x2b, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 11), B
001010   0e63     movlw   0x63             	MOVLW	0x63
001012   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 12)
001014   6f2c     movwf   0x2c, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 12), B
001016   0e64     movlw   0x64             	MOVLW	0x64
001018   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 13)
00101a   6f2d     movwf   0x2d, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 13), B
00101c   0e65     movlw   0x65             	MOVLW	0x65
00101e   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 14)
001020   6f2e     movwf   0x2e, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 14), B
001022   0e66     movlw   0x66             	MOVLW	0x66
001024   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 15)
001026   6f2f     movwf   0x2f, 0x1        	MOVWF	(_base64decode_xlate_1_140 + 15), B
001028   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_140 + 16)
00102a   6b30     clrf    0x30, 0x1        	CLRF	(_base64decode_xlate_1_140 + 16), B
                                           _00314_DS_:
                                           ;	.line	364; pillefyrsstyring.c	while (*h) {
00102c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00102e   ffe9
001030   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001032   fff3
001034   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001036   ecd8     call    0x2bb0, 0        	CALL	__gptrget1
001038   f015
00103a   6e06     movwf   0x6, 0           	MOVWF	r0x06
00103c   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00103e   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001040   d060     bra     0x1102           	BRA	_00317_DS_
                                           ;	.line	365; pillefyrsstyring.c	*b = ((strchr(xlate, *h) - xlate) * 16) /* multiply leading digit by 16 */
001042   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_140)
001044   6e08     movwf   0x8, 0           	MOVWF	r0x08
001046   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_140)
001048   6e07     movwf   0x7, 0           	MOVWF	r0x07
00104a   0e80     movlw   0x80             	MOVLW	0x80
00104c   6e09     movwf   0x9, 0           	MOVWF	r0x09
00104e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001050   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001052   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001054   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001056   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001058   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00105a   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00105c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00105e   ec27     call    0x224e, 0        	CALL	_strchr
001060   f011
001062   6e06     movwf   0x6, 0           	MOVWF	r0x06
001064   cff3     movff   0xff3, 0x7       	MOVFF	PRODL, r0x07
001066   f007
001068   cff4     movff   0xff4, 0x8       	MOVFF	PRODH, r0x08
00106a   f008
00106c   0e04     movlw   0x4              	MOVLW	0x04
00106e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001070   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_140)
001072   5e06     subwf   0x6, 0x1, 0      	SUBWF	r0x06, F
001074   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_140)
001076   5a07     subwfb  0x7, 0x1, 0      	SUBWFB	r0x07, F
                                           ; ;multiply lit val:0x10 by variable r0x06 and store in r0x06
001078   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00107a   0d10     mullw   0x10             	MULLW	0x10
00107c   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
00107e   f006
                                           ;	.line	366; pillefyrsstyring.c	+ ((strchr(xlate, *(h+1)) - xlate));
001080   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_140)
001082   6e08     movwf   0x8, 0           	MOVWF	r0x08
001084   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_140)
001086   6e07     movwf   0x7, 0           	MOVWF	r0x07
001088   0e80     movlw   0x80             	MOVLW	0x80
00108a   6e09     movwf   0x9, 0           	MOVWF	r0x09
00108c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00108e   0f01     addlw   0x1              	ADDLW	0x01
001090   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001092   0e00     movlw   0                	MOVLW	0x00
001094   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
001096   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
001098   0e00     movlw   0                	MOVLW	0x00
00109a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00109c   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
00109e   c00a     movff   0xa, 0xfe9       	MOVFF	r0x0a, FSR0L
0010a0   ffe9
0010a2   c00b     movff   0xb, 0xff3       	MOVFF	r0x0b, PRODL
0010a4   fff3
0010a6   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
0010a8   ecd8     call    0x2bb0, 0        	CALL	__gptrget1
0010aa   f015
0010ac   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0010ae   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0010b0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010b2   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0010b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010b6   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0010b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010ba   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0010bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010be   ec27     call    0x224e, 0        	CALL	_strchr
0010c0   f011
0010c2   6e07     movwf   0x7, 0           	MOVWF	r0x07
0010c4   cff3     movff   0xff3, 0x8       	MOVFF	PRODL, r0x08
0010c6   f008
0010c8   cff4     movff   0xff4, 0x9       	MOVFF	PRODH, r0x09
0010ca   f009
0010cc   0e04     movlw   0x4              	MOVLW	0x04
0010ce   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0010d0   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_140)
0010d2   5e07     subwf   0x7, 0x1, 0      	SUBWF	r0x07, F
0010d4   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_140)
0010d6   5a08     subwfb  0x8, 0x1, 0      	SUBWFB	r0x08, F
0010d8   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0010da   2606     addwf   0x6, 0x1, 0      	ADDWF	r0x06, F
0010dc   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0010de   ffe5
0010e0   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0010e2   ffe9
0010e4   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0010e6   fff3
0010e8   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0010ea   ec06     call    0x2c0c, 0        	CALL	__gptrput1
0010ec   f016
                                           ;	.line	367; pillefyrsstyring.c	h += 2;
0010ee   0e02     movlw   0x2              	MOVLW	0x02
0010f0   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0010f2   0e00     movlw   0                	MOVLW	0x00
0010f4   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0010f6   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
                                           ;	.line	368; pillefyrsstyring.c	b++;
0010f8   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0010fa   e398     bnc     0x102c           	BNC	_00314_DS_
0010fc   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
0010fe   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
                                           _00326_DS_:
001100   d795     bra     0x102c           	BRA	_00314_DS_
                                           _00317_DS_:
001102   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
001104   f00c
001106   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001108   f00b
00110a   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
00110c   f00a
00110e   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001110   f009
001112   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001114   f008
001116   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001118   f007
00111a   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00111c   f006
00111e   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001120   f005
001122   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001124   f004
001126   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001128   f003
00112a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00112c   f002
00112e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001130   f001
001132   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001134   f000
001136   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001138   ffd9
00113a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_get	code
                                           _fifo_get:
                                           ;	.line	347; pillefyrsstyring.c	unsigned char fifo_get(unsigned char *c) {
001f24   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f26   ffe5
001f28   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f2a   ffd9
001f2c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001f2e   ffe5
001f30   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001f32   ffe5
001f34   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001f36   ffe5
001f38   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001f3a   ffe5
001f3c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001f3e   ffe5
001f40   0e02     movlw   0x2              	MOVLW	0x02
001f42   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001f44   f000
001f46   0e03     movlw   0x3              	MOVLW	0x03
001f48   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001f4a   f001
001f4c   0e04     movlw   0x4              	MOVLW	0x04
001f4e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001f50   f002
                                           ;	.line	348; pillefyrsstyring.c	if (fifo_in_use() != 0) {
001f52   ecdf     call    0x29be, 0        	CALL	_fifo_in_use
001f54   f014
001f56   6e03     movwf   0x3, 0           	MOVWF	r0x03
001f58   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001f5a   e02d     bz      0x1fb6           	BZ	_00307_DS_
                                           ;	.line	349; pillefyrsstyring.c	*c = fifo_buffer[fifo_tail++ % QUEUE_SIZE];
001f5c   cf74     movff   0xf74, 0x3       	MOVFF	_fifo_tail, r0x03
001f5e   f003
001f60   cf75     movff   0xf75, 0x4       	MOVFF	(_fifo_tail + 1), r0x04
001f62   f004
001f64   010f     movlb   0xf              	BANKSEL	_fifo_tail
001f66   3f74     incfsz  0x74, 0x1, 0x1   	INCFSZ	_fifo_tail, F, B
001f68   d002     bra     0x1f6e           	BRA	_10355_DS_
001f6a   010f     movlb   0xf              	BANKSEL	(_fifo_tail + 1)
001f6c   2b75     incf    0x75, 0x1, 0x1   	INCF	(_fifo_tail + 1), F, B
                                           _10355_DS_:
001f6e   0e00     movlw   0                	MOVLW	0x00
001f70   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001f72   0e64     movlw   0x64             	MOVLW	0x64
001f74   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001f76   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001f78   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001f7a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001f7c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001f7e   ec35     call    0x1e6a, 0        	CALL	__moduint
001f80   f00f
001f82   6e03     movwf   0x3, 0           	MOVWF	r0x03
001f84   cff3     movff   0xff3, 0x4       	MOVFF	PRODL, r0x04
001f86   f004
001f88   0e04     movlw   0x4              	MOVLW	0x04
001f8a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001f8c   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
001f8e   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
001f90   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
001f92   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
001f94   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
001f96   ffe9
001f98   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
001f9a   ffea
001f9c   cfef     movff   0xfef, 0x3       	MOVFF	INDF0, r0x03
001f9e   f003
001fa0   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001fa2   ffe5
001fa4   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001fa6   ffe9
001fa8   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001faa   fff3
001fac   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001fae   ec06     call    0x2c0c, 0        	CALL	__gptrput1
001fb0   f016
                                           ;	.line	350; pillefyrsstyring.c	return 1;
001fb2   0e01     movlw   0x1              	MOVLW	0x01
001fb4   d001     bra     0x1fb8           	BRA	_00309_DS_
                                           _00307_DS_:
                                           ;	.line	353; pillefyrsstyring.c	return 0;
001fb6   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00309_DS_:
001fb8   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001fba   f004
001fbc   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001fbe   f003
001fc0   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001fc2   f002
001fc4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001fc6   f001
001fc8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001fca   f000
001fcc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001fce   ffd9
001fd0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_put	code
                                           _fifo_put:
                                           ;	.line	337; pillefyrsstyring.c	unsigned char fifo_put(unsigned char c) {
0022e4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022e6   ffe5
0022e8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022ea   ffd9
0022ec   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0022ee   ffe5
0022f0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0022f2   ffe5
0022f4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0022f6   ffe5
0022f8   0e02     movlw   0x2              	MOVLW	0x02
0022fa   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0022fc   f000
                                           ;	.line	338; pillefyrsstyring.c	if (fifo_in_use() != QUEUE_SIZE) {
0022fe   ecdf     call    0x29be, 0        	CALL	_fifo_in_use
002300   f014
002302   6e01     movwf   0x1, 0           	MOVWF	r0x01
002304   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002306   0a64     xorlw   0x64             	XORLW	0x64
002308   e024     bz      0x2352           	BZ	_00293_DS_
                                           ;	.line	339; pillefyrsstyring.c	fifo_buffer[fifo_head++ % QUEUE_SIZE] = c;
00230a   cf72     movff   0xf72, 0x1       	MOVFF	_fifo_head, r0x01
00230c   f001
00230e   cf73     movff   0xf73, 0x2       	MOVFF	(_fifo_head + 1), r0x02
002310   f002
002312   010f     movlb   0xf              	BANKSEL	_fifo_head
002314   3f72     incfsz  0x72, 0x1, 0x1   	INCFSZ	_fifo_head, F, B
002316   d002     bra     0x231c           	BRA	_20356_DS_
002318   010f     movlb   0xf              	BANKSEL	(_fifo_head + 1)
00231a   2b73     incf    0x73, 0x1, 0x1   	INCF	(_fifo_head + 1), F, B
                                           _20356_DS_:
00231c   0e00     movlw   0                	MOVLW	0x00
00231e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002320   0e64     movlw   0x64             	MOVLW	0x64
002322   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002324   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002326   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002328   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00232a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00232c   ec35     call    0x1e6a, 0        	CALL	__moduint
00232e   f00f
002330   6e01     movwf   0x1, 0           	MOVWF	r0x01
002332   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
002334   f002
002336   0e04     movlw   0x4              	MOVLW	0x04
002338   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00233a   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
00233c   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00233e   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002340   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
002342   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
002344   ffe9
002346   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
002348   ffea
00234a   c000     movff   0, 0xfef         	MOVFF	r0x00, INDF0
00234c   ffef
                                           ;	.line	340; pillefyrsstyring.c	return 1;
00234e   0e01     movlw   0x1              	MOVLW	0x01
002350   d001     bra     0x2354           	BRA	_00295_DS_
                                           _00293_DS_:
                                           ;	.line	343; pillefyrsstyring.c	return 0;
002352   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00295_DS_:
002354   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002356   f002
002358   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00235a   f001
00235c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00235e   f000
002360   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002362   ffd9
002364   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_in_use	code
                                           _fifo_in_use:
                                           ;	.line	333; pillefyrsstyring.c	unsigned char fifo_in_use() {
0029be   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029c0   ffe5
0029c2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029c4   ffd9
0029c6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029c8   ffe5
0029ca   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0029cc   ffe5
0029ce   010f     movlb   0xf              	BANKSEL	_fifo_head
                                           ;	.line	334; pillefyrsstyring.c	return fifo_head - fifo_tail;
0029d0   5172     movf    0x72, 0, 0x1     	MOVF	_fifo_head, W, B
0029d2   6e00     movwf   0, 0             	MOVWF	r0x00
0029d4   010f     movlb   0xf              	BANKSEL	_fifo_tail
0029d6   5174     movf    0x74, 0, 0x1     	MOVF	_fifo_tail, W, B
0029d8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0029da   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0029dc   5e00     subwf   0, 0x1, 0        	SUBWF	r0x00, F
0029de   5000     movf    0, 0, 0          	MOVF	r0x00, W
0029e0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0029e2   f001
0029e4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029e6   f000
0029e8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029ea   ffd9
0029ec   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	303; pillefyrsstyring.c	void my_usart_open() {
002a78   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a7a   ffe5
002a7c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a7e   ffd9
                                           ;	.line	304; pillefyrsstyring.c	SPBRG = 103;					// 8MHz => 19230 baud
002a80   0e67     movlw   0x67             	MOVLW	0x67
002a82   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	305; pillefyrsstyring.c	TXSTAbits.BRGH = 1;	// (1 = high speed)
002a84   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	306; pillefyrsstyring.c	TXSTAbits.SYNC = 0;	// (0 = asynchronous)
002a86   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	307; pillefyrsstyring.c	BAUDCONbits.BRG16 = 1;
002a88   86b8     bsf     0xb8, 0x3, 0     	BSF	_BAUDCONbits, 3
                                           ;	.line	310; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
002a8a   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	313; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
002a8c   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	314; pillefyrsstyring.c	IPR1bits.TXIP = 0; // USART Tx on low priority interrupt
002a8e   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	317; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
002a90   8a9d     bsf     0x9d, 0x5, 0     	BSF	_PIE1bits, 5
                                           ;	.line	318; pillefyrsstyring.c	IPR1bits.RCIP = 0; // USART Rx on low priority interrupt
002a92   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	321; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
002a94   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	324; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
002a96   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	327; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
002a98   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           ;	.line	330; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
002a9a   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
002a9c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a9e   ffd9
002aa0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	291; pillefyrsstyring.c	unsigned char get_inputs() {
002b68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b6a   ffe5
002b6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b6e   ffd9
002b70   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b72   ffe5
                                           ;	.line	295; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
002b74   0eff     movlw   0xff             	MOVLW	0xff
002b76   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	296; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
002b78   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	297; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
002b7a   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
002b7c   f000
                                           ;	.line	298; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
002b7e   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	300; pillefyrsstyring.c	return data;
002b80   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b82   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b84   f000
002b86   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b88   ffd9
002b8a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	274; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
002438   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00243a   ffe5
00243c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00243e   ffd9
002440   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002442   ffe5
002444   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002446   ffe5
002448   0e02     movlw   0x2              	MOVLW	0x02
00244a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00244c   f000
00244e   0e03     movlw   0x3              	MOVLW	0x03
002450   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
002452   f001
                                           ;	.line	275; pillefyrsstyring.c	header_mask &= 0b00111111;		// only 6 outputs on this hardware
002454   0e3f     movlw   0x3f             	MOVLW	0x3f
002456   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	276; pillefyrsstyring.c	value &= header_mask;
002458   5000     movf    0, 0, 0          	MOVF	r0x00, W
00245a   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	277; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
00245c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	278; pillefyrsstyring.c	if (value) {	// set it
00245e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002460   e006     bz      0x246e           	BZ	_00270_DS_
                                           ;	.line	279; pillefyrsstyring.c	_latch_2_data |= header_mask;
002462   5000     movf    0, 0, 0          	MOVF	r0x00, W
002464   0108     movlb   0x8              	BANKSEL	__latch_2_data
002466   1304     iorwf   0x4, 0x1, 0x1    	IORWF	__latch_2_data, F, B
                                           ;	.line	280; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
002468   c804     movff   0x804, 0xf8c     	MOVFF	__latch_2_data, _LATD
00246a   ff8c
00246c   d006     bra     0x247a           	BRA	_00271_DS_
                                           _00270_DS_:
                                           ;	.line	283; pillefyrsstyring.c	_latch_2_data &= ~header_mask;
00246e   1e00     comf    0, 0x1, 0        	COMF	r0x00, F
002470   5000     movf    0, 0, 0          	MOVF	r0x00, W
002472   0108     movlb   0x8              	BANKSEL	__latch_2_data
002474   1704     andwf   0x4, 0x1, 0x1    	ANDWF	__latch_2_data, F, B
                                           ;	.line	284; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
002476   c804     movff   0x804, 0xf8c     	MOVFF	__latch_2_data, _LATD
002478   ff8c
                                           _00271_DS_:
                                           ;	.line	286; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
00247a   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	287; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
00247c   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	288; pillefyrsstyring.c	LATCH_DATA = 0x00;
00247e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002480   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002482   f001
002484   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002486   f000
002488   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00248a   ffd9
00248c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	254; pillefyrsstyring.c	void init_latches() {
002aa2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002aa4   ffe5
002aa6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002aa8   ffd9
                                           ;	.line	255; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002aaa   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	256; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
002aac   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	257; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
002aae   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	259; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
002ab0   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	260; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002ab2   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
002ab4   0108     movlb   0x8              	BANKSEL	__latch_2_data
                                           ;	.line	261; pillefyrsstyring.c	_latch_2_data = 0x00;
002ab6   6b04     clrf    0x4, 0x1         	CLRF	__latch_2_data, B
                                           ;	.line	263; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
002ab8   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	264; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
002aba   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	266; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
002abc   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	267; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
002abe   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	269; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
002ac0   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	270; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
002ac2   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
002ac4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ac6   ffd9
002ac8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	226; pillefyrsstyring.c	void init_timers() {
0028e6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028e8   ffe5
0028ea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028ec   ffd9
                                           ;	.line	228; pillefyrsstyring.c	T0CONbits.TMR0ON = 1;
0028ee   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	229; pillefyrsstyring.c	T0CONbits.T0PS0 = 0;
0028f0   90d5     bcf     0xd5, 0, 0       	BCF	_T0CONbits, 0
                                           ;	.line	230; pillefyrsstyring.c	T0CONbits.T0PS1 = 0;
0028f2   92d5     bcf     0xd5, 0x1, 0     	BCF	_T0CONbits, 1
                                           ;	.line	231; pillefyrsstyring.c	T0CONbits.T0PS2 = 0;	// prescaler 1:2
0028f4   94d5     bcf     0xd5, 0x2, 0     	BCF	_T0CONbits, 2
                                           ;	.line	232; pillefyrsstyring.c	T0CONbits.T08BIT = 0;   // use timer0 16-bit counter
0028f6   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	233; pillefyrsstyring.c	T0CONbits.T0CS = 0;             // internal clock source
0028f8   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	234; pillefyrsstyring.c	T0CONbits.PSA = 0;              // enable timer0 prescaler
0028fa   96d5     bcf     0xd5, 0x3, 0     	BCF	_T0CONbits, 3
                                           ;	.line	235; pillefyrsstyring.c	INTCON2bits.TMR0IP = 1; // high priority
0028fc   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	236; pillefyrsstyring.c	INTCONbits.T0IE = 1;    // Ensure that TMR0 Interrupt is enabled
0028fe   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	237; pillefyrsstyring.c	INTCONbits.TMR0IF = 1;  // Force Instant entry to Timer 0 Interrupt
002900   84f2     bsf     0xf2, 0x2, 0     	BSF	_INTCONbits, 2
                                           ;	.line	240; pillefyrsstyring.c	T1CONbits.TMR1ON = 1;
002902   80cd     bsf     0xcd, 0, 0       	BSF	_T1CONbits, 0
                                           ;	.line	241; pillefyrsstyring.c	T1CONbits.RD16 = 1;
002904   8ecd     bsf     0xcd, 0x7, 0     	BSF	_T1CONbits, 7
                                           ;	.line	242; pillefyrsstyring.c	T1CONbits.TMR1CS = 0;   // internal clock source
002906   92cd     bcf     0xcd, 0x1, 0     	BCF	_T1CONbits, 1
                                           ;	.line	243; pillefyrsstyring.c	T1CONbits.T1OSCEN = 0;  // dont put t1 on pin
002908   96cd     bcf     0xcd, 0x3, 0     	BCF	_T1CONbits, 3
                                           ;	.line	244; pillefyrsstyring.c	T1CONbits.T1CKPS0 = 1;
00290a   88cd     bsf     0xcd, 0x4, 0     	BSF	_T1CONbits, 4
                                           ;	.line	245; pillefyrsstyring.c	T1CONbits.T1CKPS1 = 1;
00290c   8acd     bsf     0xcd, 0x5, 0     	BSF	_T1CONbits, 5
                                           ;	.line	246; pillefyrsstyring.c	IPR1bits.TMR1IP = 0;	// low priority
00290e   909f     bcf     0x9f, 0, 0       	BCF	_IPR1bits, 0
                                           ;	.line	247; pillefyrsstyring.c	PIE1bits.TMR1IE = 1;	// Ensure that TMR1 Interrupt is enabled
002910   809d     bsf     0x9d, 0, 0       	BSF	_PIE1bits, 0
                                           ;	.line	248; pillefyrsstyring.c	PIR1bits.TMR1IF = 1;	// Force Instant entry to Timer 1 Interrupt
002912   809e     bsf     0x9e, 0, 0       	BSF	_PIR1bits, 0
                                           ;	.line	250; pillefyrsstyring.c	INTCONbits.PEIE = 1;
002914   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	251; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
002916   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
002918   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00291a   ffd9
00291c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	216; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
001446   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001448   ffe5
00144a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00144c   ffd9
00144e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001450   ffe5
001452   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001454   ffe5
001456   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001458   ffe5
00145a   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00145c   ffe5
00145e   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001460   ffe5
001462   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001464   ffe5
001466   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001468   ffe5
00146a   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00146c   ffe5
00146e   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001470   ffe5
001472   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001474   ffe5
001476   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
001478   ffe5
00147a   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
00147c   ffe5
00147e   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
001480   ffe5
001482   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
001484   ffe5
001486   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
001488   ffe5
00148a   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
00148c   ffe5
00148e   0e02     movlw   0x2              	MOVLW	0x02
001490   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001492   f000
001494   0e03     movlw   0x3              	MOVLW	0x03
001496   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001498   f001
00149a   0e04     movlw   0x4              	MOVLW	0x04
00149c   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
00149e   f002
0014a0   0e05     movlw   0x5              	MOVLW	0x05
0014a2   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0014a4   f003
                                           ;	.line	218; pillefyrsstyring.c	start_timer_1_ms = timer_1_ms;	
0014a6   cf57     movff   0xf57, 0x4       	MOVFF	_timer_1_ms, r0x04
0014a8   f004
0014aa   cf58     movff   0xf58, 0x5       	MOVFF	(_timer_1_ms + 1), r0x05
0014ac   f005
0014ae   cf59     movff   0xf59, 0x6       	MOVFF	(_timer_1_ms + 2), r0x06
0014b0   f006
0014b2   cf5a     movff   0xf5a, 0x7       	MOVFF	(_timer_1_ms + 3), r0x07
0014b4   f007
                                           _00241_DS_:
                                           ;	.line	221; pillefyrsstyring.c	while ( (((signed long)(timer_1_ms - start_timer_1_ms) < 0) ? (-1 * (timer_1_ms - start_timer_1_ms)) : (timer_1_ms - start_timer_1_ms)) < ms) {
0014b6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0014b8   010f     movlb   0xf              	BANKSEL	_timer_1_ms
0014ba   5d57     subwf   0x57, 0, 0x1     	SUBWF	_timer_1_ms, W, B
0014bc   6e08     movwf   0x8, 0           	MOVWF	r0x08
0014be   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0014c0   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
0014c2   5958     subwfb  0x58, 0, 0x1     	SUBWFB	(_timer_1_ms + 1), W, B
0014c4   6e09     movwf   0x9, 0           	MOVWF	r0x09
0014c6   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0014c8   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
0014ca   5959     subwfb  0x59, 0, 0x1     	SUBWFB	(_timer_1_ms + 2), W, B
0014cc   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0014ce   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0014d0   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
0014d2   595a     subwfb  0x5a, 0, 0x1     	SUBWFB	(_timer_1_ms + 3), W, B
0014d4   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
0014d6   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0014d8   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0014da   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0014dc   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
0014de   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0014e0   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
0014e2   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0014e4   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
0014e6   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
0014e8   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
0014ea   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
0014ec   e31c     bnc     0x1526           	BNC	_00246_DS_
0014ee   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
0014f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014f2   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0014f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014f6   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0014f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014fa   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0014fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014fe   0eff     movlw   0xff             	MOVLW	0xff
001500   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001502   0eff     movlw   0xff             	MOVLW	0xff
001504   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001506   0eff     movlw   0xff             	MOVLW	0xff
001508   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00150a   0eff     movlw   0xff             	MOVLW	0xff
00150c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00150e   ecaa     call    0xb54, 0         	CALL	__mullong
001510   f005
001512   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001514   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
001516   f00d
001518   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
00151a   f00e
00151c   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
00151e   f00f
001520   0e08     movlw   0x8              	MOVLW	0x08
001522   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001524   d008     bra     0x1536           	BRA	_00247_DS_
                                           _00246_DS_:
001526   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
001528   f00c
00152a   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
00152c   f00d
00152e   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
001530   f00e
001532   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
001534   f00f
                                           _00247_DS_:
001536   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001538   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
00153a   e108     bnz     0x154c           	BNZ	_00254_DS_
00153c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00153e   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
001540   e105     bnz     0x154c           	BNZ	_00254_DS_
001542   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001544   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
001546   e102     bnz     0x154c           	BNZ	_00254_DS_
001548   5000     movf    0, 0, 0          	MOVF	r0x00, W
00154a   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00254_DS_:
00154c   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00154e   d7b3     bra     0x14b6           	BRA	_00241_DS_
001550   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
001552   f00f
001554   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
001556   f00e
001558   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
00155a   f00d
00155c   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
00155e   f00c
001560   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001562   f00b
001564   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001566   f00a
001568   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00156a   f009
00156c   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00156e   f008
001570   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001572   f007
001574   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001576   f006
001578   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00157a   f005
00157c   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00157e   f004
001580   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001582   f003
001584   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001586   f002
001588   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00158a   f001
00158c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00158e   f000
001590   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001592   ffd9
001594   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_low_prio	code
                                           _isr_low_prio:
                                           ;	.line	198; pillefyrsstyring.c	static void isr_low_prio(void) __interrupt 2 {
002116   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002118   ffe5
00211a   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00211c   ffe5
00211e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002120   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
002122   ffe5
002124   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
002126   ffe5
002128   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
00212a   ffe5
00212c   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
00212e   ffe5
002130   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
002132   ffe5
002134   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
002136   ffe5
002138   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00213a   ffe5
00213c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00213e   ffd9
002140   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002142   ffe5
                                           ;	.line	200; pillefyrsstyring.c	if (PIR1bits.TMR1IF) {
002144   a09e     btfss   0x9e, 0, 0       	BTFSS	_PIR1bits, 0
002146   d010     bra     0x2168           	BRA	_00225_DS_
                                           ;	.line	201; pillefyrsstyring.c	TMR1H = (unsigned char)(TIMER1_RELOAD >> 8);    // 1 ms delay at 8 MHz
002148   0efe     movlw   0xfe             	MOVLW	0xfe
00214a   6ecf     movwf   0xcf, 0          	MOVWF	_TMR1H
                                           ;	.line	202; pillefyrsstyring.c	TMR1L = (unsigned char)TIMER1_RELOAD;
00214c   0ec8     movlw   0xc8             	MOVLW	0xc8
00214e   6ece     movwf   0xce, 0          	MOVWF	_TMR1L
                                           ;	.line	203; pillefyrsstyring.c	PIR1bits.TMR1IF = 0;    /* Clear the Timer Flag  */
002150   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
002152   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	204; pillefyrsstyring.c	timer_1_ms++;
002154   2b57     incf    0x57, 0x1, 0x1   	INCF	_timer_1_ms, F, B
002156   e308     bnc     0x2168           	BNC	_00225_DS_
002158   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00215a   2b58     incf    0x58, 0x1, 0x1   	INCF	(_timer_1_ms + 1), F, B
00215c   e305     bnc     0x2168           	BNC	_00225_DS_
00215e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
002160   3f59     incfsz  0x59, 0x1, 0x1   	INCFSZ	(_timer_1_ms + 2), F, B
002162   d002     bra     0x2168           	BRA	_30357_DS_
002164   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
002166   2b5a     incf    0x5a, 0x1, 0x1   	INCF	(_timer_1_ms + 3), F, B
                                           _30357_DS_:
                                           _00236_DS_:
                                           _00225_DS_:
                                           ;	.line	208; pillefyrsstyring.c	if (usart_drdy()) {
002168   ec49     call    0x2c92, 0        	CALL	_usart_drdy
00216a   f016
00216c   6e00     movwf   0, 0             	MOVWF	r0x00
00216e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002170   e00b     bz      0x2188           	BZ	_00228_DS_
                                           ;	.line	210; pillefyrsstyring.c	c = usart_getc();
002172   ec8d     call    0x2b1a, 0        	CALL	_usart_getc
002174   f015
002176   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	211; pillefyrsstyring.c	fifo_put(c);
002178   5000     movf    0, 0, 0          	MOVF	r0x00, W
00217a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00217c   ec72     call    0x22e4, 0        	CALL	_fifo_put
00217e   f011
002180   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	212; pillefyrsstyring.c	usart_putc(c);
002182   5000     movf    0, 0, 0          	MOVF	r0x00, W
002184   ec36     call    0x2c6c, 0        	CALL	_usart_putc
002186   f016
                                           _00228_DS_:
002188   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00218a   f000
00218c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00218e   ffd9
002190   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002192   fffb
002194   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
002196   fffa
002198   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00219a   ffea
00219c   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
00219e   ffe9
0021a0   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0021a2   fff4
0021a4   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0021a6   fff3
0021a8   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0021aa   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0021ac   ffe0
0021ae   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0021b0   ffd8
0021b2   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_high_prio	code
                                           _isr_high_prio:
                                           ;	.line	164; pillefyrsstyring.c	static void isr_high_prio(void) __interrupt 1 {
0016e0   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0016e2   ffe5
0016e4   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0016e6   ffe5
0016e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016ea   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0016ec   ffe5
0016ee   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0016f0   ffe5
0016f2   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0016f4   ffe5
0016f6   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0016f8   ffe5
0016fa   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0016fc   ffe5
0016fe   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
001700   ffe5
001702   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001704   ffe5
001706   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001708   ffd9
00170a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00170c   ffe5
00170e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001710   ffe5
                                           ;	.line	165; pillefyrsstyring.c	if (INTCONbits.TMR0IF) {
001712   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
001714   d057     bra     0x17c4           	BRA	_00200_DS_
                                           ;	.line	166; pillefyrsstyring.c	TMR0H = (unsigned char)(TIMER0_RELOAD >> 8);
001716   0efd     movlw   0xfd             	MOVLW	0xfd
001718   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	167; pillefyrsstyring.c	TMR0L = (unsigned char)TIMER0_RELOAD;   /* Reload the Timer ASAP */
00171a   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
                                           ;	.line	168; pillefyrsstyring.c	INTCONbits.TMR0IF = 0;  /* Clear the Timer Flag  */
00171c   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	171; pillefyrsstyring.c	sensor_inputs = get_inputs();
00171e   ecb4     call    0x2b68, 0        	CALL	_get_inputs
001720   f015
001722   0108     movlb   0x8              	BANKSEL	_sensor_inputs
001724   6f02     movwf   0x2, 0x1         	MOVWF	_sensor_inputs, B
001726   010f     movlb   0xf              	BANKSEL	_i
                                           ;	.line	174; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
001728   6b76     clrf    0x76, 0x1        	CLRF	_i, B
00172a   010f     movlb   0xf              	BANKSEL	(_i + 1)
00172c   6b77     clrf    0x77, 0x1        	CLRF	(_i + 1), B
                                           _00198_DS_:
                                           ;	.line	175; pillefyrsstyring.c	if (ac_power_pwm_counter < output_ac_power_pwm[i]) {
00172e   0e51     movlw   0x51             	MOVLW	LOW(_output_ac_power_pwm)
001730   010f     movlb   0xf              	BANKSEL	_i
001732   2576     addwf   0x76, 0, 0x1     	ADDWF	_i, W, B
001734   6e00     movwf   0, 0             	MOVWF	r0x00
001736   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
001738   010f     movlb   0xf              	BANKSEL	(_i + 1)
00173a   2177     addwfc  0x77, 0, 0x1     	ADDWFC	(_i + 1), W, B
00173c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00173e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001740   ffe9
001742   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
001744   ffea
001746   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
001748   f000
00174a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00174c   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
00174e   5d03     subwf   0x3, 0, 0x1      	SUBWF	_ac_power_pwm_counter, W, B
001750   e215     bc      0x177c           	BC	_00193_DS_
                                           ;	.line	177; pillefyrsstyring.c	set_ac_power(1 << i, 0xff);
001752   0e01     movlw   0x1              	MOVLW	0x01
001754   6e00     movwf   0, 0             	MOVWF	r0x00
001756   6a01     clrf    0x1, 0           	CLRF	r0x01
001758   010f     movlb   0xf              	BANKSEL	_i
00175a   5176     movf    0x76, 0, 0x1     	MOVF	_i, W, B
00175c   e006     bz      0x176a           	BZ	_00215_DS_
00175e   6ce8     negf    0xe8, 0          	NEGF	WREG
001760   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00216_DS_:
001762   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
001764   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001766   0f01     addlw   0x1              	ADDLW	0x01
001768   e3fc     bnc     0x1762           	BNC	_00216_DS_
                                           _00215_DS_:
00176a   0eff     movlw   0xff             	MOVLW	0xff
00176c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00176e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001770   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001772   ec1c     call    0x2438, 0        	CALL	_set_ac_power
001774   f012
001776   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001778   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00177a   d014     bra     0x17a4           	BRA	_00199_DS_
                                           _00193_DS_:
                                           ;	.line	186; pillefyrsstyring.c	set_ac_power(1 << i, 0x00);
00177c   0e01     movlw   0x1              	MOVLW	0x01
00177e   6e00     movwf   0, 0             	MOVWF	r0x00
001780   6a01     clrf    0x1, 0           	CLRF	r0x01
001782   010f     movlb   0xf              	BANKSEL	_i
001784   5176     movf    0x76, 0, 0x1     	MOVF	_i, W, B
001786   e006     bz      0x1794           	BZ	_00217_DS_
001788   6ce8     negf    0xe8, 0          	NEGF	WREG
00178a   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00218_DS_:
00178c   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
00178e   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001790   0f01     addlw   0x1              	ADDLW	0x01
001792   e3fc     bnc     0x178c           	BNC	_00218_DS_
                                           _00217_DS_:
001794   0e00     movlw   0                	MOVLW	0x00
001796   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001798   5000     movf    0, 0, 0          	MOVF	r0x00, W
00179a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00179c   ec1c     call    0x2438, 0        	CALL	_set_ac_power
00179e   f012
0017a0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0017a2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00199_DS_:
0017a4   010f     movlb   0xf              	BANKSEL	_i
                                           ;	.line	174; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
0017a6   3f76     incfsz  0x76, 0x1, 0x1   	INCFSZ	_i, F, B
0017a8   d002     bra     0x17ae           	BRA	_40358_DS_
0017aa   010f     movlb   0xf              	BANKSEL	(_i + 1)
0017ac   2b77     incf    0x77, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _40358_DS_:
0017ae   0e00     movlw   0                	MOVLW	0x00
0017b0   010f     movlb   0xf              	BANKSEL	(_i + 1)
0017b2   5d77     subwf   0x77, 0, 0x1     	SUBWF	(_i + 1), W, B
0017b4   e103     bnz     0x17bc           	BNZ	_00219_DS_
0017b6   0e06     movlw   0x6              	MOVLW	0x06
0017b8   010f     movlb   0xf              	BANKSEL	_i
0017ba   5d76     subwf   0x76, 0, 0x1     	SUBWF	_i, W, B
                                           _00219_DS_:
0017bc   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0017be   d7b7     bra     0x172e           	BRA	_00198_DS_
0017c0   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	194; pillefyrsstyring.c	ac_power_pwm_counter++;
0017c2   2b03     incf    0x3, 0x1, 0x1    	INCF	_ac_power_pwm_counter, F, B
                                           _00200_DS_:
0017c4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0017c6   f001
0017c8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0017ca   f000
0017cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0017ce   ffd9
0017d0   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0017d2   fffb
0017d4   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0017d6   fffa
0017d8   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0017da   ffea
0017dc   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0017de   ffe9
0017e0   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0017e2   fff4
0017e4   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0017e6   fff3
0017e8   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0017ea   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0017ec   ffe0
0017ee   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0017f0   ffd8
0017f2   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0017f4   704f     btg     0x4f, 0, 0       	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
0017f6   6e65     movwf   0x65, 0          
0017f8   7453     btg     0x53, 0x2, 0     
0017fa   6b6f     clrf    0x6f, 0x1        
0017fc   7265     btg     0x65, 0x1, 0     
0017fe   7320     btg     0x20, 0x1, 0x1   
001800   6174     cpfslt  0x74, 0x1        	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x20, 0x73
001802   7472     btg     0x72, 0x2, 0     
001804   6e69     movwf   0x69, 0          
001806   2e67     decfsz  0x67, 0x1, 0     
001808   2e2e     decfsz  0x2e, 0x1, 0     
00180a   7320     btg     0x20, 0x1, 0x1   
00180c   7265     btg     0x65, 0x1, 0     	DB	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e
00180e   6169     cpfslt  0x69, 0x1        
001810   206c     addwfc  0x6c, 0, 0       
001812   6f77     movwf   0x77, 0x1        
001814   6b72     clrf    0x72, 0x1        
001816   6e69     movwf   0x69, 0          
001818   0a67     xorlw   0x67             	DB	0x67, 0x0a, 0x0d, 0x00
00181a   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_1:
00181c   0d0a     mullw   0xa              	DB	0x0a, 0x0d, 0x00
00181e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001820   2567     addwf   0x67, 0, 0x1     	DB	0x67, 0x25, 0x30, 0x32, 0x78, 0x0a, 0x0d, 0x00
001822   3230     rrcf    0x30, 0x1, 0     
001824   0a78     xorlw   0x78             
001826   000d     tblwt   *+               
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3128 (0x0c38) bytes ( 2.39%)
                                           ;           	 1564 (0x061c) words
                                           ; udata size:	  186 (0x00ba) bytes ( 4.84%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Mon Dec 16 14:25:07 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	367; glcd.c	void latched_lcd_data(unsigned char value) {
002aca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002acc   ffe5
002ace   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ad0   ffd9
002ad2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002ad4   ffe5
002ad6   0e02     movlw   0x2              	MOVLW	0x02
002ad8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002ada   f000
                                           ;	.line	368; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002adc   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; glcd.c	LATCH_DATA = value;
002ade   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
002ae0   ff8c
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_ENABLED;
002ae2   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_4 = LATCH_4_DISABLED;
002ae4   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	372; glcd.c	LATCH_DATA = 0x00;
002ae6   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002ae8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002aea   f000
002aec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002aee   ffd9
002af0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	352; glcd.c	void latched_lcd_cs1(unsigned char value) {
002716   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002718   ffe5
00271a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00271c   ffd9
00271e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002720   ffe5
002722   0e02     movlw   0x2              	MOVLW	0x02
002724   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002726   f000
                                           ;	.line	353; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002728   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	354; glcd.c	if (value) {	// set it
00272a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00272c   e005     bz      0x2738           	BZ	_00268_DS_
00272e   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data |= 0b00100000;
002730   8b06     bsf     0x6, 0x5, 0x1    	BSF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
002732   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002734   ff8c
002736   d004     bra     0x2740           	BRA	_00269_DS_
                                           _00268_DS_:
002738   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	359; glcd.c	_latch_3_data &= 0b11011111;
00273a   9b06     bcf     0x6, 0x5, 0x1    	BCF	__latch_3_data, 5, B
                                           ;	.line	360; glcd.c	LATCH_DATA = _latch_3_data;
00273c   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00273e   ff8c
                                           _00269_DS_:
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002740   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002742   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	364; glcd.c	LATCH_DATA = 0x00;
002744   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002746   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002748   f000
00274a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00274c   ffd9
00274e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	337; glcd.c	void latched_lcd_cs2(unsigned char value) {
002750   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002752   ffe5
002754   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002756   ffd9
002758   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00275a   ffe5
00275c   0e02     movlw   0x2              	MOVLW	0x02
00275e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002760   f000
                                           ;	.line	338; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002762   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	339; glcd.c	if (value) {	// set it
002764   5000     movf    0, 0, 0          	MOVF	r0x00, W
002766   e005     bz      0x2772           	BZ	_00260_DS_
002768   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data |= 0b00010000;
00276a   8906     bsf     0x6, 0x4, 0x1    	BSF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
00276c   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00276e   ff8c
002770   d004     bra     0x277a           	BRA	_00261_DS_
                                           _00260_DS_:
002772   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	344; glcd.c	_latch_3_data &= 0b11101111;
002774   9906     bcf     0x6, 0x4, 0x1    	BCF	__latch_3_data, 4, B
                                           ;	.line	345; glcd.c	LATCH_DATA = _latch_3_data;
002776   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002778   ff8c
                                           _00261_DS_:
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00277a   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00277c   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	349; glcd.c	LATCH_DATA = 0x00;
00277e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002780   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002782   f000
002784   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002786   ffd9
002788   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	322; glcd.c	void latched_lcd_rst(unsigned char value) {
00278a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00278c   ffe5
00278e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002790   ffd9
002792   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002794   ffe5
002796   0e02     movlw   0x2              	MOVLW	0x02
002798   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00279a   f000
                                           ;	.line	323; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00279c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	324; glcd.c	if (value) {	// set it
00279e   5000     movf    0, 0, 0          	MOVF	r0x00, W
0027a0   e005     bz      0x27ac           	BZ	_00252_DS_
0027a2   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data |= 0b00001000;
0027a4   8706     bsf     0x6, 0x3, 0x1    	BSF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
0027a6   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0027a8   ff8c
0027aa   d004     bra     0x27b4           	BRA	_00253_DS_
                                           _00252_DS_:
0027ac   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	329; glcd.c	_latch_3_data &= 0b11110111;
0027ae   9706     bcf     0x6, 0x3, 0x1    	BCF	__latch_3_data, 3, B
                                           ;	.line	330; glcd.c	LATCH_DATA = _latch_3_data;
0027b0   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0027b2   ff8c
                                           _00253_DS_:
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0027b4   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0027b6   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	334; glcd.c	LATCH_DATA = 0x00;
0027b8   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0027ba   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0027bc   f000
0027be   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027c0   ffd9
0027c2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	307; glcd.c	void latched_lcd_rw(unsigned char value) {
0027c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027c6   ffe5
0027c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027ca   ffd9
0027cc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0027ce   ffe5
0027d0   0e02     movlw   0x2              	MOVLW	0x02
0027d2   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0027d4   f000
                                           ;	.line	308; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0027d6   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	309; glcd.c	if (value) {	// set it
0027d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0027da   e005     bz      0x27e6           	BZ	_00244_DS_
0027dc   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data |= 0b00000100;
0027de   8506     bsf     0x6, 0x2, 0x1    	BSF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
0027e0   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0027e2   ff8c
0027e4   d004     bra     0x27ee           	BRA	_00245_DS_
                                           _00244_DS_:
0027e6   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	314; glcd.c	_latch_3_data &= 0b11111011;
0027e8   9506     bcf     0x6, 0x2, 0x1    	BCF	__latch_3_data, 2, B
                                           ;	.line	315; glcd.c	LATCH_DATA = _latch_3_data;
0027ea   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0027ec   ff8c
                                           _00245_DS_:
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0027ee   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0027f0   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	319; glcd.c	LATCH_DATA = 0x00;
0027f2   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0027f4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0027f6   f000
0027f8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027fa   ffd9
0027fc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	292; glcd.c	void latched_lcd_di(unsigned char value) {
0027fe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002800   ffe5
002802   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002804   ffd9
002806   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002808   ffe5
00280a   0e02     movlw   0x2              	MOVLW	0x02
00280c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00280e   f000
                                           ;	.line	293; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002810   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; glcd.c	if (value) {	// set it
002812   5000     movf    0, 0, 0          	MOVF	r0x00, W
002814   e005     bz      0x2820           	BZ	_00236_DS_
002816   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data |= 0b00000010;
002818   8306     bsf     0x6, 0x1, 0x1    	BSF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
00281a   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00281c   ff8c
00281e   d004     bra     0x2828           	BRA	_00237_DS_
                                           _00236_DS_:
002820   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	299; glcd.c	_latch_3_data &= 0b11111101;
002822   9306     bcf     0x6, 0x1, 0x1    	BCF	__latch_3_data, 1, B
                                           ;	.line	300; glcd.c	LATCH_DATA = _latch_3_data;
002824   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002826   ff8c
                                           _00237_DS_:
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002828   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00282a   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; glcd.c	LATCH_DATA = 0x00;
00282c   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00282e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002830   f000
002832   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002834   ffd9
002836   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	277; glcd.c	void latched_lcd_enable(unsigned char value) {
002838   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00283a   ffe5
00283c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00283e   ffd9
002840   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002842   ffe5
002844   0e02     movlw   0x2              	MOVLW	0x02
002846   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002848   f000
                                           ;	.line	278; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00284a   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	279; glcd.c	if (value) {	// set it
00284c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00284e   e005     bz      0x285a           	BZ	_00228_DS_
002850   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data |= 0b00000001;
002852   8106     bsf     0x6, 0, 0x1      	BSF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
002854   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002856   ff8c
002858   d004     bra     0x2862           	BRA	_00229_DS_
                                           _00228_DS_:
00285a   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	284; glcd.c	_latch_3_data &= 0b11111110;
00285c   9106     bcf     0x6, 0, 0x1      	BCF	__latch_3_data, 0, B
                                           ;	.line	285; glcd.c	LATCH_DATA = _latch_3_data;
00285e   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002860   ff8c
                                           _00229_DS_:
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002862   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002864   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	289; glcd.c	LATCH_DATA = 0x00;
002866   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002868   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00286a   f000
00286c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00286e   ffd9
002870   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	262; glcd.c	void latched_lcd_power(unsigned char value) {
002872   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002874   ffe5
002876   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002878   ffd9
00287a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00287c   ffe5
00287e   0e02     movlw   0x2              	MOVLW	0x02
002880   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002882   f000
                                           ;	.line	263; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002884   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	264; glcd.c	if (value) {	// set it
002886   5000     movf    0, 0, 0          	MOVF	r0x00, W
002888   e005     bz      0x2894           	BZ	_00220_DS_
00288a   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data |= 0b10000000;
00288c   8f06     bsf     0x6, 0x7, 0x1    	BSF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
00288e   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002890   ff8c
002892   d004     bra     0x289c           	BRA	_00221_DS_
                                           _00220_DS_:
002894   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	269; glcd.c	_latch_3_data &= 0b01111111;
002896   9f06     bcf     0x6, 0x7, 0x1    	BCF	__latch_3_data, 7, B
                                           ;	.line	270; glcd.c	LATCH_DATA = _latch_3_data;
002898   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00289a   ff8c
                                           _00221_DS_:
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00289c   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00289e   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	274; glcd.c	LATCH_DATA = 0x00;
0028a0   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028a2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028a4   f000
0028a6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028a8   ffd9
0028aa   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	242; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
001fd2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001fd4   ffe5
001fd6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001fd8   ffd9
001fda   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001fdc   ffe5
001fde   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001fe0   ffe5
001fe2   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001fe4   ffe5
001fe6   0e02     movlw   0x2              	MOVLW	0x02
001fe8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001fea   f000
001fec   0e03     movlw   0x3              	MOVLW	0x03
001fee   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001ff0   f001
                                           ;	.line	247; glcd.c	if (rx & 64) {
001ff2   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
001ff4   d006     bra     0x2002           	BRA	_00203_DS_
                                           ;	.line	248; glcd.c	lcd_selectside(LCD_RIGHT);
001ff6   0e02     movlw   0x2              	MOVLW	0x02
001ff8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001ffa   ec99     call    0x2532, 0        	CALL	_lcd_selectside
001ffc   f012
001ffe   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002000   d005     bra     0x200c           	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	251; glcd.c	lcd_selectside(LCD_LEFT);
002002   0e01     movlw   0x1              	MOVLW	0x01
002004   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002006   ec99     call    0x2532, 0        	CALL	_lcd_selectside
002008   f012
00200a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	254; glcd.c	lcd_setpage( ry >> 3);		// fast /8
00200c   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
00200e   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002010   0b1f     andlw   0x1f             	ANDLW	0x1f
002012   6e02     movwf   0x2, 0           	MOVWF	r0x02
002014   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002016   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002018   ece5     call    0x25ca, 0        	CALL	_lcd_setpage
00201a   f012
00201c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_setyaddr( rx & 0b00111111);
00201e   0e3f     movlw   0x3f             	MOVLW	0x3f
002020   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002022   5000     movf    0, 0, 0          	MOVF	r0x00, W
002024   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002026   ecc1     call    0x2582, 0        	CALL	_lcd_setyaddr
002028   f012
00202a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	256; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
00202c   ec11     call    0x2c22, 0        	CALL	_lcd_read
00202e   f016
                                           ;	.line	257; glcd.c	d = lcd_read();				// read again to transfer to pic
002030   ec11     call    0x2c22, 0        	CALL	_lcd_read
002032   f016
002034   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	258; glcd.c	lcd_setyaddr( rx & 0b00111111); 
002036   5000     movf    0, 0, 0          	MOVF	r0x00, W
002038   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00203a   ecc1     call    0x2582, 0        	CALL	_lcd_setyaddr
00203c   f012
00203e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	259; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
002040   0e07     movlw   0x7              	MOVLW	0x07
002042   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
002044   0e01     movlw   0x1              	MOVLW	0x01
002046   6e00     movwf   0, 0             	MOVWF	r0x00
002048   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00204a   e005     bz      0x2056           	BZ	_00213_DS_
00204c   6ce8     negf    0xe8, 0          	NEGF	WREG
00204e   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
002050   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
002052   0f01     addlw   0x1              	ADDLW	0x01
002054   e3fd     bnc     0x2050           	BNC	_00214_DS_
                                           _00213_DS_:
002056   5000     movf    0, 0, 0          	MOVF	r0x00, W
002058   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
00205a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00205c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00205e   ec08     call    0x2610, 0        	CALL	_lcd_write
002060   f013
002062   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002064   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002066   f002
002068   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00206a   f001
00206c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00206e   f000
002070   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002072   ffd9
002074   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	223; glcd.c	unsigned char lcd_read (void) {
002c22   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c24   ffe5
002c26   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c28   ffd9
                                           ;	.line	237; glcd.c	lcd_enable();
002c2a   ec29     call    0x2652, 0        	CALL	_lcd_enable
002c2c   f013
                                           ;	.line	238; glcd.c	return 0;
002c2e   6ae8     clrf    0xe8, 0          	CLRF	WREG
002c30   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c32   ffd9
002c34   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	198; glcd.c	void lcd_selectside(unsigned char sides) {
002532   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002534   ffe5
002536   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002538   ffd9
00253a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00253c   ffe5
00253e   0e02     movlw   0x2              	MOVLW	0x02
002540   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002542   f000
                                           ;	.line	201; glcd.c	if (sides & LCD_LEFT) {
002544   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
002546   d006     bra     0x2554           	BRA	_00178_DS_
                                           ;	.line	203; glcd.c	latched_lcd_cs1(1);
002548   0e01     movlw   0x1              	MOVLW	0x01
00254a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00254c   ec8b     call    0x2716, 0        	CALL	_latched_lcd_cs1
00254e   f013
002550   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002552   d005     bra     0x255e           	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	207; glcd.c	latched_lcd_cs1(0);
002554   0e00     movlw   0                	MOVLW	0x00
002556   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002558   ec8b     call    0x2716, 0        	CALL	_latched_lcd_cs1
00255a   f013
00255c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	210; glcd.c	if (sides & LCD_RIGHT) {
00255e   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
002560   d006     bra     0x256e           	BRA	_00181_DS_
                                           ;	.line	212; glcd.c	latched_lcd_cs2(1);
002562   0e01     movlw   0x1              	MOVLW	0x01
002564   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002566   eca8     call    0x2750, 0        	CALL	_latched_lcd_cs2
002568   f013
00256a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00256c   d005     bra     0x2578           	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	216; glcd.c	latched_lcd_cs2(0);
00256e   0e00     movlw   0                	MOVLW	0x00
002570   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002572   eca8     call    0x2750, 0        	CALL	_latched_lcd_cs2
002574   f013
002576   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
002578   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00257a   f000
00257c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00257e   ffd9
002580   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	185; glcd.c	void lcd_write (unsigned char d) {
002610   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002612   ffe5
002614   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002616   ffd9
002618   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00261a   ffe5
00261c   0e02     movlw   0x2              	MOVLW	0x02
00261e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002620   f000
                                           ;	.line	186; glcd.c	lcd_waitbusy();
002622   ec8f     call    0x291e, 0        	CALL	_lcd_waitbusy
002624   f014
                                           ;	.line	188; glcd.c	latched_lcd_di(1);
002626   0e01     movlw   0x1              	MOVLW	0x01
002628   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00262a   ecff     call    0x27fe, 0        	CALL	_latched_lcd_di
00262c   f013
00262e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	190; glcd.c	latched_lcd_rw(0);
002630   0e00     movlw   0                	MOVLW	0x00
002632   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002634   ece2     call    0x27c4, 0        	CALL	_latched_lcd_rw
002636   f013
002638   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	latched_lcd_data(d);
00263a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00263c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00263e   ec65     call    0x2aca, 0        	CALL	_latched_lcd_data
002640   f015
002642   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	194; glcd.c	lcd_enable();
002644   ec29     call    0x2652, 0        	CALL	_lcd_enable
002646   f013
002648   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00264a   f000
00264c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00264e   ffd9
002650   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
00291e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002920   ffe5
002922   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002924   ffd9
002926   0000     nop                      	nop 
002928   0000     nop                      	nop 
00292a   0000     nop                      	nop 
00292c   0000     nop                      	nop 
00292e   0000     nop                      	nop 
002930   0000     nop                      	nop 
002932   0000     nop                      	nop 
002934   0000     nop                      	nop 
                                           ;	.line	180; glcd.c	sleep_ms(10);
002936   0e00     movlw   0                	MOVLW	0x00
002938   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00293a   0e00     movlw   0                	MOVLW	0x00
00293c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00293e   0e00     movlw   0                	MOVLW	0x00
002940   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002942   0e0a     movlw   0xa              	MOVLW	0x0a
002944   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002946   ec23     call    0x1446, 0        	CALL	_sleep_ms
002948   f00a
00294a   0e04     movlw   0x4              	MOVLW	0x04
00294c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00294e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002950   ffd9
002952   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
002582   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002584   ffe5
002586   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002588   ffd9
00258a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00258c   ffe5
00258e   0e02     movlw   0x2              	MOVLW	0x02
002590   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002592   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
002594   ec8f     call    0x291e, 0        	CALL	_lcd_waitbusy
002596   f014
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
002598   0e00     movlw   0                	MOVLW	0x00
00259a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00259c   ecff     call    0x27fe, 0        	CALL	_latched_lcd_di
00259e   f013
0025a0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
0025a2   0e00     movlw   0                	MOVLW	0x00
0025a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a6   ece2     call    0x27c4, 0        	CALL	_latched_lcd_rw
0025a8   f013
0025aa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
0025ac   0e3f     movlw   0x3f             	MOVLW	0x3f
0025ae   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
0025b0   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
0025b2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025b4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025b6   ec65     call    0x2aca, 0        	CALL	_latched_lcd_data
0025b8   f015
0025ba   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
0025bc   ec29     call    0x2652, 0        	CALL	_lcd_enable
0025be   f013
0025c0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0025c2   f000
0025c4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025c6   ffd9
0025c8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
0025ca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025cc   ffe5
0025ce   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025d0   ffd9
0025d2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0025d4   ffe5
0025d6   0e02     movlw   0x2              	MOVLW	0x02
0025d8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0025da   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
0025dc   ec8f     call    0x291e, 0        	CALL	_lcd_waitbusy
0025de   f014
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
0025e0   0e00     movlw   0                	MOVLW	0x00
0025e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025e4   ecff     call    0x27fe, 0        	CALL	_latched_lcd_di
0025e6   f013
0025e8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
0025ea   0e00     movlw   0                	MOVLW	0x00
0025ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025ee   ece2     call    0x27c4, 0        	CALL	_latched_lcd_rw
0025f0   f013
0025f2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
0025f4   0eb8     movlw   0xb8             	MOVLW	0xb8
0025f6   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
0025f8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025fc   ec65     call    0x2aca, 0        	CALL	_latched_lcd_data
0025fe   f015
002600   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
002602   ec29     call    0x2652, 0        	CALL	_lcd_enable
002604   f013
002606   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002608   f000
00260a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00260c   ffd9
00260e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
0021b4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021b6   ffe5
0021b8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021ba   ffd9
0021bc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0021be   ffe5
0021c0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0021c2   ffe5
0021c4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0021c6   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
0021c8   0e03     movlw   0x3              	MOVLW	0x03
0021ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021cc   ec99     call    0x2532, 0        	CALL	_lcd_selectside
0021ce   f012
0021d0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
0021d2   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
0021d4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0021d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021d8   ece5     call    0x25ca, 0        	CALL	_lcd_setpage
0021da   f012
0021dc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
0021de   0e00     movlw   0                	MOVLW	0x00
0021e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021e2   ecc1     call    0x2582, 0        	CALL	_lcd_setyaddr
0021e4   f012
0021e6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
0021e8   0e00     movlw   0                	MOVLW	0x00
0021ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021ec   ec65     call    0x2aca, 0        	CALL	_latched_lcd_data
0021ee   f015
0021f0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
0021f2   0e00     movlw   0                	MOVLW	0x00
0021f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021f6   ece2     call    0x27c4, 0        	CALL	_latched_lcd_rw
0021f8   f013
0021fa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
0021fc   0e01     movlw   0x1              	MOVLW	0x01
0021fe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002200   ecff     call    0x27fe, 0        	CALL	_latched_lcd_di
002202   f013
002204   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002206   0e40     movlw   0x40             	MOVLW	0x40
002208   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
00220a   ec29     call    0x2652, 0        	CALL	_lcd_enable
00220c   f013
00220e   0000     nop                      	nop 
002210   0000     nop                      	nop 
002212   0000     nop                      	nop 
002214   0000     nop                      	nop 
002216   0000     nop                      	nop 
002218   0000     nop                      	nop 
00221a   0000     nop                      	nop 
00221c   0000     nop                      	nop 
00221e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002220   6e02     movwf   0x2, 0           	MOVWF	r0x02
002222   0402     decf    0x2, 0, 0        	DECF	r0x02, W
002224   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002226   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002228   e1f0     bnz     0x220a           	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
00222a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00222c   0e08     movlw   0x8              	MOVLW	0x08
00222e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
002230   e3d1     bnc     0x21d4           	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
002232   0e01     movlw   0x1              	MOVLW	0x01
002234   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002236   ec99     call    0x2532, 0        	CALL	_lcd_selectside
002238   f012
00223a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00223c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00223e   f002
002240   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002242   f001
002244   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002246   f000
002248   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00224a   ffd9
00224c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
0023de   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0023e0   ffe5
0023e2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0023e4   ffd9
0023e6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0023e8   ffe5
0023ea   0e02     movlw   0x2              	MOVLW	0x02
0023ec   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0023ee   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(1);
0023f0   0e01     movlw   0x1              	MOVLW	0x01
0023f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0023f4   ec8b     call    0x2716, 0        	CALL	_latched_lcd_cs1
0023f6   f013
0023f8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(1);
0023fa   0e01     movlw   0x1              	MOVLW	0x01
0023fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0023fe   eca8     call    0x2750, 0        	CALL	_latched_lcd_cs2
002400   f013
002402   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
002404   0e00     movlw   0                	MOVLW	0x00
002406   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002408   ece2     call    0x27c4, 0        	CALL	_latched_lcd_rw
00240a   f013
00240c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
00240e   0e00     movlw   0                	MOVLW	0x00
002410   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002412   ecff     call    0x27fe, 0        	CALL	_latched_lcd_di
002414   f013
002416   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
002418   0e01     movlw   0x1              	MOVLW	0x01
00241a   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
00241c   0e3e     movlw   0x3e             	MOVLW	0x3e
00241e   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
002420   5000     movf    0, 0, 0          	MOVF	r0x00, W
002422   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002424   ec65     call    0x2aca, 0        	CALL	_latched_lcd_data
002426   f015
002428   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
00242a   ec29     call    0x2652, 0        	CALL	_lcd_enable
00242c   f013
00242e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002430   f000
002432   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002434   ffd9
002436   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
0024e0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0024e2   ffe5
0024e4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0024e6   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
0024e8   0e00     movlw   0                	MOVLW	0x00
0024ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024ec   0e00     movlw   0                	MOVLW	0x00
0024ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f0   0e00     movlw   0                	MOVLW	0x00
0024f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f4   0e01     movlw   0x1              	MOVLW	0x01
0024f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024f8   ec23     call    0x1446, 0        	CALL	_sleep_ms
0024fa   f00a
0024fc   0e04     movlw   0x4              	MOVLW	0x04
0024fe   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(0);
002500   0e00     movlw   0                	MOVLW	0x00
002502   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002504   ecc5     call    0x278a, 0        	CALL	_latched_lcd_rst
002506   f013
002508   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
00250a   0e00     movlw   0                	MOVLW	0x00
00250c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00250e   0e00     movlw   0                	MOVLW	0x00
002510   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002512   0e00     movlw   0                	MOVLW	0x00
002514   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002516   0e01     movlw   0x1              	MOVLW	0x01
002518   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00251a   ec23     call    0x1446, 0        	CALL	_sleep_ms
00251c   f00a
00251e   0e04     movlw   0x4              	MOVLW	0x04
002520   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(1);
002522   0e01     movlw   0x1              	MOVLW	0x01
002524   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002526   ecc5     call    0x278a, 0        	CALL	_latched_lcd_rst
002528   f013
00252a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00252c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00252e   ffd9
002530   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
002af2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002af4   ffe5
002af6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002af8   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
002afa   0e00     movlw   0                	MOVLW	0x00
002afc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002afe   0e00     movlw   0                	MOVLW	0x00
002b00   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b02   0e00     movlw   0                	MOVLW	0x00
002b04   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b06   0e0a     movlw   0xa              	MOVLW	0x0a
002b08   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002b0a   ec23     call    0x1446, 0        	CALL	_sleep_ms
002b0c   f00a
002b0e   0e04     movlw   0x4              	MOVLW	0x04
002b10   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
002b12   0e01     movlw   0x1              	MOVLW	0x01
002b14   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b16   ffd9
002b18   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
002652   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002654   ffe5
002656   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002658   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
00265a   0e01     movlw   0x1              	MOVLW	0x01
00265c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00265e   ec1c     call    0x2838, 0        	CALL	_latched_lcd_enable
002660   f014
002662   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002664   0000     nop                      	nop 
002666   0000     nop                      	nop 
002668   0000     nop                      	nop 
00266a   0000     nop                      	nop 
00266c   0000     nop                      	nop 
00266e   0000     nop                      	nop 
002670   0000     nop                      	nop 
002672   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
002674   0e00     movlw   0                	MOVLW	0x00
002676   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002678   ec1c     call    0x2838, 0        	CALL	_latched_lcd_enable
00267a   f014
00267c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00267e   0000     nop                      	nop 
002680   0000     nop                      	nop 
002682   0000     nop                      	nop 
002684   0000     nop                      	nop 
002686   0000     nop                      	nop 
002688   0000     nop                      	nop 
00268a   0000     nop                      	nop 
00268c   0000     nop                      	nop 
00268e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002690   ffd9
002692   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
002694   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002696   ffe5
002698   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00269a   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
00269c   0e01     movlw   0x1              	MOVLW	0x01
00269e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026a0   ec39     call    0x2872, 0        	CALL	_latched_lcd_power
0026a2   f014
0026a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026a6   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
0026a8   6b06     clrf    0x6, 0x1         	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(0);
0026aa   0e00     movlw   0                	MOVLW	0x00
0026ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026ae   ec8b     call    0x2716, 0        	CALL	_latched_lcd_cs1
0026b0   f013
0026b2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(0);
0026b4   0e00     movlw   0                	MOVLW	0x00
0026b6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026b8   eca8     call    0x2750, 0        	CALL	_latched_lcd_cs2
0026ba   f013
0026bc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
0026be   ec70     call    0x24e0, 0        	CALL	_lcd_reset
0026c0   f012
                                           ;	.line	38; glcd.c	lcd_screenon(1);
0026c2   0e01     movlw   0x1              	MOVLW	0x01
0026c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026c6   ecef     call    0x23de, 0        	CALL	_lcd_screenon
0026c8   f011
0026ca   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
0026cc   ecda     call    0x21b4, 0        	CALL	_lcd_cls
0026ce   f010
0026d0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026d2   ffd9
0026d4   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1470 (0x05be) bytes ( 1.12%)
                                           ;           	  735 (0x02df) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
