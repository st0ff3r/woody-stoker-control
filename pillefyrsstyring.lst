gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-18-2013  00:22:53
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Wed Dec 18 00:22:53 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	WDTPS=8192
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	_my_usart_open
                                           	global	_fifo_in_use
                                           	global	_fifo_put
                                           	global	_fifo_get
                                           	global	_base64decode
                                           	global	_base64encode
                                           	global	_validate_command
                                           	global	_reset
                                           	global	__debug
                                           	global	_i
                                           	global	_timer_1_ms
                                           	global	_sensor_inputs
                                           	global	_last_inputs
                                           	global	_output_ac_power_pwm
                                           	global	_ac_power_pwm_counter
                                           	global	_ad_inputs
                                           	global	_fifo_head
                                           	global	_fifo_tail
                                           	global	_fifo_buffer
                                           	global	_command
                                           	global	_command_index
                                           	global	_valid_command
                                           	global	__latch_2_data
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_crc16
                                           	extern	_sprintf
                                           	extern	_strchr
                                           	extern	_memcpy
                                           	extern	_adc_open
                                           	extern	_adc_conv
                                           	extern	_adc_busy
                                           	extern	_adc_read
                                           	extern	_adc_setchannel
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_usart_puts
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           	extern	__moduint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _timer_1_ms	res	4
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _fifo_head	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _fifo_tail	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _command_index	res	1
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _output_ac_power_pwm	res	6
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _main_c_1_102	res	1
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _sensor_inputs	res	1
                                           
                                           udata_pillefyrsstyring_8	udata
                                           _command	res	21
                                           
                                           udata_pillefyrsstyring_9	udata
                                           _valid_command	res	7
                                           
                                           udata_pillefyrsstyring_10	udata
                                           _main_buffer_1_102	res	10
                                           
                                           udata_pillefyrsstyring_11	udata
                                           _ad_inputs	res	16
                                           
                                           udata_pillefyrsstyring_12	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_13	udata
                                           _ac_power_pwm_counter	res	1
                                           
                                           udata_pillefyrsstyring_14	udata
                                           __latch_2_data	res	1
                                           
                                           udata_pillefyrsstyring_15	udata
                                           _fifo_buffer	res	100
                                           
                                           udata_pillefyrsstyring_16	udata
                                           _base64decode_xlate_1_149	res	17
                                           
                                           udata_pillefyrsstyring_17	udata
                                           _validate_command_decoded_command_1_154	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_isr_high_prio	code	0X000008
                                           ivec_0x1_isr_high_prio:
000008   eff3     goto    0x13e6           	GOTO	_isr_high_prio
00000a   f009
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x2_isr_low_prio	code	0X000018
                                           ivec_0x2_isr_low_prio:
000018   ef0b     goto    0x2216           	GOTO	_isr_low_prio
00001a   f011
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	46; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000828   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00082a   0bfc     andlw   0xfc             	ANDLW	0xfc
00082c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	47; pillefyrsstyring.c	OSCCONbits.IRCF = 0x7;	// 8 MHz
00082e   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000830   0b8f     andlw   0x8f             	ANDLW	0x8f
000832   0970     iorlw   0x70             	IORLW	0x70
000834   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	48; pillefyrsstyring.c	WDTCONbits.SWDTEN = 1;	// enable watchdog
000836   80d1     bsf     0xd1, 0, 0       	BSF	_WDTCONbits, 0
000838   0004     clrwdt                   	clrwdt 
00083a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	51; pillefyrsstyring.c	timer_1_ms = 0;
00083c   6b67     clrf    0x67, 0x1        	CLRF	_timer_1_ms, B
00083e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
000840   6b68     clrf    0x68, 0x1        	CLRF	(_timer_1_ms + 1), B
000842   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
000844   6b69     clrf    0x69, 0x1        	CLRF	(_timer_1_ms + 2), B
000846   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
000848   6b6a     clrf    0x6a, 0x1        	CLRF	(_timer_1_ms + 3), B
00084a   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	53; pillefyrsstyring.c	fifo_head = 0;
00084c   6b03     clrf    0x3, 0x1         	CLRF	_fifo_head, B
00084e   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
000850   6b04     clrf    0x4, 0x1         	CLRF	(_fifo_head + 1), B
000852   0108     movlb   0x8              	BANKSEL	_fifo_tail
                                           ;	.line	54; pillefyrsstyring.c	fifo_tail = 0;
000854   6b05     clrf    0x5, 0x1         	CLRF	_fifo_tail, B
000856   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
000858   6b06     clrf    0x6, 0x1         	CLRF	(_fifo_tail + 1), B
00085a   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	55; pillefyrsstyring.c	command_index = 0;
00085c   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	58; pillefyrsstyring.c	RCONbits.IPEN = 1;
00085e   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	60; pillefyrsstyring.c	init_timers();
000860   ec4e     call    0x2a9c, 0        	CALL	_init_timers
000862   f015
                                           ;	.line	63; pillefyrsstyring.c	IPR1bits.RCIP = 0;
000864   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	64; pillefyrsstyring.c	IPR1bits.TXIP = 0;
000866   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	75; pillefyrsstyring.c	my_usart_open();
000868   ec17     call    0x2c2e, 0        	CALL	_my_usart_open
00086a   f016
                                           ;	.line	77; pillefyrsstyring.c	sleep_ms(1000);	// let stuff settle...
00086c   0e00     movlw   0                	MOVLW	0x00
00086e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000870   0e00     movlw   0                	MOVLW	0x00
000872   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000874   0e03     movlw   0x3              	MOVLW	0x03
000876   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000878   0ee8     movlw   0xe8             	MOVLW	0xe8
00087a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00087c   ec47     call    0x168e, 0        	CALL	_sleep_ms
00087e   f00b
000880   0e04     movlw   0x4              	MOVLW	0x04
000882   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	78; pillefyrsstyring.c	usart_puts("OpenStoker starting... serial working\n\r");
000884   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000886   6e02     movwf   0x2, 0           	MOVWF	r0x02
000888   0e14     movlw   0x14             	MOVLW	HIGH(__str_0)
00088a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00088c   0efa     movlw   0xfa             	MOVLW	LOW(__str_0)
00088e   6e00     movwf   0, 0             	MOVWF	r0x00
000890   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000896   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000898   5000     movf    0, 0, 0          	MOVF	r0x00, W
00089a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00089c   ec71     call    0x24e2, 0        	CALL	_usart_puts
00089e   f012
0008a0   0e03     movlw   0x3              	MOVLW	0x03
0008a2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	120; pillefyrsstyring.c	adc_open(ADC_CHN_0, ADC_FOSC_4 | ADC_ACQT_20, ADC_CFG_12A, ADC_FRM_RJUST | ADC_INT_OFF | ADC_VCFG_AN3_AN2);
0008a4   0eb0     movlw   0xb0             	MOVLW	0xb0
0008a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008a8   0e03     movlw   0x3              	MOVLW	0x03
0008aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ac   0e3c     movlw   0x3c             	MOVLW	0x3c
0008ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b0   0e00     movlw   0                	MOVLW	0x00
0008b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b4   ec33     call    0x2466, 0        	CALL	_adc_open
0008b6   f012
0008b8   0e04     movlw   0x4              	MOVLW	0x04
0008ba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	123; pillefyrsstyring.c	init_latches();
0008bc   ec2c     call    0x2c58, 0        	CALL	_init_latches
0008be   f016
                                           _00105_DS_:
                                           ;	.line	127; pillefyrsstyring.c	while (!fifo_in_use()) {
0008c0   ecba     call    0x2b74, 0        	CALL	_fifo_in_use
0008c2   f015
0008c4   6e00     movwf   0, 0             	MOVWF	r0x00
0008c6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008c8   e123     bnz     0x910            	BNZ	_00107_DS_
                                           ;	.line	128; pillefyrsstyring.c	latched_lcd_power(1);
0008ca   0e01     movlw   0x1              	MOVLW	0x01
0008cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ce   ecf7     call    0x29ee, 0        	CALL	_latched_lcd_power
0008d0   f014
0008d2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	129; pillefyrsstyring.c	sleep_ms(1000);
0008d4   0e00     movlw   0                	MOVLW	0x00
0008d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d8   0e00     movlw   0                	MOVLW	0x00
0008da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008dc   0e03     movlw   0x3              	MOVLW	0x03
0008de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e0   0ee8     movlw   0xe8             	MOVLW	0xe8
0008e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e4   ec47     call    0x168e, 0        	CALL	_sleep_ms
0008e6   f00b
0008e8   0e04     movlw   0x4              	MOVLW	0x04
0008ea   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	130; pillefyrsstyring.c	latched_lcd_power(0);
0008ec   0e00     movlw   0                	MOVLW	0x00
0008ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f0   ecf7     call    0x29ee, 0        	CALL	_latched_lcd_power
0008f2   f014
0008f4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; pillefyrsstyring.c	sleep_ms(1000);
0008f6   0e00     movlw   0                	MOVLW	0x00
0008f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fa   0e00     movlw   0                	MOVLW	0x00
0008fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fe   0e03     movlw   0x3              	MOVLW	0x03
000900   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000902   0ee8     movlw   0xe8             	MOVLW	0xe8
000904   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000906   ec47     call    0x168e, 0        	CALL	_sleep_ms
000908   f00b
00090a   0e04     movlw   0x4              	MOVLW	0x04
00090c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00090e   d7d8     bra     0x8c0            	BRA	_00105_DS_
                                           _00107_DS_:
                                           ;	.line	133; pillefyrsstyring.c	latched_lcd_power(1);
000910   0e01     movlw   0x1              	MOVLW	0x01
000912   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000914   ecf7     call    0x29ee, 0        	CALL	_latched_lcd_power
000916   f014
000918   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	135; pillefyrsstyring.c	last_inputs = get_inputs();
00091a   ec8f     call    0x2d1e, 0        	CALL	_get_inputs
00091c   f016
00091e   0108     movlb   0x8              	BANKSEL	_last_inputs
000920   6f10     movwf   0x10, 0x1        	MOVWF	_last_inputs, B
000922   010f     movlb   0xf              	BANKSEL	_output_ac_power_pwm
                                           ;	.line	137; pillefyrsstyring.c	output_ac_power_pwm[0] = 0;
000924   6b61     clrf    0x61, 0x1        	CLRF	_output_ac_power_pwm, B
000926   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 1)
                                           ;	.line	138; pillefyrsstyring.c	output_ac_power_pwm[1] = 0;
000928   6b62     clrf    0x62, 0x1        	CLRF	(_output_ac_power_pwm + 1), B
00092a   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 2)
                                           ;	.line	139; pillefyrsstyring.c	output_ac_power_pwm[2] = 0;
00092c   6b63     clrf    0x63, 0x1        	CLRF	(_output_ac_power_pwm + 2), B
00092e   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 3)
                                           ;	.line	140; pillefyrsstyring.c	output_ac_power_pwm[3] = 0;
000930   6b64     clrf    0x64, 0x1        	CLRF	(_output_ac_power_pwm + 3), B
000932   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 4)
                                           ;	.line	141; pillefyrsstyring.c	output_ac_power_pwm[4] = 0;
000934   6b65     clrf    0x65, 0x1        	CLRF	(_output_ac_power_pwm + 4), B
000936   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 5)
                                           ;	.line	142; pillefyrsstyring.c	output_ac_power_pwm[5] = 0;
000938   6b66     clrf    0x66, 0x1        	CLRF	(_output_ac_power_pwm + 5), B
                                           _00135_DS_:
                                           ;	.line	148; pillefyrsstyring.c	if (fifo_get(&c)) {
00093a   0e08     movlw   0x8              	MOVLW	HIGH(_main_c_1_102)
00093c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00093e   0e11     movlw   0x11             	MOVLW	LOW(_main_c_1_102)
000940   6e00     movwf   0, 0             	MOVWF	r0x00
000942   0e80     movlw   0x80             	MOVLW	0x80
000944   6e02     movwf   0x2, 0           	MOVWF	r0x02
000946   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000948   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00094a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00094c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00094e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000950   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000952   ec12     call    0x2024, 0        	CALL	_fifo_get
000954   f010
000956   6e00     movwf   0, 0             	MOVWF	r0x00
000958   0e03     movlw   0x3              	MOVLW	0x03
00095a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00095c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00095e   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000960   d13d     bra     0xbdc            	BRA	_00127_DS_
000962   0108     movlb   0x8              	BANKSEL	_main_c_1_102
                                           ;	.line	149; pillefyrsstyring.c	if (c == '\n' || c == '.') {
000964   5111     movf    0x11, 0, 0x1     	MOVF	_main_c_1_102, W, B
000966   0a0a     xorlw   0xa              	XORLW	0x0a
000968   e005     bz      0x974            	BZ	_00122_DS_
                                           _00208_DS_:
00096a   0108     movlb   0x8              	BANKSEL	_main_c_1_102
00096c   5111     movf    0x11, 0, 0x1     	MOVF	_main_c_1_102, W, B
00096e   0a2e     xorlw   0x2e             	XORLW	0x2e
000970   e001     bz      0x974            	BZ	_00122_DS_
000972   d109     bra     0xb86            	BRA	_00123_DS_
                                           _00122_DS_:
000974   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	151; pillefyrsstyring.c	command_index = 0;
000976   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	152; pillefyrsstyring.c	if (validate_command(command, valid_command)) {
000978   0e00     movlw   0                	MOVLW	HIGH(_command)
00097a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00097c   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
00097e   6e00     movwf   0, 0             	MOVWF	r0x00
000980   0e80     movlw   0x80             	MOVLW	0x80
000982   6e02     movwf   0x2, 0           	MOVWF	r0x02
000984   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000986   6e04     movwf   0x4, 0           	MOVWF	r0x04
000988   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
00098a   6e03     movwf   0x3, 0           	MOVWF	r0x03
00098c   0e80     movlw   0x80             	MOVLW	0x80
00098e   6e05     movwf   0x5, 0           	MOVWF	r0x05
000990   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000992   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000994   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000996   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000998   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00099a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00099c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00099e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a8   ec9e     call    0x153c, 0        	CALL	_validate_command
0009aa   f00a
0009ac   6e00     movwf   0, 0             	MOVWF	r0x00
0009ae   0e06     movlw   0x6              	MOVLW	0x06
0009b0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0009b2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009b4   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0009b6   d0e3     bra     0xb7e            	BRA	_00117_DS_
0009b8   0004     clrwdt                   	clrwdt 
                                           ;	.line	154; pillefyrsstyring.c	RELAY = 1;
0009ba   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
0009bc   0100     movlb   0                	BANKSEL	_valid_command
                                           ;	.line	156; pillefyrsstyring.c	switch (valid_command[0]) {					// only look at first character
0009be   51f9     movf    0xf9, 0, 0x1     	MOVF	_valid_command, W, B
0009c0   6e00     movwf   0, 0             	MOVWF	r0x00
0009c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c4   0a61     xorlw   0x61             	XORLW	0x61
0009c6   e101     bnz     0x9ca            	BNZ	_00212_DS_
0009c8   d096     bra     0xaf6            	BRA	_00156_DS_
                                           _00212_DS_:
0009ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009cc   0a67     xorlw   0x67             	XORLW	0x67
0009ce   e101     bnz     0x9d2            	BNZ	_00214_DS_
0009d0   d03c     bra     0xa4a            	BRA	_00110_DS_
                                           _00214_DS_:
0009d2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d4   0a73     xorlw   0x73             	XORLW	0x73
0009d6   e005     bz      0x9e2            	BZ	_00108_DS_
0009d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009da   0a7a     xorlw   0x7a             	XORLW	0x7a
0009dc   e101     bnz     0x9e0            	BNZ	_00218_DS_
0009de   d069     bra     0xab2            	BRA	_00111_DS_
                                           _00218_DS_:
0009e0   d0ca     bra     0xb76            	BRA	_00114_DS_
                                           _00108_DS_:
                                           ;	.line	158; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009e2   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00137_DS_:
                                           ;	.line	159; pillefyrsstyring.c	output_ac_power_pwm[j] = valid_command[j + 1];
0009e4   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
0009e6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0009e8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0009ea   6a02     clrf    0x2, 0           	CLRF	r0x02
0009ec   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
0009ee   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009f0   2800     incf    0, 0, 0          	INCF	r0x00, W
0009f2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0009f4   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
0009f6   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0009f8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0009fa   6a05     clrf    0x5, 0           	CLRF	r0x05
0009fc   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
0009fe   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000a00   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000a02   ffe9
000a04   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000a06   ffea
000a08   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
000a0a   f004
000a0c   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000a0e   ffe9
000a10   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
000a12   ffea
000a14   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
000a16   ffef
                                           ;	.line	158; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
000a18   c003     movff   0x3, 0           	MOVFF	r0x03, r0x00
000a1a   f000
000a1c   0e06     movlw   0x6              	MOVLW	0x06
000a1e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000a20   e3e1     bnc     0x9e4            	BNC	_00137_DS_
                                           ;	.line	161; pillefyrsstyring.c	usart_putc('!');	// ok values set to ac power pwm system
000a22   0e21     movlw   0x21             	MOVLW	0x21
000a24   ec11     call    0x2e22, 0        	CALL	_usart_putc
000a26   f017
                                           ;	.line	162; pillefyrsstyring.c	usart_puts("\n\r");
000a28   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a2a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a2c   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000a2e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a30   0e22     movlw   0x22             	MOVLW	LOW(__str_1)
000a32   6e00     movwf   0, 0             	MOVWF	r0x00
000a34   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a38   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a3a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a3c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a3e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a40   ec71     call    0x24e2, 0        	CALL	_usart_puts
000a42   f012
000a44   0e03     movlw   0x3              	MOVLW	0x03
000a46   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	163; pillefyrsstyring.c	break;
000a48   d0c9     bra     0xbdc            	BRA	_00127_DS_
                                           _00110_DS_:
                                           ;	.line	165; pillefyrsstyring.c	sprintf(buffer, "g%02x\n\r", sensor_inputs);
000a4a   c812     movff   0x812, 0         	MOVFF	_sensor_inputs, r0x00
000a4c   f000
000a4e   6a01     clrf    0x1, 0           	CLRF	r0x01
000a50   0e00     movlw   0                	MOVLW	UPPER(__str_2)
000a52   6e04     movwf   0x4, 0           	MOVWF	r0x04
000a54   0e15     movlw   0x15             	MOVLW	HIGH(__str_2)
000a56   6e03     movwf   0x3, 0           	MOVWF	r0x03
000a58   0e26     movlw   0x26             	MOVLW	LOW(__str_2)
000a5a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a5c   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a5e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a60   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a62   6e05     movwf   0x5, 0           	MOVWF	r0x05
000a64   0e80     movlw   0x80             	MOVLW	0x80
000a66   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a68   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a6c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a70   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a74   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a78   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a7c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a80   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a82   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a84   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a86   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a88   ecbd     call    0x1b7a, 0        	CALL	_sprintf
000a8a   f00d
000a8c   0e08     movlw   0x8              	MOVLW	0x08
000a8e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	166; pillefyrsstyring.c	usart_puts(buffer);
000a90   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a92   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a94   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000a96   6e00     movwf   0, 0             	MOVWF	r0x00
000a98   0e80     movlw   0x80             	MOVLW	0x80
000a9a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a9c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a9e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aa2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000aa6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa8   ec71     call    0x24e2, 0        	CALL	_usart_puts
000aaa   f012
000aac   0e03     movlw   0x3              	MOVLW	0x03
000aae   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	167; pillefyrsstyring.c	break;
000ab0   d095     bra     0xbdc            	BRA	_00127_DS_
                                           _00111_DS_:
                                           ;	.line	169; pillefyrsstyring.c	usart_putc('z');
000ab2   0e7a     movlw   0x7a             	MOVLW	0x7a
000ab4   ec11     call    0x2e22, 0        	CALL	_usart_putc
000ab6   f017
                                           ;	.line	170; pillefyrsstyring.c	usart_puts("\n\r");
000ab8   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000aba   6e02     movwf   0x2, 0           	MOVWF	r0x02
000abc   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000abe   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ac0   0e22     movlw   0x22             	MOVLW	LOW(__str_1)
000ac2   6e00     movwf   0, 0             	MOVWF	r0x00
000ac4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ac6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000aca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000acc   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ace   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad0   ec71     call    0x24e2, 0        	CALL	_usart_puts
000ad2   f012
000ad4   0e03     movlw   0x3              	MOVLW	0x03
000ad6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	171; pillefyrsstyring.c	sleep_ms(100);
000ad8   0e00     movlw   0                	MOVLW	0x00
000ada   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000adc   0e00     movlw   0                	MOVLW	0x00
000ade   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae0   0e00     movlw   0                	MOVLW	0x00
000ae2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae4   0e64     movlw   0x64             	MOVLW	0x64
000ae6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae8   ec47     call    0x168e, 0        	CALL	_sleep_ms
000aea   f00b
000aec   0e04     movlw   0x4              	MOVLW	0x04
000aee   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	172; pillefyrsstyring.c	reset();
000af0   ec09     call    0x2e12, 0        	CALL	_reset
000af2   f017
                                           ;	.line	173; pillefyrsstyring.c	break;
000af4   d073     bra     0xbdc            	BRA	_00127_DS_
                                           _00156_DS_:
                                           ;	.line	175; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000af6   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00139_DS_:
                                           ;	.line	176; pillefyrsstyring.c	sprintf(buffer, "ad%d: %04x\n\r", j, ad_inputs[0]);
000af8   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000afa   f001
000afc   6a02     clrf    0x2, 0           	CLRF	r0x02
000afe   0e00     movlw   0                	MOVLW	UPPER(__str_3)
000b00   6e05     movwf   0x5, 0           	MOVWF	r0x05
000b02   0e15     movlw   0x15             	MOVLW	HIGH(__str_3)
000b04   6e04     movwf   0x4, 0           	MOVWF	r0x04
000b06   0e2e     movlw   0x2e             	MOVLW	LOW(__str_3)
000b08   6e03     movwf   0x3, 0           	MOVWF	r0x03
000b0a   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000b0c   6e07     movwf   0x7, 0           	MOVWF	r0x07
000b0e   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000b10   6e06     movwf   0x6, 0           	MOVWF	r0x06
000b12   0e80     movlw   0x80             	MOVLW	0x80
000b14   6e08     movwf   0x8, 0           	MOVWF	r0x08
000b16   010f     movlb   0xf              	BANKSEL	(_ad_inputs + 1)
000b18   5132     movf    0x32, 0, 0x1     	MOVF	(_ad_inputs + 1), W, B
000b1a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b1c   010f     movlb   0xf              	BANKSEL	_ad_inputs
000b1e   5131     movf    0x31, 0, 0x1     	MOVF	_ad_inputs, W, B
000b20   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b22   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b24   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b26   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b28   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000b2c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b2e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000b30   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b32   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b34   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b36   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
000b38   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b3a   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000b3c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b3e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b42   ecbd     call    0x1b7a, 0        	CALL	_sprintf
000b44   f00d
000b46   0e0a     movlw   0xa              	MOVLW	0x0a
000b48   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	177; pillefyrsstyring.c	usart_puts(buffer);
000b4a   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000b4c   6e02     movwf   0x2, 0           	MOVWF	r0x02
000b4e   0e4e     movlw   0x4e             	MOVLW	LOW(_main_buffer_1_102)
000b50   6e01     movwf   0x1, 0           	MOVWF	r0x01
000b52   0e80     movlw   0x80             	MOVLW	0x80
000b54   6e03     movwf   0x3, 0           	MOVWF	r0x03
000b56   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000b58   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b5c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b5e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b60   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b62   ec71     call    0x24e2, 0        	CALL	_usart_puts
000b64   f012
000b66   0e03     movlw   0x3              	MOVLW	0x03
000b68   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	175; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000b6a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000b6c   0e08     movlw   0x8              	MOVLW	0x08
000b6e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000b70   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000b72   d7c2     bra     0xaf8            	BRA	_00139_DS_
                                           ;	.line	179; pillefyrsstyring.c	break;
000b74   d033     bra     0xbdc            	BRA	_00127_DS_
                                           _00114_DS_:
                                           ;	.line	181; pillefyrsstyring.c	usart_putc('?');	// unknown command
000b76   0e3f     movlw   0x3f             	MOVLW	0x3f
000b78   ec11     call    0x2e22, 0        	CALL	_usart_putc
000b7a   f017
                                           ;	.line	182; pillefyrsstyring.c	}		
000b7c   d02f     bra     0xbdc            	BRA	_00127_DS_
                                           _00117_DS_:
                                           ;	.line	185; pillefyrsstyring.c	usart_putc('?');			// command not valid
000b7e   0e3f     movlw   0x3f             	MOVLW	0x3f
000b80   ec11     call    0x2e22, 0        	CALL	_usart_putc
000b82   f017
000b84   d02b     bra     0xbdc            	BRA	_00127_DS_
                                           _00123_DS_:
                                           ;	.line	191; pillefyrsstyring.c	if (command_index <= COMMAND_LENGTH) {
000b86   0e15     movlw   0x15             	MOVLW	0x15
000b88   0108     movlb   0x8              	BANKSEL	_command_index
000b8a   5d0f     subwf   0xf, 0, 0x1      	SUBWF	_command_index, W, B
000b8c   e210     bc      0xbae            	BC	_00120_DS_
                                           ;	.line	192; pillefyrsstyring.c	command[command_index] = c;
000b8e   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000b90   0108     movlb   0x8              	BANKSEL	_command_index
000b92   250f     addwf   0xf, 0, 0x1      	ADDWF	_command_index, W, B
000b94   6e00     movwf   0, 0             	MOVWF	r0x00
000b96   6a01     clrf    0x1, 0           	CLRF	r0x01
000b98   0e00     movlw   0                	MOVLW	HIGH(_command)
000b9a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000b9c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000b9e   ffe9
000ba0   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000ba2   ffea
000ba4   c811     movff   0x811, 0xfef     	MOVFF	_main_c_1_102, INDF0
000ba6   ffef
000ba8   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	193; pillefyrsstyring.c	command_index++;
000baa   2b0f     incf    0xf, 0x1, 0x1    	INCF	_command_index, F, B
000bac   d017     bra     0xbdc            	BRA	_00127_DS_
                                           _00120_DS_:
000bae   0100     movlb   0                	BANKSEL	(_command + 20)
                                           ;	.line	196; pillefyrsstyring.c	command[COMMAND_LENGTH] = '\0';	// null terminate it
000bb0   6bf8     clrf    0xf8, 0x1        	CLRF	(_command + 20), B
000bb2   0108     movlb   0x8              	BANKSEL	_command_index
                                           ;	.line	197; pillefyrsstyring.c	command_index = 0;
000bb4   6b0f     clrf    0xf, 0x1         	CLRF	_command_index, B
                                           ;	.line	198; pillefyrsstyring.c	usart_putc('+');		// overflow
000bb6   0e2b     movlw   0x2b             	MOVLW	0x2b
000bb8   ec11     call    0x2e22, 0        	CALL	_usart_putc
000bba   f017
                                           ;	.line	199; pillefyrsstyring.c	usart_puts("\n\r");
000bbc   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000bbe   6e02     movwf   0x2, 0           	MOVWF	r0x02
000bc0   0e15     movlw   0x15             	MOVLW	HIGH(__str_1)
000bc2   6e01     movwf   0x1, 0           	MOVWF	r0x01
000bc4   0e22     movlw   0x22             	MOVLW	LOW(__str_1)
000bc6   6e00     movwf   0, 0             	MOVWF	r0x00
000bc8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000bca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bcc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000bce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd0   5000     movf    0, 0, 0          	MOVF	r0x00, W
000bd2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bd4   ec71     call    0x24e2, 0        	CALL	_usart_puts
000bd6   f012
000bd8   0e03     movlw   0x3              	MOVLW	0x03
000bda   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00127_DS_:
000bdc   0108     movlb   0x8              	BANKSEL	_sensor_inputs
                                           ;	.line	204; pillefyrsstyring.c	if (sensor_inputs != last_inputs) {
000bde   5112     movf    0x12, 0, 0x1     	MOVF	_sensor_inputs, W, B
000be0   0108     movlb   0x8              	BANKSEL	_last_inputs
000be2   1910     xorwf   0x10, 0, 0x1     	XORWF	_last_inputs, W, B
000be4   e004     bz      0xbee            	BZ	_00162_DS_
                                           ;	.line	205; pillefyrsstyring.c	last_inputs = sensor_inputs;
000be6   c812     movff   0x812, 0x810     	MOVFF	_sensor_inputs, _last_inputs
000be8   f810
                                           ;	.line	206; pillefyrsstyring.c	_debug();	// blocks main for a while :-/
000bea   ec05     call    0x260a, 0        	CALL	__debug
000bec   f013
                                           _00162_DS_:
                                           ;	.line	210; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000bee   6a00     clrf    0, 0             	CLRF	r0x00
000bf0   6a01     clrf    0x1, 0           	CLRF	r0x01
000bf2   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00141_DS_:
                                           ;	.line	211; pillefyrsstyring.c	adc_setchannel(j);
000bf4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000bf6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bf8   ec14     call    0x2a28, 0        	CALL	_adc_setchannel
000bfa   f015
000bfc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	212; pillefyrsstyring.c	adc_conv();
000bfe   ec0a     call    0x14, 0          	CALL	_adc_conv
000c00   f000
                                           _00130_DS_:
                                           ;	.line	213; pillefyrsstyring.c	while(adc_busy()) {
000c02   ec2c     call    0x2e58, 0        	CALL	_adc_busy
000c04   f017
000c06   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c08   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c0a   e1fb     bnz     0xc02            	BNZ	_00130_DS_
                                           ;	.line	216; pillefyrsstyring.c	ad_inputs[j] = adc_read();
000c0c   0e31     movlw   0x31             	MOVLW	LOW(_ad_inputs)
000c0e   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
000c10   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c12   0e0f     movlw   0xf              	MOVLW	HIGH(_ad_inputs)
000c14   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000c16   6e04     movwf   0x4, 0           	MOVWF	r0x04
000c18   ec20     call    0x2e40, 0        	CALL	_adc_read
000c1a   f017
000c1c   6e05     movwf   0x5, 0           	MOVWF	r0x05
000c1e   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
000c20   f006
000c22   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000c24   ffe9
000c26   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000c28   ffea
000c2a   c005     movff   0x5, 0xfee       	MOVFF	r0x05, POSTINC0
000c2c   ffee
000c2e   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000c30   ffef
                                           ;	.line	210; pillefyrsstyring.c	for (j = 0; j < AD_INPUTS; j++) {
000c32   0e02     movlw   0x2              	MOVLW	0x02
000c34   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000c36   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000c38   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000c3a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000c3c   0e08     movlw   0x8              	MOVLW	0x08
000c3e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000c40   e3d9     bnc     0xbf4            	BNC	_00141_DS_
000c42   d67b     bra     0x93a            	BRA	_00135_DS_
000c44   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	497; pillefyrsstyring.c	void _debug() {
00260a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00260c   ffe5
00260e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002610   ffd9
                                           ;	.line	498; pillefyrsstyring.c	latched_lcd_power(0);
002612   0e00     movlw   0                	MOVLW	0x00
002614   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002616   ecf7     call    0x29ee, 0        	CALL	_latched_lcd_power
002618   f014
00261a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	499; pillefyrsstyring.c	sleep_ms(200);
00261c   0e00     movlw   0                	MOVLW	0x00
00261e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002620   0e00     movlw   0                	MOVLW	0x00
002622   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002624   0e00     movlw   0                	MOVLW	0x00
002626   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002628   0ec8     movlw   0xc8             	MOVLW	0xc8
00262a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00262c   ec47     call    0x168e, 0        	CALL	_sleep_ms
00262e   f00b
002630   0e04     movlw   0x4              	MOVLW	0x04
002632   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	500; pillefyrsstyring.c	latched_lcd_power(1);
002634   0e01     movlw   0x1              	MOVLW	0x01
002636   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002638   ecf7     call    0x29ee, 0        	CALL	_latched_lcd_power
00263a   f014
00263c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	501; pillefyrsstyring.c	sleep_ms(200);
00263e   0e00     movlw   0                	MOVLW	0x00
002640   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002642   0e00     movlw   0                	MOVLW	0x00
002644   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002646   0e00     movlw   0                	MOVLW	0x00
002648   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00264a   0ec8     movlw   0xc8             	MOVLW	0xc8
00264c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00264e   ec47     call    0x168e, 0        	CALL	_sleep_ms
002650   f00b
002652   0e04     movlw   0x4              	MOVLW	0x04
002654   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002656   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002658   ffd9
00265a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__reset	code
                                           _reset:
                                           ;	.line	491; pillefyrsstyring.c	void reset() {
002e12   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002e14   ffe5
002e16   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002e18   ffd9
002e1a   00ff     reset                    	reset
002e1c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e1e   ffd9
002e20   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__validate_command	code
                                           _validate_command:
                                           ;	.line	474; pillefyrsstyring.c	unsigned char validate_command(unsigned char *encoded_command, unsigned char *validated_command) {
00153c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00153e   ffe5
001540   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001542   ffd9
001544   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001546   ffe5
001548   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00154a   ffe5
00154c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00154e   ffe5
001550   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001552   ffe5
001554   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001556   ffe5
001558   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00155a   ffe5
00155c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00155e   ffe5
001560   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001562   ffe5
001564   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001566   ffe5
001568   0e02     movlw   0x2              	MOVLW	0x02
00156a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00156c   f000
00156e   0e03     movlw   0x3              	MOVLW	0x03
001570   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001572   f001
001574   0e04     movlw   0x4              	MOVLW	0x04
001576   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001578   f002
00157a   0e05     movlw   0x5              	MOVLW	0x05
00157c   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00157e   f003
001580   0e06     movlw   0x6              	MOVLW	0x06
001582   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
001584   f004
001586   0e07     movlw   0x7              	MOVLW	0x07
001588   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
00158a   f005
                                           ;	.line	478; pillefyrsstyring.c	base64decode(encoded_command, decoded_command);
00158c   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
00158e   6e07     movwf   0x7, 0           	MOVWF	r0x07
001590   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
001592   6e06     movwf   0x6, 0           	MOVWF	r0x06
001594   0e80     movlw   0x80             	MOVLW	0x80
001596   6e08     movwf   0x8, 0           	MOVWF	r0x08
001598   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00159a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00159c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00159e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0015a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0015a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015a8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ac   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015b0   ec2d     call    0x105a, 0        	CALL	_base64decode
0015b2   f008
0015b4   0e06     movlw   0x6              	MOVLW	0x06
0015b6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	479; pillefyrsstyring.c	received_checksum = (decoded_command[7] << 8) + decoded_command[8];
0015b8   cf5f     movff   0xf5f, 0         	MOVFF	(_validate_command_decoded_command_1_154 + 7), r0x00
0015ba   f000
0015bc   6a01     clrf    0x1, 0           	CLRF	r0x01
0015be   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015c0   6e06     movwf   0x6, 0           	MOVWF	r0x06
0015c2   6a02     clrf    0x2, 0           	CLRF	r0x02
0015c4   cf60     movff   0xf60, 0         	MOVFF	(_validate_command_decoded_command_1_154 + 8), r0x00
0015c6   f000
0015c8   6a01     clrf    0x1, 0           	CLRF	r0x01
0015ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0015cc   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
0015ce   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015d0   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
                                           ;	.line	480; pillefyrsstyring.c	checksum = crc16(decoded_command, 7, 0);
0015d2   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
0015d4   6e01     movwf   0x1, 0           	MOVWF	r0x01
0015d6   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
0015d8   6e00     movwf   0, 0             	MOVWF	r0x00
0015da   0e80     movlw   0x80             	MOVLW	0x80
0015dc   6e07     movwf   0x7, 0           	MOVWF	r0x07
0015de   0e00     movlw   0                	MOVLW	0x00
0015e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e2   0e00     movlw   0                	MOVLW	0x00
0015e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015e6   0e00     movlw   0                	MOVLW	0x00
0015e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ea   0e00     movlw   0                	MOVLW	0x00
0015ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015ee   0e00     movlw   0                	MOVLW	0x00
0015f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f2   0e07     movlw   0x7              	MOVLW	0x07
0015f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015f6   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0015f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015fa   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0015fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0015fe   5000     movf    0, 0, 0          	MOVF	r0x00, W
001600   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001602   ecef     call    0x17de, 0        	CALL	_crc16
001604   f00b
001606   6e00     movwf   0, 0             	MOVWF	r0x00
001608   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
00160a   f001
00160c   0e09     movlw   0x9              	MOVLW	0x09
00160e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	482; pillefyrsstyring.c	if (received_checksum == checksum) {
001610   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001612   1800     xorwf   0, 0, 0          	XORWF	r0x00, W
001614   e103     bnz     0x161c           	BNZ	_00381_DS_
001616   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001618   1801     xorwf   0x1, 0, 0        	XORWF	r0x01, W
00161a   e001     bz      0x161e           	BZ	_00382_DS_
                                           _00381_DS_:
00161c   d022     bra     0x1662           	BRA	_00374_DS_
                                           _00382_DS_:
                                           ;	.line	483; pillefyrsstyring.c	memcpy(validated_command, decoded_command, 7);
00161e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001620   6e05     movwf   0x5, 0           	MOVWF	r0x05
001622   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001624   6e04     movwf   0x4, 0           	MOVWF	r0x04
001626   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001628   6e03     movwf   0x3, 0           	MOVWF	r0x03
00162a   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_154)
00162c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00162e   0e58     movlw   0x58             	MOVLW	LOW(_validate_command_decoded_command_1_154)
001630   6e00     movwf   0, 0             	MOVWF	r0x00
001632   0e80     movlw   0x80             	MOVLW	0x80
001634   6e02     movwf   0x2, 0           	MOVWF	r0x02
001636   0e00     movlw   0                	MOVLW	0x00
001638   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00163a   0e07     movlw   0x7              	MOVLW	0x07
00163c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00163e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001640   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001642   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001644   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001646   5000     movf    0, 0, 0          	MOVF	r0x00, W
001648   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00164a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00164c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00164e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001650   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001652   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001654   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001656   ecd0     call    0x1da0, 0        	CALL	_memcpy
001658   f00e
00165a   0e08     movlw   0x8              	MOVLW	0x08
00165c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	484; pillefyrsstyring.c	return 1;
00165e   0e01     movlw   0x1              	MOVLW	0x01
001660   d001     bra     0x1664           	BRA	_00376_DS_
                                           _00374_DS_:
                                           ;	.line	487; pillefyrsstyring.c	return 0;
001662   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00376_DS_:
001664   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001666   f008
001668   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00166a   f007
00166c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00166e   f006
001670   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001672   f005
001674   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001676   f004
001678   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00167a   f003
00167c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00167e   f002
001680   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001682   f001
001684   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001686   f000
001688   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00168a   ffd9
00168c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64encode	code
                                           _base64encode:
                                           ;	.line	464; pillefyrsstyring.c	void base64encode(unsigned char *s) {
002e32   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002e34   ffe5
002e36   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002e38   ffd9
                                           ;	.line	472; pillefyrsstyring.c	}
002e3a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e3c   ffd9
002e3e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64decode	code
                                           _base64decode:
                                           ;	.line	449; pillefyrsstyring.c	void base64decode(unsigned char *s, unsigned char *buffer) {
00105a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00105c   ffe5
00105e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001060   ffd9
001062   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001064   ffe5
001066   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001068   ffe5
00106a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00106c   ffe5
00106e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001070   ffe5
001072   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001074   ffe5
001076   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001078   ffe5
00107a   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00107c   ffe5
00107e   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001080   ffe5
001082   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001084   ffe5
001086   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
001088   ffe5
00108a   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
00108c   ffe5
00108e   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
001090   ffe5
001092   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
001094   ffe5
001096   0e02     movlw   0x2              	MOVLW	0x02
001098   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00109a   f000
00109c   0e03     movlw   0x3              	MOVLW	0x03
00109e   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0010a0   f001
0010a2   0e04     movlw   0x4              	MOVLW	0x04
0010a4   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0010a6   f002
0010a8   0e05     movlw   0x5              	MOVLW	0x05
0010aa   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0010ac   f003
0010ae   0e06     movlw   0x6              	MOVLW	0x06
0010b0   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
0010b2   f004
0010b4   0e07     movlw   0x7              	MOVLW	0x07
0010b6   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
0010b8   f005
                                           ;	.line	454; pillefyrsstyring.c	char xlate[] = "0123456789abcdef";
0010ba   0e30     movlw   0x30             	MOVLW	0x30
0010bc   010f     movlb   0xf              	BANKSEL	_base64decode_xlate_1_149
0010be   6f20     movwf   0x20, 0x1        	MOVWF	_base64decode_xlate_1_149, B
0010c0   0e31     movlw   0x31             	MOVLW	0x31
0010c2   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 1)
0010c4   6f21     movwf   0x21, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 1), B
0010c6   0e32     movlw   0x32             	MOVLW	0x32
0010c8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 2)
0010ca   6f22     movwf   0x22, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 2), B
0010cc   0e33     movlw   0x33             	MOVLW	0x33
0010ce   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 3)
0010d0   6f23     movwf   0x23, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 3), B
0010d2   0e34     movlw   0x34             	MOVLW	0x34
0010d4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 4)
0010d6   6f24     movwf   0x24, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 4), B
0010d8   0e35     movlw   0x35             	MOVLW	0x35
0010da   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 5)
0010dc   6f25     movwf   0x25, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 5), B
0010de   0e36     movlw   0x36             	MOVLW	0x36
0010e0   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 6)
0010e2   6f26     movwf   0x26, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 6), B
0010e4   0e37     movlw   0x37             	MOVLW	0x37
0010e6   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 7)
0010e8   6f27     movwf   0x27, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 7), B
0010ea   0e38     movlw   0x38             	MOVLW	0x38
0010ec   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 8)
0010ee   6f28     movwf   0x28, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 8), B
0010f0   0e39     movlw   0x39             	MOVLW	0x39
0010f2   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 9)
0010f4   6f29     movwf   0x29, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 9), B
0010f6   0e61     movlw   0x61             	MOVLW	0x61
0010f8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 10)
0010fa   6f2a     movwf   0x2a, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 10), B
0010fc   0e62     movlw   0x62             	MOVLW	0x62
0010fe   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 11)
001100   6f2b     movwf   0x2b, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 11), B
001102   0e63     movlw   0x63             	MOVLW	0x63
001104   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 12)
001106   6f2c     movwf   0x2c, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 12), B
001108   0e64     movlw   0x64             	MOVLW	0x64
00110a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 13)
00110c   6f2d     movwf   0x2d, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 13), B
00110e   0e65     movlw   0x65             	MOVLW	0x65
001110   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 14)
001112   6f2e     movwf   0x2e, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 14), B
001114   0e66     movlw   0x66             	MOVLW	0x66
001116   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 15)
001118   6f2f     movwf   0x2f, 0x1        	MOVWF	(_base64decode_xlate_1_149 + 15), B
00111a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_149 + 16)
00111c   6b30     clrf    0x30, 0x1        	CLRF	(_base64decode_xlate_1_149 + 16), B
                                           _00351_DS_:
                                           ;	.line	456; pillefyrsstyring.c	while (*h) {
00111e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001120   ffe9
001122   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001124   fff3
001126   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001128   ecb3     call    0x2d66, 0        	CALL	__gptrget1
00112a   f016
00112c   6e06     movwf   0x6, 0           	MOVWF	r0x06
00112e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001130   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001132   d060     bra     0x11f4           	BRA	_00354_DS_
                                           ;	.line	457; pillefyrsstyring.c	*b = ((strchr(xlate, *h) - xlate) * 16) /* multiply leading digit by 16 */
001134   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001136   6e08     movwf   0x8, 0           	MOVWF	r0x08
001138   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
00113a   6e07     movwf   0x7, 0           	MOVWF	r0x07
00113c   0e80     movlw   0x80             	MOVLW	0x80
00113e   6e09     movwf   0x9, 0           	MOVWF	r0x09
001140   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001142   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001144   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001146   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001148   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
00114a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00114c   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
00114e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001150   eca7     call    0x234e, 0        	CALL	_strchr
001152   f011
001154   6e06     movwf   0x6, 0           	MOVWF	r0x06
001156   cff3     movff   0xff3, 0x7       	MOVFF	PRODL, r0x07
001158   f007
00115a   cff4     movff   0xff4, 0x8       	MOVFF	PRODH, r0x08
00115c   f008
00115e   0e04     movlw   0x4              	MOVLW	0x04
001160   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001162   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
001164   5e06     subwf   0x6, 0x1, 0      	SUBWF	r0x06, F
001166   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001168   5a07     subwfb  0x7, 0x1, 0      	SUBWFB	r0x07, F
                                           ; ;multiply lit val:0x10 by variable r0x06 and store in r0x06
00116a   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00116c   0d10     mullw   0x10             	MULLW	0x10
00116e   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
001170   f006
                                           ;	.line	458; pillefyrsstyring.c	+ ((strchr(xlate, *(h+1)) - xlate));
001172   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
001174   6e08     movwf   0x8, 0           	MOVWF	r0x08
001176   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
001178   6e07     movwf   0x7, 0           	MOVWF	r0x07
00117a   0e80     movlw   0x80             	MOVLW	0x80
00117c   6e09     movwf   0x9, 0           	MOVWF	r0x09
00117e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001180   0f01     addlw   0x1              	ADDLW	0x01
001182   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001184   0e00     movlw   0                	MOVLW	0x00
001186   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
001188   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
00118a   0e00     movlw   0                	MOVLW	0x00
00118c   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00118e   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001190   c00a     movff   0xa, 0xfe9       	MOVFF	r0x0a, FSR0L
001192   ffe9
001194   c00b     movff   0xb, 0xff3       	MOVFF	r0x0b, PRODL
001196   fff3
001198   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
00119a   ecb3     call    0x2d66, 0        	CALL	__gptrget1
00119c   f016
00119e   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0011a0   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0011a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011a4   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0011a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011a8   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0011aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011ac   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0011ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0011b0   eca7     call    0x234e, 0        	CALL	_strchr
0011b2   f011
0011b4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0011b6   cff3     movff   0xff3, 0x8       	MOVFF	PRODL, r0x08
0011b8   f008
0011ba   cff4     movff   0xff4, 0x9       	MOVFF	PRODH, r0x09
0011bc   f009
0011be   0e04     movlw   0x4              	MOVLW	0x04
0011c0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0011c2   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_149)
0011c4   5e07     subwf   0x7, 0x1, 0      	SUBWF	r0x07, F
0011c6   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_149)
0011c8   5a08     subwfb  0x8, 0x1, 0      	SUBWFB	r0x08, F
0011ca   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0011cc   2606     addwf   0x6, 0x1, 0      	ADDWF	r0x06, F
0011ce   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0011d0   ffe5
0011d2   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0011d4   ffe9
0011d6   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0011d8   fff3
0011da   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0011dc   ece1     call    0x2dc2, 0        	CALL	__gptrput1
0011de   f016
                                           ;	.line	459; pillefyrsstyring.c	h += 2;
0011e0   0e02     movlw   0x2              	MOVLW	0x02
0011e2   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0011e4   0e00     movlw   0                	MOVLW	0x00
0011e6   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0011e8   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
                                           ;	.line	460; pillefyrsstyring.c	b++;
0011ea   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0011ec   e398     bnc     0x111e           	BNC	_00351_DS_
0011ee   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
0011f0   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
                                           _00363_DS_:
0011f2   d795     bra     0x111e           	BRA	_00351_DS_
                                           _00354_DS_:
0011f4   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0011f6   f00c
0011f8   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0011fa   f00b
0011fc   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0011fe   f00a
001200   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001202   f009
001204   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001206   f008
001208   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00120a   f007
00120c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00120e   f006
001210   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001212   f005
001214   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001216   f004
001218   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00121a   f003
00121c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00121e   f002
001220   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001222   f001
001224   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001226   f000
001228   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00122a   ffd9
00122c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_get	code
                                           _fifo_get:
                                           ;	.line	439; pillefyrsstyring.c	unsigned char fifo_get(unsigned char *c) {
002024   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002026   ffe5
002028   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00202a   ffd9
00202c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00202e   ffe5
002030   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002032   ffe5
002034   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002036   ffe5
002038   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00203a   ffe5
00203c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00203e   ffe5
002040   0e02     movlw   0x2              	MOVLW	0x02
002042   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002044   f000
002046   0e03     movlw   0x3              	MOVLW	0x03
002048   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00204a   f001
00204c   0e04     movlw   0x4              	MOVLW	0x04
00204e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
002050   f002
                                           ;	.line	440; pillefyrsstyring.c	if (fifo_in_use() != 0) {
002052   ecba     call    0x2b74, 0        	CALL	_fifo_in_use
002054   f015
002056   6e03     movwf   0x3, 0           	MOVWF	r0x03
002058   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00205a   e02d     bz      0x20b6           	BZ	_00344_DS_
                                           ;	.line	441; pillefyrsstyring.c	*c = fifo_buffer[fifo_tail++ % QUEUE_SIZE];
00205c   c805     movff   0x805, 0x3       	MOVFF	_fifo_tail, r0x03
00205e   f003
002060   c806     movff   0x806, 0x4       	MOVFF	(_fifo_tail + 1), r0x04
002062   f004
002064   0108     movlb   0x8              	BANKSEL	_fifo_tail
002066   3f05     incfsz  0x5, 0x1, 0x1    	INCFSZ	_fifo_tail, F, B
002068   d002     bra     0x206e           	BRA	_10392_DS_
00206a   0108     movlb   0x8              	BANKSEL	(_fifo_tail + 1)
00206c   2b06     incf    0x6, 0x1, 0x1    	INCF	(_fifo_tail + 1), F, B
                                           _10392_DS_:
00206e   0e00     movlw   0                	MOVLW	0x00
002070   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002072   0e64     movlw   0x64             	MOVLW	0x64
002074   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002076   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
002078   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00207a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00207c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00207e   ecb5     call    0x1f6a, 0        	CALL	__moduint
002080   f00f
002082   6e03     movwf   0x3, 0           	MOVWF	r0x03
002084   cff3     movff   0xff3, 0x4       	MOVFF	PRODL, r0x04
002086   f004
002088   0e04     movlw   0x4              	MOVLW	0x04
00208a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00208c   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
00208e   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
002090   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002092   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
002094   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
002096   ffe9
002098   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00209a   ffea
00209c   cfef     movff   0xfef, 0x3       	MOVFF	INDF0, r0x03
00209e   f003
0020a0   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0020a2   ffe5
0020a4   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0020a6   ffe9
0020a8   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0020aa   fff3
0020ac   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0020ae   ece1     call    0x2dc2, 0        	CALL	__gptrput1
0020b0   f016
                                           ;	.line	442; pillefyrsstyring.c	return 1;
0020b2   0e01     movlw   0x1              	MOVLW	0x01
0020b4   d001     bra     0x20b8           	BRA	_00346_DS_
                                           _00344_DS_:
                                           ;	.line	445; pillefyrsstyring.c	return 0;
0020b6   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00346_DS_:
0020b8   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0020ba   f004
0020bc   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0020be   f003
0020c0   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0020c2   f002
0020c4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0020c6   f001
0020c8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0020ca   f000
0020cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020ce   ffd9
0020d0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_put	code
                                           _fifo_put:
                                           ;	.line	429; pillefyrsstyring.c	unsigned char fifo_put(unsigned char c) {
0023e4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0023e6   ffe5
0023e8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0023ea   ffd9
0023ec   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0023ee   ffe5
0023f0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0023f2   ffe5
0023f4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0023f6   ffe5
0023f8   0e02     movlw   0x2              	MOVLW	0x02
0023fa   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0023fc   f000
                                           ;	.line	430; pillefyrsstyring.c	if (fifo_in_use() != QUEUE_SIZE) {
0023fe   ecba     call    0x2b74, 0        	CALL	_fifo_in_use
002400   f015
002402   6e01     movwf   0x1, 0           	MOVWF	r0x01
002404   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002406   0a64     xorlw   0x64             	XORLW	0x64
002408   e024     bz      0x2452           	BZ	_00330_DS_
                                           ;	.line	431; pillefyrsstyring.c	fifo_buffer[fifo_head++ % QUEUE_SIZE] = c;
00240a   c803     movff   0x803, 0x1       	MOVFF	_fifo_head, r0x01
00240c   f001
00240e   c804     movff   0x804, 0x2       	MOVFF	(_fifo_head + 1), r0x02
002410   f002
002412   0108     movlb   0x8              	BANKSEL	_fifo_head
002414   3f03     incfsz  0x3, 0x1, 0x1    	INCFSZ	_fifo_head, F, B
002416   d002     bra     0x241c           	BRA	_20393_DS_
002418   0108     movlb   0x8              	BANKSEL	(_fifo_head + 1)
00241a   2b04     incf    0x4, 0x1, 0x1    	INCF	(_fifo_head + 1), F, B
                                           _20393_DS_:
00241c   0e00     movlw   0                	MOVLW	0x00
00241e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002420   0e64     movlw   0x64             	MOVLW	0x64
002422   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002424   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002426   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002428   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00242a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00242c   ecb5     call    0x1f6a, 0        	CALL	__moduint
00242e   f00f
002430   6e01     movwf   0x1, 0           	MOVWF	r0x01
002432   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
002434   f002
002436   0e04     movlw   0x4              	MOVLW	0x04
002438   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00243a   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
00243c   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00243e   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002440   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
002442   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
002444   ffe9
002446   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
002448   ffea
00244a   c000     movff   0, 0xfef         	MOVFF	r0x00, INDF0
00244c   ffef
                                           ;	.line	432; pillefyrsstyring.c	return 1;
00244e   0e01     movlw   0x1              	MOVLW	0x01
002450   d001     bra     0x2454           	BRA	_00332_DS_
                                           _00330_DS_:
                                           ;	.line	435; pillefyrsstyring.c	return 0;
002452   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00332_DS_:
002454   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002456   f002
002458   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00245a   f001
00245c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00245e   f000
002460   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002462   ffd9
002464   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_in_use	code
                                           _fifo_in_use:
                                           ;	.line	425; pillefyrsstyring.c	unsigned char fifo_in_use() {
002b74   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b76   ffe5
002b78   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b7a   ffd9
002b7c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b7e   ffe5
002b80   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002b82   ffe5
002b84   0108     movlb   0x8              	BANKSEL	_fifo_head
                                           ;	.line	426; pillefyrsstyring.c	return fifo_head - fifo_tail;
002b86   5103     movf    0x3, 0, 0x1      	MOVF	_fifo_head, W, B
002b88   6e00     movwf   0, 0             	MOVWF	r0x00
002b8a   0108     movlb   0x8              	BANKSEL	_fifo_tail
002b8c   5105     movf    0x5, 0, 0x1      	MOVF	_fifo_tail, W, B
002b8e   6e01     movwf   0x1, 0           	MOVWF	r0x01
002b90   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002b92   5e00     subwf   0, 0x1, 0        	SUBWF	r0x00, F
002b94   5000     movf    0, 0, 0          	MOVF	r0x00, W
002b96   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002b98   f001
002b9a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b9c   f000
002b9e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ba0   ffd9
002ba2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	395; pillefyrsstyring.c	void my_usart_open() {
002c2e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c30   ffe5
002c32   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c34   ffd9
                                           ;	.line	396; pillefyrsstyring.c	SPBRG = 103;					// 8MHz => 19230 baud
002c36   0e67     movlw   0x67             	MOVLW	0x67
002c38   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	397; pillefyrsstyring.c	TXSTAbits.BRGH = 1;	// (1 = high speed)
002c3a   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	398; pillefyrsstyring.c	TXSTAbits.SYNC = 0;	// (0 = asynchronous)
002c3c   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	399; pillefyrsstyring.c	BAUDCONbits.BRG16 = 1;
002c3e   86b8     bsf     0xb8, 0x3, 0     	BSF	_BAUDCONbits, 3
                                           ;	.line	402; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
002c40   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	405; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
002c42   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	406; pillefyrsstyring.c	IPR1bits.TXIP = 0; // USART Tx on low priority interrupt
002c44   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	409; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
002c46   8a9d     bsf     0x9d, 0x5, 0     	BSF	_PIE1bits, 5
                                           ;	.line	410; pillefyrsstyring.c	IPR1bits.RCIP = 0; // USART Rx on low priority interrupt
002c48   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	413; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
002c4a   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	416; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
002c4c   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	419; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
002c4e   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           ;	.line	422; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
002c50   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
002c52   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c54   ffd9
002c56   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	383; pillefyrsstyring.c	unsigned char get_inputs() {
002d1e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d20   ffe5
002d22   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d24   ffd9
002d26   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002d28   ffe5
                                           ;	.line	387; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
002d2a   0eff     movlw   0xff             	MOVLW	0xff
002d2c   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	388; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
002d2e   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	389; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
002d30   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
002d32   f000
                                           ;	.line	390; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
002d34   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	392; pillefyrsstyring.c	return data;
002d36   5000     movf    0, 0, 0          	MOVF	r0x00, W
002d38   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002d3a   f000
002d3c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d3e   ffd9
002d40   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	365; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
0025b4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025b6   ffe5
0025b8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025ba   ffd9
0025bc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0025be   ffe5
0025c0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0025c2   ffe5
0025c4   0e02     movlw   0x2              	MOVLW	0x02
0025c6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0025c8   f000
0025ca   0e03     movlw   0x3              	MOVLW	0x03
0025cc   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0025ce   f001
                                           ;	.line	367; pillefyrsstyring.c	header_mask &= 0b00011111;		// only 6 outputs on this hardware
0025d0   0e1f     movlw   0x1f             	MOVLW	0x1f
0025d2   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	368; pillefyrsstyring.c	value &= header_mask;
0025d4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025d6   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	369; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
0025d8   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	370; pillefyrsstyring.c	if (value) {	// set it
0025da   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0025dc   e006     bz      0x25ea           	BZ	_00307_DS_
                                           ;	.line	371; pillefyrsstyring.c	_latch_2_data |= header_mask;
0025de   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025e0   0108     movlb   0x8              	BANKSEL	__latch_2_data
0025e2   1314     iorwf   0x14, 0x1, 0x1   	IORWF	__latch_2_data, F, B
                                           ;	.line	372; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
0025e4   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
0025e6   ff8c
0025e8   d006     bra     0x25f6           	BRA	_00308_DS_
                                           _00307_DS_:
                                           ;	.line	375; pillefyrsstyring.c	_latch_2_data &= ~header_mask;
0025ea   1e00     comf    0, 0x1, 0        	COMF	r0x00, F
0025ec   5000     movf    0, 0, 0          	MOVF	r0x00, W
0025ee   0108     movlb   0x8              	BANKSEL	__latch_2_data
0025f0   1714     andwf   0x14, 0x1, 0x1   	ANDWF	__latch_2_data, F, B
                                           ;	.line	376; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
0025f2   c814     movff   0x814, 0xf8c     	MOVFF	__latch_2_data, _LATD
0025f4   ff8c
                                           _00308_DS_:
                                           ;	.line	378; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
0025f6   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	379; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
0025f8   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	380; pillefyrsstyring.c	LATCH_DATA = 0x00;
0025fa   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0025fc   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0025fe   f001
002600   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002602   f000
002604   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002606   ffd9
002608   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	345; pillefyrsstyring.c	void init_latches() {
002c58   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c5a   ffe5
002c5c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c5e   ffd9
                                           ;	.line	346; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c60   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	347; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
002c62   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	348; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
002c64   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	350; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
002c66   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	351; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002c68   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
002c6a   0108     movlb   0x8              	BANKSEL	__latch_2_data
                                           ;	.line	352; pillefyrsstyring.c	_latch_2_data = 0x00;
002c6c   6b14     clrf    0x14, 0x1        	CLRF	__latch_2_data, B
                                           ;	.line	354; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
002c6e   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	355; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
002c70   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	357; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
002c72   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	358; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
002c74   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	360; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
002c76   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	361; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
002c78   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
002c7a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c7c   ffd9
002c7e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	291; pillefyrsstyring.c	void init_timers() {
002a9c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a9e   ffe5
002aa0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002aa2   ffd9
                                           ;	.line	293; pillefyrsstyring.c	T0CONbits.TMR0ON = 1;
002aa4   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	294; pillefyrsstyring.c	T0CONbits.T0PS0 = 0;
002aa6   90d5     bcf     0xd5, 0, 0       	BCF	_T0CONbits, 0
                                           ;	.line	295; pillefyrsstyring.c	T0CONbits.T0PS1 = 0;
002aa8   92d5     bcf     0xd5, 0x1, 0     	BCF	_T0CONbits, 1
                                           ;	.line	296; pillefyrsstyring.c	T0CONbits.T0PS2 = 0;	// prescaler 1:2
002aaa   94d5     bcf     0xd5, 0x2, 0     	BCF	_T0CONbits, 2
                                           ;	.line	297; pillefyrsstyring.c	T0CONbits.T08BIT = 0;   // use timer0 16-bit counter
002aac   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	298; pillefyrsstyring.c	T0CONbits.T0CS = 0;             // internal clock source
002aae   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	299; pillefyrsstyring.c	T0CONbits.PSA = 0;              // enable timer0 prescaler
002ab0   96d5     bcf     0xd5, 0x3, 0     	BCF	_T0CONbits, 3
                                           ;	.line	300; pillefyrsstyring.c	INTCON2bits.TMR0IP = 1; // high priority
002ab2   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	301; pillefyrsstyring.c	INTCONbits.T0IE = 1;    // Ensure that TMR0 Interrupt is enabled
002ab4   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	302; pillefyrsstyring.c	INTCONbits.TMR0IF = 1;  // Force Instant entry to Timer 0 Interrupt
002ab6   84f2     bsf     0xf2, 0x2, 0     	BSF	_INTCONbits, 2
                                           ;	.line	305; pillefyrsstyring.c	T1CONbits.TMR1ON = 1;
002ab8   80cd     bsf     0xcd, 0, 0       	BSF	_T1CONbits, 0
                                           ;	.line	306; pillefyrsstyring.c	T1CONbits.RD16 = 1;
002aba   8ecd     bsf     0xcd, 0x7, 0     	BSF	_T1CONbits, 7
                                           ;	.line	307; pillefyrsstyring.c	T1CONbits.TMR1CS = 0;   // internal clock source
002abc   92cd     bcf     0xcd, 0x1, 0     	BCF	_T1CONbits, 1
                                           ;	.line	308; pillefyrsstyring.c	T1CONbits.T1OSCEN = 0;  // dont put t1 on pin
002abe   96cd     bcf     0xcd, 0x3, 0     	BCF	_T1CONbits, 3
                                           ;	.line	309; pillefyrsstyring.c	T1CONbits.T1CKPS0 = 1;
002ac0   88cd     bsf     0xcd, 0x4, 0     	BSF	_T1CONbits, 4
                                           ;	.line	310; pillefyrsstyring.c	T1CONbits.T1CKPS1 = 1;
002ac2   8acd     bsf     0xcd, 0x5, 0     	BSF	_T1CONbits, 5
                                           ;	.line	311; pillefyrsstyring.c	IPR1bits.TMR1IP = 0;	// low priority
002ac4   909f     bcf     0x9f, 0, 0       	BCF	_IPR1bits, 0
                                           ;	.line	312; pillefyrsstyring.c	PIE1bits.TMR1IE = 1;	// Ensure that TMR1 Interrupt is enabled
002ac6   809d     bsf     0x9d, 0, 0       	BSF	_PIE1bits, 0
                                           ;	.line	313; pillefyrsstyring.c	PIR1bits.TMR1IF = 1;	// Force Instant entry to Timer 1 Interrupt
002ac8   809e     bsf     0x9e, 0, 0       	BSF	_PIR1bits, 0
                                           ;	.line	341; pillefyrsstyring.c	INTCONbits.PEIE = 1;
002aca   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	342; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
002acc   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
002ace   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ad0   ffd9
002ad2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	281; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
00168e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001690   ffe5
001692   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001694   ffd9
001696   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001698   ffe5
00169a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00169c   ffe5
00169e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0016a0   ffe5
0016a2   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0016a4   ffe5
0016a6   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0016a8   ffe5
0016aa   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0016ac   ffe5
0016ae   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0016b0   ffe5
0016b2   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0016b4   ffe5
0016b6   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0016b8   ffe5
0016ba   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
0016bc   ffe5
0016be   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
0016c0   ffe5
0016c2   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
0016c4   ffe5
0016c6   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
0016c8   ffe5
0016ca   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
0016cc   ffe5
0016ce   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
0016d0   ffe5
0016d2   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
0016d4   ffe5
0016d6   0e02     movlw   0x2              	MOVLW	0x02
0016d8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0016da   f000
0016dc   0e03     movlw   0x3              	MOVLW	0x03
0016de   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0016e0   f001
0016e2   0e04     movlw   0x4              	MOVLW	0x04
0016e4   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0016e6   f002
0016e8   0e05     movlw   0x5              	MOVLW	0x05
0016ea   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0016ec   f003
                                           ;	.line	283; pillefyrsstyring.c	start_timer_1_ms = timer_1_ms;	
0016ee   cf67     movff   0xf67, 0x4       	MOVFF	_timer_1_ms, r0x04
0016f0   f004
0016f2   cf68     movff   0xf68, 0x5       	MOVFF	(_timer_1_ms + 1), r0x05
0016f4   f005
0016f6   cf69     movff   0xf69, 0x6       	MOVFF	(_timer_1_ms + 2), r0x06
0016f8   f006
0016fa   cf6a     movff   0xf6a, 0x7       	MOVFF	(_timer_1_ms + 3), r0x07
0016fc   f007
                                           _00278_DS_:
                                           ;	.line	286; pillefyrsstyring.c	while ( (((signed long)(timer_1_ms - start_timer_1_ms) < 0) ? (-1 * (timer_1_ms - start_timer_1_ms)) : (timer_1_ms - start_timer_1_ms)) < ms) {
0016fe   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001700   010f     movlb   0xf              	BANKSEL	_timer_1_ms
001702   5d67     subwf   0x67, 0, 0x1     	SUBWF	_timer_1_ms, W, B
001704   6e08     movwf   0x8, 0           	MOVWF	r0x08
001706   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001708   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00170a   5968     subwfb  0x68, 0, 0x1     	SUBWFB	(_timer_1_ms + 1), W, B
00170c   6e09     movwf   0x9, 0           	MOVWF	r0x09
00170e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001710   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
001712   5969     subwfb  0x69, 0, 0x1     	SUBWFB	(_timer_1_ms + 2), W, B
001714   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001716   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001718   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
00171a   596a     subwfb  0x6a, 0, 0x1     	SUBWFB	(_timer_1_ms + 3), W, B
00171c   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
00171e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001720   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001722   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001724   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
001726   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
001728   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
00172a   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
00172c   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
00172e   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
001730   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
001732   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
001734   e31c     bnc     0x176e           	BNC	_00283_DS_
001736   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
001738   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00173a   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
00173c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00173e   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001740   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001742   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001744   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001746   0eff     movlw   0xff             	MOVLW	0xff
001748   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00174a   0eff     movlw   0xff             	MOVLW	0xff
00174c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00174e   0eff     movlw   0xff             	MOVLW	0xff
001750   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001752   0eff     movlw   0xff             	MOVLW	0xff
001754   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001756   ec23     call    0xc46, 0         	CALL	__mullong
001758   f006
00175a   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
00175c   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
00175e   f00d
001760   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
001762   f00e
001764   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
001766   f00f
001768   0e08     movlw   0x8              	MOVLW	0x08
00176a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00176c   d008     bra     0x177e           	BRA	_00284_DS_
                                           _00283_DS_:
00176e   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
001770   f00c
001772   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
001774   f00d
001776   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
001778   f00e
00177a   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
00177c   f00f
                                           _00284_DS_:
00177e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001780   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
001782   e108     bnz     0x1794           	BNZ	_00291_DS_
001784   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001786   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
001788   e105     bnz     0x1794           	BNZ	_00291_DS_
00178a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00178c   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
00178e   e102     bnz     0x1794           	BNZ	_00291_DS_
001790   5000     movf    0, 0, 0          	MOVF	r0x00, W
001792   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00291_DS_:
001794   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001796   d7b3     bra     0x16fe           	BRA	_00278_DS_
001798   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
00179a   f00f
00179c   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
00179e   f00e
0017a0   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
0017a2   f00d
0017a4   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0017a6   f00c
0017a8   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0017aa   f00b
0017ac   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0017ae   f00a
0017b0   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
0017b2   f009
0017b4   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0017b6   f008
0017b8   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0017ba   f007
0017bc   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0017be   f006
0017c0   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0017c2   f005
0017c4   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0017c6   f004
0017c8   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0017ca   f003
0017cc   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0017ce   f002
0017d0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0017d2   f001
0017d4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0017d6   f000
0017d8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0017da   ffd9
0017dc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_low_prio	code
                                           _isr_low_prio:
                                           ;	.line	255; pillefyrsstyring.c	static void isr_low_prio(void) __interrupt 2 {
002216   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002218   ffe5
00221a   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00221c   ffe5
00221e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002220   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
002222   ffe5
002224   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
002226   ffe5
002228   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
00222a   ffe5
00222c   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
00222e   ffe5
002230   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
002232   ffe5
002234   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
002236   ffe5
002238   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00223a   ffe5
00223c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00223e   ffd9
002240   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002242   ffe5
                                           ;	.line	257; pillefyrsstyring.c	if (PIR1bits.TMR1IF) {
002244   a09e     btfss   0x9e, 0, 0       	BTFSS	_PIR1bits, 0
002246   d010     bra     0x2268           	BRA	_00262_DS_
                                           ;	.line	258; pillefyrsstyring.c	TMR1H = (unsigned char)(TIMER1_RELOAD >> 8);    // 1 ms delay at 8 MHz
002248   0efe     movlw   0xfe             	MOVLW	0xfe
00224a   6ecf     movwf   0xcf, 0          	MOVWF	_TMR1H
                                           ;	.line	259; pillefyrsstyring.c	TMR1L = (unsigned char)TIMER1_RELOAD;
00224c   0ec8     movlw   0xc8             	MOVLW	0xc8
00224e   6ece     movwf   0xce, 0          	MOVWF	_TMR1L
                                           ;	.line	260; pillefyrsstyring.c	PIR1bits.TMR1IF = 0;    /* Clear the Timer Flag  */
002250   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
002252   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	261; pillefyrsstyring.c	timer_1_ms++;
002254   2b67     incf    0x67, 0x1, 0x1   	INCF	_timer_1_ms, F, B
002256   e308     bnc     0x2268           	BNC	_00262_DS_
002258   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00225a   2b68     incf    0x68, 0x1, 0x1   	INCF	(_timer_1_ms + 1), F, B
00225c   e305     bnc     0x2268           	BNC	_00262_DS_
00225e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
002260   3f69     incfsz  0x69, 0x1, 0x1   	INCFSZ	(_timer_1_ms + 2), F, B
002262   d002     bra     0x2268           	BRA	_30394_DS_
002264   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
002266   2b6a     incf    0x6a, 0x1, 0x1   	INCF	(_timer_1_ms + 3), F, B
                                           _30394_DS_:
                                           _00273_DS_:
                                           _00262_DS_:
                                           ;	.line	265; pillefyrsstyring.c	if (usart_drdy()) {
002268   ec28     call    0x2e50, 0        	CALL	_usart_drdy
00226a   f017
00226c   6e00     movwf   0, 0             	MOVWF	r0x00
00226e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002270   e00b     bz      0x2288           	BZ	_00265_DS_
                                           ;	.line	267; pillefyrsstyring.c	c = usart_getc();
002272   ec68     call    0x2cd0, 0        	CALL	_usart_getc
002274   f016
002276   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	268; pillefyrsstyring.c	fifo_put(c);
002278   5000     movf    0, 0, 0          	MOVF	r0x00, W
00227a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00227c   ecf2     call    0x23e4, 0        	CALL	_fifo_put
00227e   f011
002280   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	269; pillefyrsstyring.c	usart_putc(c);
002282   5000     movf    0, 0, 0          	MOVF	r0x00, W
002284   ec11     call    0x2e22, 0        	CALL	_usart_putc
002286   f017
                                           _00265_DS_:
002288   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00228a   f000
00228c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00228e   ffd9
002290   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002292   fffb
002294   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
002296   fffa
002298   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00229a   ffea
00229c   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
00229e   ffe9
0022a0   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0022a2   fff4
0022a4   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0022a6   fff3
0022a8   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0022aa   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0022ac   ffe0
0022ae   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0022b0   ffd8
0022b2   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_high_prio	code
                                           _isr_high_prio:
                                           ;	.line	221; pillefyrsstyring.c	static void isr_high_prio(void) __interrupt 1 {
0013e6   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0013e8   ffe5
0013ea   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0013ec   ffe5
0013ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013f0   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0013f2   ffe5
0013f4   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0013f6   ffe5
0013f8   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0013fa   ffe5
0013fc   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0013fe   ffe5
001400   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001402   ffe5
001404   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
001406   ffe5
001408   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00140a   ffe5
00140c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00140e   ffd9
001410   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001412   ffe5
001414   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001416   ffe5
                                           ;	.line	222; pillefyrsstyring.c	if (INTCONbits.TMR0IF) {
001418   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
00141a   d057     bra     0x14ca           	BRA	_00237_DS_
                                           ;	.line	223; pillefyrsstyring.c	TMR0H = (unsigned char)(TIMER0_RELOAD >> 8);
00141c   0efd     movlw   0xfd             	MOVLW	0xfd
00141e   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	224; pillefyrsstyring.c	TMR0L = (unsigned char)TIMER0_RELOAD;   /* Reload the Timer ASAP */
001420   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
                                           ;	.line	225; pillefyrsstyring.c	INTCONbits.TMR0IF = 0;  /* Clear the Timer Flag  */
001422   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	228; pillefyrsstyring.c	sensor_inputs = get_inputs();
001424   ec8f     call    0x2d1e, 0        	CALL	_get_inputs
001426   f016
001428   0108     movlb   0x8              	BANKSEL	_sensor_inputs
00142a   6f12     movwf   0x12, 0x1        	MOVWF	_sensor_inputs, B
00142c   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	231; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
00142e   6b07     clrf    0x7, 0x1         	CLRF	_i, B
001430   0108     movlb   0x8              	BANKSEL	(_i + 1)
001432   6b08     clrf    0x8, 0x1         	CLRF	(_i + 1), B
                                           _00235_DS_:
                                           ;	.line	232; pillefyrsstyring.c	if (ac_power_pwm_counter < output_ac_power_pwm[i]) {
001434   0e61     movlw   0x61             	MOVLW	LOW(_output_ac_power_pwm)
001436   0108     movlb   0x8              	BANKSEL	_i
001438   2507     addwf   0x7, 0, 0x1      	ADDWF	_i, W, B
00143a   6e00     movwf   0, 0             	MOVWF	r0x00
00143c   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
00143e   0108     movlb   0x8              	BANKSEL	(_i + 1)
001440   2108     addwfc  0x8, 0, 0x1      	ADDWFC	(_i + 1), W, B
001442   6e01     movwf   0x1, 0           	MOVWF	r0x01
001444   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001446   ffe9
001448   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
00144a   ffea
00144c   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
00144e   f000
001450   5000     movf    0, 0, 0          	MOVF	r0x00, W
001452   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
001454   5d13     subwf   0x13, 0, 0x1     	SUBWF	_ac_power_pwm_counter, W, B
001456   e215     bc      0x1482           	BC	_00230_DS_
                                           ;	.line	234; pillefyrsstyring.c	set_ac_power(1 << i, 0xff);
001458   0e01     movlw   0x1              	MOVLW	0x01
00145a   6e00     movwf   0, 0             	MOVWF	r0x00
00145c   6a01     clrf    0x1, 0           	CLRF	r0x01
00145e   0108     movlb   0x8              	BANKSEL	_i
001460   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
001462   e006     bz      0x1470           	BZ	_00252_DS_
001464   6ce8     negf    0xe8, 0          	NEGF	WREG
001466   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00253_DS_:
001468   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
00146a   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
00146c   0f01     addlw   0x1              	ADDLW	0x01
00146e   e3fc     bnc     0x1468           	BNC	_00253_DS_
                                           _00252_DS_:
001470   0eff     movlw   0xff             	MOVLW	0xff
001472   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001474   5000     movf    0, 0, 0          	MOVF	r0x00, W
001476   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001478   ecda     call    0x25b4, 0        	CALL	_set_ac_power
00147a   f012
00147c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00147e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001480   d014     bra     0x14aa           	BRA	_00236_DS_
                                           _00230_DS_:
                                           ;	.line	243; pillefyrsstyring.c	set_ac_power(1 << i, 0x00);
001482   0e01     movlw   0x1              	MOVLW	0x01
001484   6e00     movwf   0, 0             	MOVWF	r0x00
001486   6a01     clrf    0x1, 0           	CLRF	r0x01
001488   0108     movlb   0x8              	BANKSEL	_i
00148a   5107     movf    0x7, 0, 0x1      	MOVF	_i, W, B
00148c   e006     bz      0x149a           	BZ	_00254_DS_
00148e   6ce8     negf    0xe8, 0          	NEGF	WREG
001490   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00255_DS_:
001492   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
001494   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001496   0f01     addlw   0x1              	ADDLW	0x01
001498   e3fc     bnc     0x1492           	BNC	_00255_DS_
                                           _00254_DS_:
00149a   0e00     movlw   0                	MOVLW	0x00
00149c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00149e   5000     movf    0, 0, 0          	MOVF	r0x00, W
0014a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014a2   ecda     call    0x25b4, 0        	CALL	_set_ac_power
0014a4   f012
0014a6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0014a8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00236_DS_:
0014aa   0108     movlb   0x8              	BANKSEL	_i
                                           ;	.line	231; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
0014ac   3f07     incfsz  0x7, 0x1, 0x1    	INCFSZ	_i, F, B
0014ae   d002     bra     0x14b4           	BRA	_40395_DS_
0014b0   0108     movlb   0x8              	BANKSEL	(_i + 1)
0014b2   2b08     incf    0x8, 0x1, 0x1    	INCF	(_i + 1), F, B
                                           _40395_DS_:
0014b4   0e00     movlw   0                	MOVLW	0x00
0014b6   0108     movlb   0x8              	BANKSEL	(_i + 1)
0014b8   5d08     subwf   0x8, 0, 0x1      	SUBWF	(_i + 1), W, B
0014ba   e103     bnz     0x14c2           	BNZ	_00256_DS_
0014bc   0e06     movlw   0x6              	MOVLW	0x06
0014be   0108     movlb   0x8              	BANKSEL	_i
0014c0   5d07     subwf   0x7, 0, 0x1      	SUBWF	_i, W, B
                                           _00256_DS_:
0014c2   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0014c4   d7b7     bra     0x1434           	BRA	_00235_DS_
0014c6   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	251; pillefyrsstyring.c	ac_power_pwm_counter++;
0014c8   2b13     incf    0x13, 0x1, 0x1   	INCF	_ac_power_pwm_counter, F, B
                                           _00237_DS_:
0014ca   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0014cc   f001
0014ce   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0014d0   f000
0014d2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014d4   ffd9
0014d6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0014d8   fffb
0014da   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0014dc   fffa
0014de   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0014e0   ffea
0014e2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0014e4   ffe9
0014e6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0014e8   fff4
0014ea   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0014ec   fff3
0014ee   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0014f0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0014f2   ffe0
0014f4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0014f6   ffd8
0014f8   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0014fa   704f     btg     0x4f, 0, 0       	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
0014fc   6e65     movwf   0x65, 0          
0014fe   7453     btg     0x53, 0x2, 0     
001500   6b6f     clrf    0x6f, 0x1        
001502   7265     btg     0x65, 0x1, 0     
001504   7320     btg     0x20, 0x1, 0x1   
001506   6174     cpfslt  0x74, 0x1        	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x20, 0x73
001508   7472     btg     0x72, 0x2, 0     
00150a   6e69     movwf   0x69, 0          
00150c   2e67     decfsz  0x67, 0x1, 0     
00150e   2e2e     decfsz  0x2e, 0x1, 0     
001510   7320     btg     0x20, 0x1, 0x1   
001512   7265     btg     0x65, 0x1, 0     	DB	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e
001514   6169     cpfslt  0x69, 0x1        
001516   206c     addwfc  0x6c, 0, 0       
001518   6f77     movwf   0x77, 0x1        
00151a   6b72     clrf    0x72, 0x1        
00151c   6e69     movwf   0x69, 0          
00151e   0a67     xorlw   0x67             	DB	0x67, 0x0a, 0x0d, 0x00
001520   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_1:
001522   0d0a     mullw   0xa              	DB	0x0a, 0x0d, 0x00
001524   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001526   2567     addwf   0x67, 0, 0x1     	DB	0x67, 0x25, 0x30, 0x32, 0x78, 0x0a, 0x0d, 0x00
001528   3230     rrcf    0x30, 0x1, 0     
00152a   0a78     xorlw   0x78             
00152c   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_3:
00152e   6461     cpfsgt  0x61, 0          	DB	0x61, 0x64, 0x25, 0x64, 0x3a, 0x20, 0x25, 0x30, 0x34, 0x78, 0x0a, 0x0d
001530   6425     cpfsgt  0x25, 0          
001532   203a     addwfc  0x3a, 0, 0       
001534   3025     rrcf    0x25, 0, 0       
001536   7834     btg     0x34, 0x4, 0     
001538   0d0a     mullw   0xa              
00153a   0000     nop                      	DB	0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3374 (0x0d2e) bytes ( 2.57%)
                                           ;           	 1687 (0x0697) words
                                           ; udata size:	  202 (0x00ca) bytes ( 5.26%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Wed Dec 18 00:22:53 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	367; glcd.c	void latched_lcd_data(unsigned char value) {
002c80   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c82   ffe5
002c84   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c86   ffd9
002c88   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c8a   ffe5
002c8c   0e02     movlw   0x2              	MOVLW	0x02
002c8e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002c90   f000
                                           ;	.line	368; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002c92   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; glcd.c	LATCH_DATA = value;
002c94   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
002c96   ff8c
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_ENABLED;
002c98   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_4 = LATCH_4_DISABLED;
002c9a   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	372; glcd.c	LATCH_DATA = 0x00;
002c9c   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002c9e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002ca0   f000
002ca2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ca4   ffd9
002ca6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	352; glcd.c	void latched_lcd_cs1(unsigned char value) {
002892   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002894   ffe5
002896   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002898   ffd9
00289a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00289c   ffe5
00289e   0e02     movlw   0x2              	MOVLW	0x02
0028a0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028a2   f000
                                           ;	.line	353; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028a4   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	354; glcd.c	if (value) {	// set it
0028a6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028a8   e005     bz      0x28b4           	BZ	_00268_DS_
0028aa   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data |= 0b00100000;
0028ac   8b16     bsf     0x16, 0x5, 0x1   	BSF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
0028ae   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028b0   ff8c
0028b2   d004     bra     0x28bc           	BRA	_00269_DS_
                                           _00268_DS_:
0028b4   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	359; glcd.c	_latch_3_data &= 0b11011111;
0028b6   9b16     bcf     0x16, 0x5, 0x1   	BCF	__latch_3_data, 5, B
                                           ;	.line	360; glcd.c	LATCH_DATA = _latch_3_data;
0028b8   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028ba   ff8c
                                           _00269_DS_:
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028bc   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028be   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	364; glcd.c	LATCH_DATA = 0x00;
0028c0   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028c2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028c4   f000
0028c6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028c8   ffd9
0028ca   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	337; glcd.c	void latched_lcd_cs2(unsigned char value) {
0028cc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028ce   ffe5
0028d0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028d2   ffd9
0028d4   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028d6   ffe5
0028d8   0e02     movlw   0x2              	MOVLW	0x02
0028da   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028dc   f000
                                           ;	.line	338; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028de   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	339; glcd.c	if (value) {	// set it
0028e0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028e2   e005     bz      0x28ee           	BZ	_00260_DS_
0028e4   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data |= 0b00010000;
0028e6   8916     bsf     0x16, 0x4, 0x1   	BSF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
0028e8   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028ea   ff8c
0028ec   d004     bra     0x28f6           	BRA	_00261_DS_
                                           _00260_DS_:
0028ee   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	344; glcd.c	_latch_3_data &= 0b11101111;
0028f0   9916     bcf     0x16, 0x4, 0x1   	BCF	__latch_3_data, 4, B
                                           ;	.line	345; glcd.c	LATCH_DATA = _latch_3_data;
0028f2   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028f4   ff8c
                                           _00261_DS_:
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028f6   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028f8   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	349; glcd.c	LATCH_DATA = 0x00;
0028fa   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028fc   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028fe   f000
002900   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002902   ffd9
002904   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	322; glcd.c	void latched_lcd_rst(unsigned char value) {
002906   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002908   ffe5
00290a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00290c   ffd9
00290e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002910   ffe5
002912   0e02     movlw   0x2              	MOVLW	0x02
002914   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002916   f000
                                           ;	.line	323; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002918   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	324; glcd.c	if (value) {	// set it
00291a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00291c   e005     bz      0x2928           	BZ	_00252_DS_
00291e   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data |= 0b00001000;
002920   8716     bsf     0x16, 0x3, 0x1   	BSF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
002922   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002924   ff8c
002926   d004     bra     0x2930           	BRA	_00253_DS_
                                           _00252_DS_:
002928   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	329; glcd.c	_latch_3_data &= 0b11110111;
00292a   9716     bcf     0x16, 0x3, 0x1   	BCF	__latch_3_data, 3, B
                                           ;	.line	330; glcd.c	LATCH_DATA = _latch_3_data;
00292c   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00292e   ff8c
                                           _00253_DS_:
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002930   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002932   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	334; glcd.c	LATCH_DATA = 0x00;
002934   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002936   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002938   f000
00293a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00293c   ffd9
00293e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	307; glcd.c	void latched_lcd_rw(unsigned char value) {
002940   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002942   ffe5
002944   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002946   ffd9
002948   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00294a   ffe5
00294c   0e02     movlw   0x2              	MOVLW	0x02
00294e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002950   f000
                                           ;	.line	308; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002952   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	309; glcd.c	if (value) {	// set it
002954   5000     movf    0, 0, 0          	MOVF	r0x00, W
002956   e005     bz      0x2962           	BZ	_00244_DS_
002958   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data |= 0b00000100;
00295a   8516     bsf     0x16, 0x2, 0x1   	BSF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
00295c   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
00295e   ff8c
002960   d004     bra     0x296a           	BRA	_00245_DS_
                                           _00244_DS_:
002962   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	314; glcd.c	_latch_3_data &= 0b11111011;
002964   9516     bcf     0x16, 0x2, 0x1   	BCF	__latch_3_data, 2, B
                                           ;	.line	315; glcd.c	LATCH_DATA = _latch_3_data;
002966   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002968   ff8c
                                           _00245_DS_:
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00296a   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00296c   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	319; glcd.c	LATCH_DATA = 0x00;
00296e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002970   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002972   f000
002974   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002976   ffd9
002978   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	292; glcd.c	void latched_lcd_di(unsigned char value) {
00297a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00297c   ffe5
00297e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002980   ffd9
002982   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002984   ffe5
002986   0e02     movlw   0x2              	MOVLW	0x02
002988   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00298a   f000
                                           ;	.line	293; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00298c   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; glcd.c	if (value) {	// set it
00298e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002990   e005     bz      0x299c           	BZ	_00236_DS_
002992   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data |= 0b00000010;
002994   8316     bsf     0x16, 0x1, 0x1   	BSF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
002996   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002998   ff8c
00299a   d004     bra     0x29a4           	BRA	_00237_DS_
                                           _00236_DS_:
00299c   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	299; glcd.c	_latch_3_data &= 0b11111101;
00299e   9316     bcf     0x16, 0x1, 0x1   	BCF	__latch_3_data, 1, B
                                           ;	.line	300; glcd.c	LATCH_DATA = _latch_3_data;
0029a0   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029a2   ff8c
                                           _00237_DS_:
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0029a4   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029a6   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; glcd.c	LATCH_DATA = 0x00;
0029a8   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029aa   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029ac   f000
0029ae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029b0   ffd9
0029b2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	277; glcd.c	void latched_lcd_enable(unsigned char value) {
0029b4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029b6   ffe5
0029b8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029ba   ffd9
0029bc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029be   ffe5
0029c0   0e02     movlw   0x2              	MOVLW	0x02
0029c2   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0029c4   f000
                                           ;	.line	278; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0029c6   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	279; glcd.c	if (value) {	// set it
0029c8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0029ca   e005     bz      0x29d6           	BZ	_00228_DS_
0029cc   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data |= 0b00000001;
0029ce   8116     bsf     0x16, 0, 0x1     	BSF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
0029d0   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029d2   ff8c
0029d4   d004     bra     0x29de           	BRA	_00229_DS_
                                           _00228_DS_:
0029d6   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	284; glcd.c	_latch_3_data &= 0b11111110;
0029d8   9116     bcf     0x16, 0, 0x1     	BCF	__latch_3_data, 0, B
                                           ;	.line	285; glcd.c	LATCH_DATA = _latch_3_data;
0029da   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
0029dc   ff8c
                                           _00229_DS_:
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0029de   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0029e0   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	289; glcd.c	LATCH_DATA = 0x00;
0029e2   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0029e4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0029e6   f000
0029e8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029ea   ffd9
0029ec   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	262; glcd.c	void latched_lcd_power(unsigned char value) {
0029ee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029f0   ffe5
0029f2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029f4   ffd9
0029f6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0029f8   ffe5
0029fa   0e02     movlw   0x2              	MOVLW	0x02
0029fc   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0029fe   f000
                                           ;	.line	263; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002a00   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	264; glcd.c	if (value) {	// set it
002a02   5000     movf    0, 0, 0          	MOVF	r0x00, W
002a04   e005     bz      0x2a10           	BZ	_00220_DS_
002a06   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data |= 0b10000000;
002a08   8f16     bsf     0x16, 0x7, 0x1   	BSF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
002a0a   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002a0c   ff8c
002a0e   d004     bra     0x2a18           	BRA	_00221_DS_
                                           _00220_DS_:
002a10   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	269; glcd.c	_latch_3_data &= 0b01111111;
002a12   9f16     bcf     0x16, 0x7, 0x1   	BCF	__latch_3_data, 7, B
                                           ;	.line	270; glcd.c	LATCH_DATA = _latch_3_data;
002a14   c816     movff   0x816, 0xf8c     	MOVFF	__latch_3_data, _LATD
002a16   ff8c
                                           _00221_DS_:
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002a18   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002a1a   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	274; glcd.c	LATCH_DATA = 0x00;
002a1c   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002a1e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002a20   f000
002a22   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a24   ffd9
002a26   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	242; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
0020d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020d4   ffe5
0020d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020d8   ffd9
0020da   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0020dc   ffe5
0020de   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0020e0   ffe5
0020e2   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0020e4   ffe5
0020e6   0e02     movlw   0x2              	MOVLW	0x02
0020e8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0020ea   f000
0020ec   0e03     movlw   0x3              	MOVLW	0x03
0020ee   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0020f0   f001
                                           ;	.line	247; glcd.c	if (rx & 64) {
0020f2   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
0020f4   d006     bra     0x2102           	BRA	_00203_DS_
                                           ;	.line	248; glcd.c	lcd_selectside(LCD_RIGHT);
0020f6   0e02     movlw   0x2              	MOVLW	0x02
0020f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0020fa   ec57     call    0x26ae, 0        	CALL	_lcd_selectside
0020fc   f013
0020fe   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002100   d005     bra     0x210c           	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	251; glcd.c	lcd_selectside(LCD_LEFT);
002102   0e01     movlw   0x1              	MOVLW	0x01
002104   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002106   ec57     call    0x26ae, 0        	CALL	_lcd_selectside
002108   f013
00210a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	254; glcd.c	lcd_setpage( ry >> 3);		// fast /8
00210c   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
00210e   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002110   0b1f     andlw   0x1f             	ANDLW	0x1f
002112   6e02     movwf   0x2, 0           	MOVWF	r0x02
002114   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002116   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002118   eca3     call    0x2746, 0        	CALL	_lcd_setpage
00211a   f013
00211c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_setyaddr( rx & 0b00111111);
00211e   0e3f     movlw   0x3f             	MOVLW	0x3f
002120   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002122   5000     movf    0, 0, 0          	MOVF	r0x00, W
002124   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002126   ec7f     call    0x26fe, 0        	CALL	_lcd_setyaddr
002128   f013
00212a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	256; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
00212c   ecec     call    0x2dd8, 0        	CALL	_lcd_read
00212e   f016
                                           ;	.line	257; glcd.c	d = lcd_read();				// read again to transfer to pic
002130   ecec     call    0x2dd8, 0        	CALL	_lcd_read
002132   f016
002134   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	258; glcd.c	lcd_setyaddr( rx & 0b00111111); 
002136   5000     movf    0, 0, 0          	MOVF	r0x00, W
002138   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00213a   ec7f     call    0x26fe, 0        	CALL	_lcd_setyaddr
00213c   f013
00213e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	259; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
002140   0e07     movlw   0x7              	MOVLW	0x07
002142   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
002144   0e01     movlw   0x1              	MOVLW	0x01
002146   6e00     movwf   0, 0             	MOVWF	r0x00
002148   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00214a   e005     bz      0x2156           	BZ	_00213_DS_
00214c   6ce8     negf    0xe8, 0          	NEGF	WREG
00214e   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
002150   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
002152   0f01     addlw   0x1              	ADDLW	0x01
002154   e3fd     bnc     0x2150           	BNC	_00214_DS_
                                           _00213_DS_:
002156   5000     movf    0, 0, 0          	MOVF	r0x00, W
002158   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
00215a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00215c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00215e   ecc6     call    0x278c, 0        	CALL	_lcd_write
002160   f013
002162   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002164   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002166   f002
002168   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00216a   f001
00216c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00216e   f000
002170   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002172   ffd9
002174   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	223; glcd.c	unsigned char lcd_read (void) {
002dd8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002dda   ffe5
002ddc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002dde   ffd9
                                           ;	.line	237; glcd.c	lcd_enable();
002de0   ece7     call    0x27ce, 0        	CALL	_lcd_enable
002de2   f013
                                           ;	.line	238; glcd.c	return 0;
002de4   6ae8     clrf    0xe8, 0          	CLRF	WREG
002de6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002de8   ffd9
002dea   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	198; glcd.c	void lcd_selectside(unsigned char sides) {
0026ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026b0   ffe5
0026b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026b4   ffd9
0026b6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0026b8   ffe5
0026ba   0e02     movlw   0x2              	MOVLW	0x02
0026bc   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0026be   f000
                                           ;	.line	201; glcd.c	if (sides & LCD_LEFT) {
0026c0   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
0026c2   d006     bra     0x26d0           	BRA	_00178_DS_
                                           ;	.line	203; glcd.c	latched_lcd_cs1(1);
0026c4   0e01     movlw   0x1              	MOVLW	0x01
0026c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026c8   ec49     call    0x2892, 0        	CALL	_latched_lcd_cs1
0026ca   f014
0026cc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026ce   d005     bra     0x26da           	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	207; glcd.c	latched_lcd_cs1(0);
0026d0   0e00     movlw   0                	MOVLW	0x00
0026d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026d4   ec49     call    0x2892, 0        	CALL	_latched_lcd_cs1
0026d6   f014
0026d8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	210; glcd.c	if (sides & LCD_RIGHT) {
0026da   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
0026dc   d006     bra     0x26ea           	BRA	_00181_DS_
                                           ;	.line	212; glcd.c	latched_lcd_cs2(1);
0026de   0e01     movlw   0x1              	MOVLW	0x01
0026e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026e2   ec66     call    0x28cc, 0        	CALL	_latched_lcd_cs2
0026e4   f014
0026e6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026e8   d005     bra     0x26f4           	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	216; glcd.c	latched_lcd_cs2(0);
0026ea   0e00     movlw   0                	MOVLW	0x00
0026ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026ee   ec66     call    0x28cc, 0        	CALL	_latched_lcd_cs2
0026f0   f014
0026f2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
0026f4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0026f6   f000
0026f8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026fa   ffd9
0026fc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	185; glcd.c	void lcd_write (unsigned char d) {
00278c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00278e   ffe5
002790   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002792   ffd9
002794   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002796   ffe5
002798   0e02     movlw   0x2              	MOVLW	0x02
00279a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00279c   f000
                                           ;	.line	186; glcd.c	lcd_waitbusy();
00279e   ec6a     call    0x2ad4, 0        	CALL	_lcd_waitbusy
0027a0   f015
                                           ;	.line	188; glcd.c	latched_lcd_di(1);
0027a2   0e01     movlw   0x1              	MOVLW	0x01
0027a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027a6   ecbd     call    0x297a, 0        	CALL	_latched_lcd_di
0027a8   f014
0027aa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	190; glcd.c	latched_lcd_rw(0);
0027ac   0e00     movlw   0                	MOVLW	0x00
0027ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027b0   eca0     call    0x2940, 0        	CALL	_latched_lcd_rw
0027b2   f014
0027b4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	latched_lcd_data(d);
0027b6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0027b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027ba   ec40     call    0x2c80, 0        	CALL	_latched_lcd_data
0027bc   f016
0027be   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	194; glcd.c	lcd_enable();
0027c0   ece7     call    0x27ce, 0        	CALL	_lcd_enable
0027c2   f013
0027c4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0027c6   f000
0027c8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027ca   ffd9
0027cc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
002ad4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ad6   ffe5
002ad8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ada   ffd9
002adc   0000     nop                      	nop 
002ade   0000     nop                      	nop 
002ae0   0000     nop                      	nop 
002ae2   0000     nop                      	nop 
002ae4   0000     nop                      	nop 
002ae6   0000     nop                      	nop 
002ae8   0000     nop                      	nop 
002aea   0000     nop                      	nop 
                                           ;	.line	180; glcd.c	sleep_ms(10);
002aec   0e00     movlw   0                	MOVLW	0x00
002aee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af0   0e00     movlw   0                	MOVLW	0x00
002af2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af4   0e00     movlw   0                	MOVLW	0x00
002af6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002af8   0e0a     movlw   0xa              	MOVLW	0x0a
002afa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002afc   ec47     call    0x168e, 0        	CALL	_sleep_ms
002afe   f00b
002b00   0e04     movlw   0x4              	MOVLW	0x04
002b02   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002b04   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b06   ffd9
002b08   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
0026fe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002700   ffe5
002702   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002704   ffd9
002706   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002708   ffe5
00270a   0e02     movlw   0x2              	MOVLW	0x02
00270c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00270e   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
002710   ec6a     call    0x2ad4, 0        	CALL	_lcd_waitbusy
002712   f015
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
002714   0e00     movlw   0                	MOVLW	0x00
002716   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002718   ecbd     call    0x297a, 0        	CALL	_latched_lcd_di
00271a   f014
00271c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
00271e   0e00     movlw   0                	MOVLW	0x00
002720   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002722   eca0     call    0x2940, 0        	CALL	_latched_lcd_rw
002724   f014
002726   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
002728   0e3f     movlw   0x3f             	MOVLW	0x3f
00272a   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
00272c   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
00272e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002730   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002732   ec40     call    0x2c80, 0        	CALL	_latched_lcd_data
002734   f016
002736   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
002738   ece7     call    0x27ce, 0        	CALL	_lcd_enable
00273a   f013
00273c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00273e   f000
002740   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002742   ffd9
002744   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
002746   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002748   ffe5
00274a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00274c   ffd9
00274e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002750   ffe5
002752   0e02     movlw   0x2              	MOVLW	0x02
002754   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002756   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
002758   ec6a     call    0x2ad4, 0        	CALL	_lcd_waitbusy
00275a   f015
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
00275c   0e00     movlw   0                	MOVLW	0x00
00275e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002760   ecbd     call    0x297a, 0        	CALL	_latched_lcd_di
002762   f014
002764   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
002766   0e00     movlw   0                	MOVLW	0x00
002768   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00276a   eca0     call    0x2940, 0        	CALL	_latched_lcd_rw
00276c   f014
00276e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
002770   0eb8     movlw   0xb8             	MOVLW	0xb8
002772   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
002774   5000     movf    0, 0, 0          	MOVF	r0x00, W
002776   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002778   ec40     call    0x2c80, 0        	CALL	_latched_lcd_data
00277a   f016
00277c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
00277e   ece7     call    0x27ce, 0        	CALL	_lcd_enable
002780   f013
002782   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002784   f000
002786   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002788   ffd9
00278a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
0022b4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022b6   ffe5
0022b8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022ba   ffd9
0022bc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0022be   ffe5
0022c0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0022c2   ffe5
0022c4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0022c6   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
0022c8   0e03     movlw   0x3              	MOVLW	0x03
0022ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022cc   ec57     call    0x26ae, 0        	CALL	_lcd_selectside
0022ce   f013
0022d0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
0022d2   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
0022d4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0022d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022d8   eca3     call    0x2746, 0        	CALL	_lcd_setpage
0022da   f013
0022dc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
0022de   0e00     movlw   0                	MOVLW	0x00
0022e0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022e2   ec7f     call    0x26fe, 0        	CALL	_lcd_setyaddr
0022e4   f013
0022e6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
0022e8   0e00     movlw   0                	MOVLW	0x00
0022ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022ec   ec40     call    0x2c80, 0        	CALL	_latched_lcd_data
0022ee   f016
0022f0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
0022f2   0e00     movlw   0                	MOVLW	0x00
0022f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0022f6   eca0     call    0x2940, 0        	CALL	_latched_lcd_rw
0022f8   f014
0022fa   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
0022fc   0e01     movlw   0x1              	MOVLW	0x01
0022fe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002300   ecbd     call    0x297a, 0        	CALL	_latched_lcd_di
002302   f014
002304   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002306   0e40     movlw   0x40             	MOVLW	0x40
002308   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
00230a   ece7     call    0x27ce, 0        	CALL	_lcd_enable
00230c   f013
00230e   0000     nop                      	nop 
002310   0000     nop                      	nop 
002312   0000     nop                      	nop 
002314   0000     nop                      	nop 
002316   0000     nop                      	nop 
002318   0000     nop                      	nop 
00231a   0000     nop                      	nop 
00231c   0000     nop                      	nop 
00231e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002320   6e02     movwf   0x2, 0           	MOVWF	r0x02
002322   0402     decf    0x2, 0, 0        	DECF	r0x02, W
002324   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002326   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002328   e1f0     bnz     0x230a           	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
00232a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00232c   0e08     movlw   0x8              	MOVLW	0x08
00232e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
002330   e3d1     bnc     0x22d4           	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
002332   0e01     movlw   0x1              	MOVLW	0x01
002334   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002336   ec57     call    0x26ae, 0        	CALL	_lcd_selectside
002338   f013
00233a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00233c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00233e   f002
002340   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002342   f001
002344   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002346   f000
002348   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00234a   ffd9
00234c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
00255a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00255c   ffe5
00255e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002560   ffd9
002562   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002564   ffe5
002566   0e02     movlw   0x2              	MOVLW	0x02
002568   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00256a   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(1);
00256c   0e01     movlw   0x1              	MOVLW	0x01
00256e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002570   ec49     call    0x2892, 0        	CALL	_latched_lcd_cs1
002572   f014
002574   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(1);
002576   0e01     movlw   0x1              	MOVLW	0x01
002578   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257a   ec66     call    0x28cc, 0        	CALL	_latched_lcd_cs2
00257c   f014
00257e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
002580   0e00     movlw   0                	MOVLW	0x00
002582   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002584   eca0     call    0x2940, 0        	CALL	_latched_lcd_rw
002586   f014
002588   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
00258a   0e00     movlw   0                	MOVLW	0x00
00258c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00258e   ecbd     call    0x297a, 0        	CALL	_latched_lcd_di
002590   f014
002592   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
002594   0e01     movlw   0x1              	MOVLW	0x01
002596   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002598   0e3e     movlw   0x3e             	MOVLW	0x3e
00259a   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
00259c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00259e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a0   ec40     call    0x2c80, 0        	CALL	_latched_lcd_data
0025a2   f016
0025a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
0025a6   ece7     call    0x27ce, 0        	CALL	_lcd_enable
0025a8   f013
0025aa   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0025ac   f000
0025ae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025b0   ffd9
0025b2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
00265c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00265e   ffe5
002660   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002662   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
002664   0e00     movlw   0                	MOVLW	0x00
002666   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002668   0e00     movlw   0                	MOVLW	0x00
00266a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00266c   0e00     movlw   0                	MOVLW	0x00
00266e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002670   0e01     movlw   0x1              	MOVLW	0x01
002672   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002674   ec47     call    0x168e, 0        	CALL	_sleep_ms
002676   f00b
002678   0e04     movlw   0x4              	MOVLW	0x04
00267a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(0);
00267c   0e00     movlw   0                	MOVLW	0x00
00267e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002680   ec83     call    0x2906, 0        	CALL	_latched_lcd_rst
002682   f014
002684   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
002686   0e00     movlw   0                	MOVLW	0x00
002688   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00268a   0e00     movlw   0                	MOVLW	0x00
00268c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00268e   0e00     movlw   0                	MOVLW	0x00
002690   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002692   0e01     movlw   0x1              	MOVLW	0x01
002694   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002696   ec47     call    0x168e, 0        	CALL	_sleep_ms
002698   f00b
00269a   0e04     movlw   0x4              	MOVLW	0x04
00269c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(1);
00269e   0e01     movlw   0x1              	MOVLW	0x01
0026a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026a2   ec83     call    0x2906, 0        	CALL	_latched_lcd_rst
0026a4   f014
0026a6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0026a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026aa   ffd9
0026ac   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
002ca8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002caa   ffe5
002cac   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cae   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
002cb0   0e00     movlw   0                	MOVLW	0x00
002cb2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cb4   0e00     movlw   0                	MOVLW	0x00
002cb6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cb8   0e00     movlw   0                	MOVLW	0x00
002cba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cbc   0e0a     movlw   0xa              	MOVLW	0x0a
002cbe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002cc0   ec47     call    0x168e, 0        	CALL	_sleep_ms
002cc2   f00b
002cc4   0e04     movlw   0x4              	MOVLW	0x04
002cc6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
002cc8   0e01     movlw   0x1              	MOVLW	0x01
002cca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ccc   ffd9
002cce   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
0027ce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027d0   ffe5
0027d2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027d4   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
0027d6   0e01     movlw   0x1              	MOVLW	0x01
0027d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027da   ecda     call    0x29b4, 0        	CALL	_latched_lcd_enable
0027dc   f014
0027de   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027e0   0000     nop                      	nop 
0027e2   0000     nop                      	nop 
0027e4   0000     nop                      	nop 
0027e6   0000     nop                      	nop 
0027e8   0000     nop                      	nop 
0027ea   0000     nop                      	nop 
0027ec   0000     nop                      	nop 
0027ee   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
0027f0   0e00     movlw   0                	MOVLW	0x00
0027f2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0027f4   ecda     call    0x29b4, 0        	CALL	_latched_lcd_enable
0027f6   f014
0027f8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0027fa   0000     nop                      	nop 
0027fc   0000     nop                      	nop 
0027fe   0000     nop                      	nop 
002800   0000     nop                      	nop 
002802   0000     nop                      	nop 
002804   0000     nop                      	nop 
002806   0000     nop                      	nop 
002808   0000     nop                      	nop 
00280a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00280c   ffd9
00280e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
002810   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002812   ffe5
002814   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002816   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
002818   0e01     movlw   0x1              	MOVLW	0x01
00281a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00281c   ecf7     call    0x29ee, 0        	CALL	_latched_lcd_power
00281e   f014
002820   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002822   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
002824   6b16     clrf    0x16, 0x1        	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(0);
002826   0e00     movlw   0                	MOVLW	0x00
002828   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00282a   ec49     call    0x2892, 0        	CALL	_latched_lcd_cs1
00282c   f014
00282e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(0);
002830   0e00     movlw   0                	MOVLW	0x00
002832   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002834   ec66     call    0x28cc, 0        	CALL	_latched_lcd_cs2
002836   f014
002838   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
00283a   ec2e     call    0x265c, 0        	CALL	_lcd_reset
00283c   f013
                                           ;	.line	38; glcd.c	lcd_screenon(1);
00283e   0e01     movlw   0x1              	MOVLW	0x01
002840   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002842   ecad     call    0x255a, 0        	CALL	_lcd_screenon
002844   f012
002846   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
002848   ec5a     call    0x22b4, 0        	CALL	_lcd_cls
00284a   f011
00284c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00284e   ffd9
002850   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1470 (0x05be) bytes ( 1.12%)
                                           ;           	  735 (0x02df) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
