gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 12-18-2012  04:56:14
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.0.0 #6037 (Jul 16 2012) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 18 04:56:14 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	__config 0x300001, 0x01
                                           	__config 0x300002, 0x1e
                                           	__config 0x300003, 0x00
                                           	__config 0x300005, 0x01
                                           	__config 0x300006, 0x81
                                           	__config 0x300008, 0x0f
                                           	__config 0x300009, 0xc0
                                           	__config 0x30000a, 0x0f
                                           	__config 0x30000b, 0xe0
                                           	__config 0x30000c, 0x0f
                                           	__config 0x30000d, 0x40
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _lcd_buf
                                           	global _chimney_temp
                                           	global _smoke_temp
                                           	global _boiler_temp
                                           	global _i
                                           	global _sleep_ms
                                           	global _my_usart_open
                                           	global _read_EEPROM
                                           	global _write_EEPROM
                                           	global _timer_2
                                           	global _last_button
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _adc_open
                                           	extern _usart_open
                                           	extern _usart_drdy
                                           	extern _usart_getc
                                           	extern _usart_putc
                                           	extern _lcd_init
                                           	extern _lcd_print
                                           	extern _button_released
                                           	extern __mullong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _boiler_temp	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _smoke_temp	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _chimney_temp	res	2
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _lcd_buf	res	22
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _timer_2	res	4
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _last_button	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_timer_control	code	0X000008
                                           ivec_0x1_timer_control:
000008   ef9c     goto	0xf38               	GOTO	_timer_control
00000a   f007
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	25; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000b5c   50d3     movf	0xd3, 0, 0          	MOVF	_OSCCONbits, W
000b5e   0bfc     andlw	0xfc               	ANDLW	0xfc
000b60   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCONbits
                                           ;	.line	26; pillefyrsstyring.c	OSCCONbits.IRCF = 0x6;	// 4 MHz
000b62   50d3     movf	0xd3, 0, 0          	MOVF	_OSCCONbits, W
000b64   0b8f     andlw	0x8f               	ANDLW	0x8f
000b66   0960     iorlw	0x60               	IORLW	0x60
000b68   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCONbits
000b6a   0100     movlb	0                  	BANKSEL	_timer_2
                                           ;	.line	28; pillefyrsstyring.c	timer_2 = 0;
000b6c   6bac     clrf	0xac, 0x1           	CLRF	_timer_2, B
000b6e   0100     movlb	0                  	BANKSEL	(_timer_2 + 1)
000b70   6bad     clrf	0xad, 0x1           	CLRF	(_timer_2 + 1), B
000b72   0100     movlb	0                  	BANKSEL	(_timer_2 + 2)
000b74   6bae     clrf	0xae, 0x1           	CLRF	(_timer_2 + 2), B
000b76   0100     movlb	0                  	BANKSEL	(_timer_2 + 3)
000b78   6baf     clrf	0xaf, 0x1           	CLRF	(_timer_2 + 3), B
000b7a   0100     movlb	0                  	BANKSEL	_boiler_temp
                                           ;	.line	29; pillefyrsstyring.c	boiler_temp = 0;
000b7c   6bc6     clrf	0xc6, 0x1           	CLRF	_boiler_temp, B
000b7e   0100     movlb	0                  	BANKSEL	(_boiler_temp + 1)
000b80   6bc7     clrf	0xc7, 0x1           	CLRF	(_boiler_temp + 1), B
000b82   0100     movlb	0                  	BANKSEL	_smoke_temp
                                           ;	.line	30; pillefyrsstyring.c	smoke_temp = 0;
000b84   6bc8     clrf	0xc8, 0x1           	CLRF	_smoke_temp, B
000b86   0100     movlb	0                  	BANKSEL	(_smoke_temp + 1)
000b88   6bc9     clrf	0xc9, 0x1           	CLRF	(_smoke_temp + 1), B
000b8a   0100     movlb	0                  	BANKSEL	_chimney_temp
                                           ;	.line	31; pillefyrsstyring.c	chimney_temp = 0;
000b8c   6bca     clrf	0xca, 0x1           	CLRF	_chimney_temp, B
000b8e   0100     movlb	0                  	BANKSEL	(_chimney_temp + 1)
000b90   6bcb     clrf	0xcb, 0x1           	CLRF	(_chimney_temp + 1), B
000b92   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	33; pillefyrsstyring.c	last_button = NONE;
000b94   6bcc     clrf	0xcc, 0x1           	CLRF	_last_button, B
                                           ;	.line	36; pillefyrsstyring.c	EXT_FEEDER_L1_TRIS = 0;	// output
000b96   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	37; pillefyrsstyring.c	EXT_FEEDER_L1 = 0;		// off
000b98   9081     bcf	0x81, 0, 0           	BCF	_PORTBbits, 0
                                           ;	.line	39; pillefyrsstyring.c	FAN_L2_TRIS = 0;		// output
000b9a   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	40; pillefyrsstyring.c	FAN_L2 = 0;				// off
000b9c   9281     bcf	0x81, 0x1, 0         	BCF	_PORTBbits, 1
                                           ;	.line	42; pillefyrsstyring.c	INT_FEEDER_L3_TRIS = 0;	// output
000b9e   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           ;	.line	43; pillefyrsstyring.c	INT_FEEDER_L3 = 0;		// off
000ba0   9481     bcf	0x81, 0x2, 0         	BCF	_PORTBbits, 2
                                           ;	.line	45; pillefyrsstyring.c	HEATER_T3_L4_TRIS = 0;		// output
000ba2   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	46; pillefyrsstyring.c	HEATER_T3_L4 = 0;				// off
000ba4   9681     bcf	0x81, 0x3, 0         	BCF	_PORTBbits, 3
                                           ;	.line	48; pillefyrsstyring.c	B_UP_TRIS = 1;			// input
000ba6   8a93     bsf	0x93, 0x5, 0         	BSF	_TRISBbits, 5
                                           ;	.line	49; pillefyrsstyring.c	B_DOWN_TRIS = 1;		// input
000ba8   8e93     bsf	0x93, 0x7, 0         	BSF	_TRISBbits, 7
                                           ;	.line	50; pillefyrsstyring.c	B_MENU_TRIS = 1;		// input
000baa   8c93     bsf	0x93, 0x6, 0         	BSF	_TRISBbits, 6
                                           ;	.line	52; pillefyrsstyring.c	BOILER_TEMP_TRIS = 1;	// input
000bac   8680     bsf	0x80, 0x3, 0         	BSF	_PORTAbits, 3
                                           ;	.line	53; pillefyrsstyring.c	SMOKE_TEMP_TRIS	= 1;	// input
000bae   8880     bsf	0x80, 0x4, 0         	BSF	_PORTAbits, 4
                                           ;	.line	54; pillefyrsstyring.c	CHIMNEY_TEMP_TRIS = 1; 	// input
000bb0   8a80     bsf	0x80, 0x5, 0         	BSF	_PORTAbits, 5
                                           ;	.line	57; pillefyrsstyring.c	adc_open(4, ADC_FOSC_64, ADC_CFG_5A, ADC_FRM_RJUST | ADC_INT_OFF);
000bb2   0e80     movlw	0x80               	MOVLW	0x80
000bb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb6   0e0a     movlw	0xa                	MOVLW	0x0a
000bb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bba   0e06     movlw	0x6                	MOVLW	0x06
000bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bbe   0e04     movlw	0x4                	MOVLW	0x04
000bc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc2   eca5     call	0x134a, 0           	CALL	_adc_open
000bc4   f009
000bc6   0e04     movlw	0x4                	MOVLW	0x04
000bc8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	60; pillefyrsstyring.c	T2CONbits.T2CKPS0 = 1;
000bca   80ca     bsf	0xca, 0, 0           	BSF	_T2CONbits, 0
                                           ;	.line	61; pillefyrsstyring.c	T2CONbits.T2CKPS1 = 0;
000bcc   92ca     bcf	0xca, 0x1, 0         	BCF	_T2CONbits, 1
                                           ;	.line	62; pillefyrsstyring.c	T2CONbits.TOUTPS0 = 1;
000bce   86ca     bsf	0xca, 0x3, 0         	BSF	_T2CONbits, 3
                                           ;	.line	63; pillefyrsstyring.c	T2CONbits.TOUTPS1 = 0;
000bd0   98ca     bcf	0xca, 0x4, 0         	BCF	_T2CONbits, 4
                                           ;	.line	64; pillefyrsstyring.c	T2CONbits.TOUTPS2 = 0;
000bd2   9aca     bcf	0xca, 0x5, 0         	BCF	_T2CONbits, 5
                                           ;	.line	65; pillefyrsstyring.c	T2CONbits.TOUTPS3 = 1;
000bd4   8cca     bsf	0xca, 0x6, 0         	BSF	_T2CONbits, 6
                                           ;	.line	66; pillefyrsstyring.c	IPR1bits.TMR2IP = 1;		// high priority
000bd6   829f     bsf	0x9f, 0x1, 0         	BSF	_IPR1bits, 1
                                           ;	.line	67; pillefyrsstyring.c	PIR1bits.TMR2IF = 1;
000bd8   829e     bsf	0x9e, 0x1, 0         	BSF	_PIR1bits, 1
                                           ;	.line	68; pillefyrsstyring.c	T2CONbits.TMR2ON = 1;
000bda   84ca     bsf	0xca, 0x2, 0         	BSF	_T2CONbits, 2
                                           ;	.line	69; pillefyrsstyring.c	PIE1bits.TMR2IE = 1;
000bdc   829d     bsf	0x9d, 0x1, 0         	BSF	_PIE1bits, 1
                                           ;	.line	72; pillefyrsstyring.c	T3CONbits.RD16 = 1;
000bde   8eb1     bsf	0xb1, 0x7, 0         	BSF	_T3CONbits, 7
                                           ;	.line	73; pillefyrsstyring.c	T3CONbits.TMR3CS = 0;	// internal clock source
000be0   92b1     bcf	0xb1, 0x1, 0         	BCF	_T3CONbits, 1
                                           ;	.line	74; pillefyrsstyring.c	T3CONbits.T3CKPS0 = 1;
000be2   88b1     bsf	0xb1, 0x4, 0         	BSF	_T3CONbits, 4
                                           ;	.line	75; pillefyrsstyring.c	T3CONbits.T3CKPS0 = 1;
000be4   88b1     bsf	0xb1, 0x4, 0         	BSF	_T3CONbits, 4
                                           ;	.line	76; pillefyrsstyring.c	IPR2bits.TMR3IP = 0;		// low priority
000be6   92a2     bcf	0xa2, 0x1, 0         	BCF	_IPR2bits, 1
                                           ;	.line	77; pillefyrsstyring.c	T3CONbits.TMR3ON = 1;
000be8   80b1     bsf	0xb1, 0, 0           	BSF	_T3CONbits, 0
                                           ;	.line	78; pillefyrsstyring.c	PIE2bits.TMR3IE = 1;
000bea   82a0     bsf	0xa0, 0x1, 0         	BSF	_PIE2bits, 1
                                           ;	.line	79; pillefyrsstyring.c	PIR2bits.TMR3IF = 1;
000bec   82a1     bsf	0xa1, 0x1, 0         	BSF	_PIR2bits, 1
                                           ;	.line	81; pillefyrsstyring.c	INTCONbits.PEIE = 1;
000bee   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	82; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
000bf0   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	90; pillefyrsstyring.c	12     // 19200 kbps @ 4 MHz
000bf2   0e00     movlw	0                  	MOVLW	0x00
000bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bf6   0e0c     movlw	0xc                	MOVLW	0x0c
000bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bfa   0e7c     movlw	0x7c               	MOVLW	0x7c
000bfc   ec62     call	0x12c4, 0           	CALL	_usart_open
000bfe   f009
000c00   0e02     movlw	0x2                	MOVLW	0x02
000c02   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	103; pillefyrsstyring.c	lcd_init();
000c04   ec0d     call	0x161a, 0           	CALL	_lcd_init
000c06   f00b
                                           ;	.line	104; pillefyrsstyring.c	lcd_print("OpenStoker starting...", 0, NON_INVERTED); // starting...");
000c08   0e00     movlw	0                  	MOVLW	0x00
000c0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0c   0e00     movlw	0                  	MOVLW	0x00
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   0e10     movlw	0x10               	MOVLW	HIGH(__str_0)
000c16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c18   0e44     movlw	0x44               	MOVLW	LOW(__str_0)
000c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1c   ec58     call	0x6b0, 0            	CALL	_lcd_print
000c1e   f003
000c20   0e05     movlw	0x5                	MOVLW	0x05
000c22   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	105; pillefyrsstyring.c	sleep_ms(3000);
000c24   0e00     movlw	0                  	MOVLW	0x00
000c26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c28   0e00     movlw	0                  	MOVLW	0x00
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e0b     movlw	0xb                	MOVLW	0x0b
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   0eb8     movlw	0xb8               	MOVLW	0xb8
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   ec5c     call	0xcb8, 0            	CALL	_sleep_ms
000c36   f006
000c38   0e04     movlw	0x4                	MOVLW	0x04
000c3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00133_DS_:
                                           ;	.line	108; pillefyrsstyring.c	if (!B_UP) {					// if up button pressed...
000c3c   ba81     btfsc	0x81, 0x5, 0       	BTFSC	_PORTBbits, 5
000c3e   d006     bra	0xc4c                	BRA	_00112_DS_
000c40   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	109; pillefyrsstyring.c	if (!(last_button & UP)) {	// and if up button state changed
000c42   b1cc     btfsc	0xcc, 0, 0x1       	BTFSC	_last_button, 0, B
000c44   d00f     bra	0xc64                	BRA	_00113_DS_
000c46   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	110; pillefyrsstyring.c	last_button |= UP;		// change state for button to pressed
000c48   81cc     bsf	0xcc, 0, 0x1         	BSF	_last_button, 0, B
000c4a   d00c     bra	0xc64                	BRA	_00113_DS_
                                           _00112_DS_:
                                           ;	.line	115; pillefyrsstyring.c	else if (B_UP) {				// if up button released...
000c4c   aa81     btfss	0x81, 0x5, 0       	BTFSS	_PORTBbits, 5
000c4e   d00a     bra	0xc64                	BRA	_00113_DS_
000c50   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	116; pillefyrsstyring.c	if (last_button & UP) {		// and if up button state changed
000c52   a1cc     btfss	0xcc, 0, 0x1       	BTFSS	_last_button, 0, B
000c54   d007     bra	0xc64                	BRA	_00113_DS_
000c56   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	117; pillefyrsstyring.c	last_button &= ~UP;		// change state for button to released
000c58   91cc     bcf	0xcc, 0, 0x1         	BCF	_last_button, 0, B
                                           ;	.line	118; pillefyrsstyring.c	button_released(UP);
000c5a   0e01     movlw	0x1                	MOVLW	0x01
000c5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c5e   ec7d     call	0x14fa, 0           	CALL	_button_released
000c60   f00a
000c62   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00113_DS_:
                                           ;	.line	122; pillefyrsstyring.c	if (!B_MENU) {					// if menu button pressed...
000c64   bc81     btfsc	0x81, 0x6, 0       	BTFSC	_PORTBbits, 6
000c66   d006     bra	0xc74                	BRA	_00121_DS_
000c68   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	123; pillefyrsstyring.c	if (!(last_button & MENU)) {// and if menu button state changed
000c6a   b3cc     btfsc	0xcc, 0x1, 0x1     	BTFSC	_last_button, 1, B
000c6c   d00f     bra	0xc8c                	BRA	_00122_DS_
000c6e   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	124; pillefyrsstyring.c	last_button |= MENU;	// change state for button to pressed
000c70   83cc     bsf	0xcc, 0x1, 0x1       	BSF	_last_button, 1, B
000c72   d00c     bra	0xc8c                	BRA	_00122_DS_
                                           _00121_DS_:
                                           ;	.line	129; pillefyrsstyring.c	else if (B_MENU) {				// if menu button released...
000c74   ac81     btfss	0x81, 0x6, 0       	BTFSS	_PORTBbits, 6
000c76   d00a     bra	0xc8c                	BRA	_00122_DS_
000c78   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	130; pillefyrsstyring.c	if (last_button & MENU) {	// and if menu button state changed
000c7a   a3cc     btfss	0xcc, 0x1, 0x1     	BTFSS	_last_button, 1, B
000c7c   d007     bra	0xc8c                	BRA	_00122_DS_
000c7e   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	131; pillefyrsstyring.c	last_button &= ~MENU;	// change state for button to released
000c80   93cc     bcf	0xcc, 0x1, 0x1       	BCF	_last_button, 1, B
                                           ;	.line	132; pillefyrsstyring.c	button_released(MENU);
000c82   0e02     movlw	0x2                	MOVLW	0x02
000c84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c86   ec7d     call	0x14fa, 0           	CALL	_button_released
000c88   f00a
000c8a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00122_DS_:
                                           ;	.line	136; pillefyrsstyring.c	if (!B_DOWN) {					// if down button pressed...
000c8c   be81     btfsc	0x81, 0x7, 0       	BTFSC	_PORTBbits, 7
000c8e   d006     bra	0xc9c                	BRA	_00130_DS_
000c90   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	137; pillefyrsstyring.c	if (!(last_button & DOWN)) {// and if down button state changed
000c92   b5cc     btfsc	0xcc, 0x2, 0x1     	BTFSC	_last_button, 2, B
000c94   d7d3     bra	0xc3c                	BRA	_00133_DS_
000c96   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	138; pillefyrsstyring.c	last_button |= DOWN;	// change state for button to pressed
000c98   85cc     bsf	0xcc, 0x2, 0x1       	BSF	_last_button, 2, B
000c9a   d7d0     bra	0xc3c                	BRA	_00133_DS_
                                           _00130_DS_:
                                           ;	.line	143; pillefyrsstyring.c	else if (B_DOWN) {				// if up button released...
000c9c   ae81     btfss	0x81, 0x7, 0       	BTFSS	_PORTBbits, 7
000c9e   d7ce     bra	0xc3c                	BRA	_00133_DS_
000ca0   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	144; pillefyrsstyring.c	if (last_button & DOWN) {	// and if up button state changed
000ca2   a5cc     btfss	0xcc, 0x2, 0x1     	BTFSS	_last_button, 2, B
000ca4   d7cb     bra	0xc3c                	BRA	_00133_DS_
000ca6   0100     movlb	0                  	BANKSEL	_last_button
                                           ;	.line	145; pillefyrsstyring.c	last_button &= ~DOWN;	// change state for button to released
000ca8   95cc     bcf	0xcc, 0x2, 0x1       	BCF	_last_button, 2, B
                                           ;	.line	146; pillefyrsstyring.c	button_released(DOWN);
000caa   0e04     movlw	0x4                	MOVLW	0x04
000cac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cae   ec7d     call	0x14fa, 0           	CALL	_button_released
000cb0   f00a
000cb2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cb4   d7c3     bra	0xc3c                	BRA	_00133_DS_
000cb6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__write_EEPROM	code
                                           _write_EEPROM:
                                           ;	.line	262; pillefyrsstyring.c	void write_EEPROM(unsigned char address, unsigned char d) {
0014a2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014a4   ffe5
0014a6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0014a8   ffd9
0014aa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0014ac   ffe5
0014ae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0014b0   ffe5
0014b2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0014b4   ffe5
0014b6   0e02     movlw	0x2                	MOVLW	0x02
0014b8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0014ba   f000
0014bc   0e03     movlw	0x3                	MOVLW	0x03
0014be   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0014c0   f001
                                           ;	.line	264; pillefyrsstyring.c	save_int = INTCON;					//save interrupt status
0014c2   cff2     movff	0xff2, 0x2         	MOVFF	_INTCON, r0x02
0014c4   f002
                                           ;	.line	265; pillefyrsstyring.c	EECON1 = 0;									//ensure CFGS=0 and EEPGD=0
0014c6   6aa6     clrf	0xa6, 0             	CLRF	_EECON1
                                           ;	.line	266; pillefyrsstyring.c	EECON1bits.WREN = 1;				//enable write to EEPROM
0014c8   84a6     bsf	0xa6, 0x2, 0         	BSF	_EECON1bits, 2
                                           ;	.line	267; pillefyrsstyring.c	EEADR = address;						//setup Address
0014ca   c000     movff	0, 0xfa9           	MOVFF	r0x00, _EEADR
0014cc   ffa9
                                           ;	.line	268; pillefyrsstyring.c	EEDATA = d;									//and data
0014ce   c001     movff	0x1, 0xfa8         	MOVFF	r0x01, _EEDATA
0014d0   ffa8
                                           ;	.line	269; pillefyrsstyring.c	INTCONbits.GIE=0;						//No interrupts
0014d2   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	270; pillefyrsstyring.c	EECON2 = 0x55;							//required sequence #1
0014d4   0e55     movlw	0x55               	MOVLW	0x55
0014d6   6ea7     movwf	0xa7, 0            	MOVWF	_EECON2
                                           ;	.line	271; pillefyrsstyring.c	EECON2 = 0xaa;							//#2
0014d8   0eaa     movlw	0xaa               	MOVLW	0xaa
0014da   6ea7     movwf	0xa7, 0            	MOVWF	_EECON2
                                           ;	.line	272; pillefyrsstyring.c	EECON1bits.WR = 1;					//#3 = actual write
0014dc   82a6     bsf	0xa6, 0x1, 0         	BSF	_EECON1bits, 1
                                           ;	.line	273; pillefyrsstyring.c	INTCON = save_int;					//restore interrupts
0014de   c002     movff	0x2, 0xff2         	MOVFF	r0x02, _INTCON
0014e0   fff2
                                           _00209_DS_:
                                           ;	.line	274; pillefyrsstyring.c	while(!PIR2bits.EEIF) {
0014e2   a8a1     btfss	0xa1, 0x4, 0       	BTFSS	_PIR2bits, 4
0014e4   d7fe     bra	0x14e2               	BRA	_00209_DS_
                                           ;	.line	277; pillefyrsstyring.c	EECON1bits.WREN = 0;				//disable write to EEPROM
0014e6   94a6     bcf	0xa6, 0x2, 0         	BCF	_EECON1bits, 2
0014e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0014ea   f002
0014ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0014ee   f001
0014f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0014f2   f000
0014f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014f6   ffd9
0014f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__read_EEPROM	code
                                           _read_EEPROM:
                                           ;	.line	255; pillefyrsstyring.c	unsigned char read_EEPROM(unsigned char address) {
00172a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00172c   ffe5
00172e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001730   ffd9
001732   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001734   ffe5
001736   0e02     movlw	0x2                	MOVLW	0x02
001738   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00173a   f000
                                           ;	.line	256; pillefyrsstyring.c	EECON1 = 0;									//ensure CFGS = 0 and EEPGD = 0 
00173c   6aa6     clrf	0xa6, 0             	CLRF	_EECON1
                                           ;	.line	257; pillefyrsstyring.c	EEADR = address;
00173e   c000     movff	0, 0xfa9           	MOVFF	r0x00, _EEADR
001740   ffa9
                                           ;	.line	258; pillefyrsstyring.c	EECON1bits.RD = 1;
001742   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
                                           ;	.line	259; pillefyrsstyring.c	return(EEDATA);
001744   50a8     movf	0xa8, 0, 0          	MOVF	_EEDATA, W
001746   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001748   f000
00174a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00174c   ffd9
00174e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	228; pillefyrsstyring.c	void my_usart_open() {
001776   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001778   ffe5
00177a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00177c   ffd9
                                           ;	.line	229; pillefyrsstyring.c	SPBRG = 32; // 20MHz => 9600 baud (BRGH = 0)
00177e   0e20     movlw	0x20               	MOVLW	0x20
001780   6eaf     movwf	0xaf, 0            	MOVWF	_SPBRG
                                           ;	.line	230; pillefyrsstyring.c	TXSTAbits.BRGH = 0; // (0 = low speed)
001782   94ac     bcf	0xac, 0x2, 0         	BCF	_TXSTAbits, 2
                                           ;	.line	231; pillefyrsstyring.c	TXSTAbits.SYNC = 0; // (0 = asynchronous)
001784   98ac     bcf	0xac, 0x4, 0         	BCF	_TXSTAbits, 4
                                           ;	.line	234; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
001786   8eab     bsf	0xab, 0x7, 0         	BSF	_RCSTAbits, 7
                                           ;	.line	237; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
001788   989d     bcf	0x9d, 0x4, 0         	BCF	_PIE1bits, 4
                                           ;	.line	240; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
00178a   8a9d     bsf	0x9d, 0x5, 0         	BSF	_PIE1bits, 5
                                           ;	.line	243; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
00178c   9cac     bcf	0xac, 0x6, 0         	BCF	_TXSTAbits, 6
                                           ;	.line	246; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
00178e   9cab     bcf	0xab, 0x6, 0         	BCF	_RCSTAbits, 6
                                           ;	.line	249; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
001790   88ab     bsf	0xab, 0x4, 0         	BSF	_RCSTAbits, 4
                                           ;	.line	252; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
001792   8aac     bsf	0xac, 0x5, 0         	BSF	_TXSTAbits, 5
001794   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001796   ffd9
001798   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	218; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
000cb8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000cba   ffe5
000cbc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000cbe   ffd9
000cc0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000cc2   ffe5
000cc4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000cc6   ffe5
000cc8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000cca   ffe5
000ccc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000cce   ffe5
000cd0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000cd2   ffe5
000cd4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000cd6   ffe5
000cd8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000cda   ffe5
000cdc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000cde   ffe5
000ce0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000ce2   ffe5
000ce4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000ce6   ffe5
000ce8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000cea   ffe5
000cec   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000cee   ffe5
000cf0   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000cf2   ffe5
000cf4   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000cf6   ffe5
000cf8   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000cfa   ffe5
000cfc   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000cfe   ffe5
000d00   0e02     movlw	0x2                	MOVLW	0x02
000d02   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d04   f000
000d06   0e03     movlw	0x3                	MOVLW	0x03
000d08   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000d0a   f001
000d0c   0e04     movlw	0x4                	MOVLW	0x04
000d0e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000d10   f002
000d12   0e05     movlw	0x5                	MOVLW	0x05
000d14   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000d16   f003
                                           ;	.line	220; pillefyrsstyring.c	start_timer_2 = timer_2;	
000d18   c0ac     movff	0xac, 0x4          	MOVFF	_timer_2, r0x04
000d1a   f004
000d1c   c0ad     movff	0xad, 0x5          	MOVFF	(_timer_2 + 1), r0x05
000d1e   f005
000d20   c0ae     movff	0xae, 0x6          	MOVFF	(_timer_2 + 2), r0x06
000d22   f006
000d24   c0af     movff	0xaf, 0x7          	MOVFF	(_timer_2 + 3), r0x07
000d26   f007
                                           _00185_DS_:
                                           ;	.line	223; pillefyrsstyring.c	while ( (((signed long)(timer_2 - start_timer_2) < 0) ? (-1 * (timer_2 - start_timer_2)) : (timer_2 - start_timer_2)) < ms) {
000d28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d2a   0100     movlb	0                  	BANKSEL	_timer_2
000d2c   5dac     subwf	0xac, 0, 0x1       	SUBWF	_timer_2, W, B
000d2e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000d30   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d32   0100     movlb	0                  	BANKSEL	(_timer_2 + 1)
000d34   59ad     subwfb	0xad, 0, 0x1      	SUBWFB	(_timer_2 + 1), W, B
000d36   6e09     movwf	0x9, 0             	MOVWF	r0x09
000d38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d3a   0100     movlb	0                  	BANKSEL	(_timer_2 + 2)
000d3c   59ae     subwfb	0xae, 0, 0x1      	SUBWFB	(_timer_2 + 2), W, B
000d3e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000d40   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d42   0100     movlb	0                  	BANKSEL	(_timer_2 + 3)
000d44   59af     subwfb	0xaf, 0, 0x1      	SUBWFB	(_timer_2 + 3), W, B
000d46   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000d48   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
000d4a   f00c
000d4c   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
000d4e   f00d
000d50   c00a     movff	0xa, 0xe           	MOVFF	r0x0a, r0x0e
000d52   f00e
000d54   c00b     movff	0xb, 0xf           	MOVFF	r0x0b, r0x0f
000d56   f00f
000d58   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000d5a   ae0f     btfss	0xf, 0x7, 0        	BTFSS	r0x0f, 7
000d5c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000d5e   e31c     bnc	0xd98                	BNC	_00190_DS_
000d60   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d64   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d68   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000d6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d70   0eff     movlw	0xff               	MOVLW	0xff
000d72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d74   0eff     movlw	0xff               	MOVLW	0xff
000d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d78   0eff     movlw	0xff               	MOVLW	0xff
000d7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7c   0eff     movlw	0xff               	MOVLW	0xff
000d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d80   eca4     call	0x948, 0            	CALL	__mullong
000d82   f004
000d84   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d86   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
000d88   f00d
000d8a   cff4     movff	0xff4, 0xe         	MOVFF	PRODH, r0x0e
000d8c   f00e
000d8e   cfe9     movff	0xfe9, 0xf         	MOVFF	FSR0L, r0x0f
000d90   f00f
000d92   0e08     movlw	0x8                	MOVLW	0x08
000d94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d96   d008     bra	0xda8                	BRA	_00191_DS_
                                           _00190_DS_:
000d98   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
000d9a   f00c
000d9c   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
000d9e   f00d
000da0   c00a     movff	0xa, 0xe           	MOVFF	r0x0a, r0x0e
000da2   f00e
000da4   c00b     movff	0xb, 0xf           	MOVFF	r0x0b, r0x0f
000da6   f00f
                                           _00191_DS_:
000da8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000daa   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
000dac   e108     bnz	0xdbe                	BNZ	_00194_DS_
000dae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000db0   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
000db2   e105     bnz	0xdbe                	BNZ	_00194_DS_
000db4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000db6   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
000db8   e102     bnz	0xdbe                	BNZ	_00194_DS_
000dba   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dbc   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00194_DS_:
000dbe   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000dc0   d7b3     bra	0xd28                	BRA	_00185_DS_
000dc2   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000dc4   f00f
000dc6   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000dc8   f00e
000dca   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000dcc   f00d
000dce   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000dd0   f00c
000dd2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000dd4   f00b
000dd6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000dd8   f00a
000dda   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000ddc   f009
000dde   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000de0   f008
000de2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000de4   f007
000de6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000de8   f006
000dea   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000dec   f005
000dee   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000df0   f004
000df2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000df4   f003
000df6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000df8   f002
000dfa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000dfc   f001
000dfe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e00   f000
000e02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e04   ffd9
000e06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__timer_control	code
                                           _timer_control:
                                           ;	.line	175; pillefyrsstyring.c	static void timer_control(void) __interrupt 1 {
000f38   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000f3a   ffe5
000f3c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000f3e   ffe5
000f40   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000f42   ffe5
000f44   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000f46   ffe5
000f48   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000f4a   ffe5
000f4c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000f4e   ffe5
000f50   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000f52   ffe5
000f54   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000f56   ffe5
000f58   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000f5a   ffe5
000f5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f5e   ffe5
000f60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f62   ffd9
000f64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f66   ffe5
                                           ;	.line	176; pillefyrsstyring.c	if (PIR1bits.TMR2IF) {
000f68   a29e     btfss	0x9e, 0x1, 0       	BTFSS	_PIR1bits, 1
000f6a   d00f     bra	0xf8a                	BRA	_00166_DS_
                                           ;	.line	177; pillefyrsstyring.c	PR2 = TIMER2_RELOAD;		// 1 ms delay at 4 MHz
000f6c   0e18     movlw	0x18               	MOVLW	0x18
000f6e   6ecb     movwf	0xcb, 0            	MOVWF	_PR2
                                           ;	.line	178; pillefyrsstyring.c	PIR1bits.TMR2IF = 0;
000f70   929e     bcf	0x9e, 0x1, 0         	BCF	_PIR1bits, 1
000f72   0100     movlb	0                  	BANKSEL	_timer_2
                                           ;	.line	179; pillefyrsstyring.c	timer_2++;
000f74   2bac     incf	0xac, 0x1, 0x1      	INCF	_timer_2, F, B
000f76   e302     bnc	0xf7c                	BNC	_10209_DS_
000f78   0100     movlb	0                  	BANKSEL	(_timer_2 + 1)
000f7a   2bad     incf	0xad, 0x1, 0x1      	INCF	(_timer_2 + 1), F, B
                                           _10209_DS_:
000f7c   e302     bnc	0xf82                	BNC	_20210_DS_
000f7e   0100     movlb	0                  	BANKSEL	(_timer_2 + 2)
000f80   2bae     incf	0xae, 0x1, 0x1      	INCF	(_timer_2 + 2), F, B
                                           _20210_DS_:
000f82   e302     bnc	0xf88                	BNC	_30211_DS_
000f84   0100     movlb	0                  	BANKSEL	(_timer_2 + 3)
000f86   2baf     incf	0xaf, 0x1, 0x1      	INCF	(_timer_2 + 3), F, B
                                           _30211_DS_:
000f88   0004     clrwdt                   	clrwdt 
                                           _00166_DS_:
                                           ;	.line	182; pillefyrsstyring.c	if (PIR2bits.TMR3IF) {
000f8a   a2a1     btfss	0xa1, 0x1, 0       	BTFSS	_PIR2bits, 1
000f8c   d039     bra	0x1000               	BRA	_00177_DS_
                                           ;	.line	183; pillefyrsstyring.c	TMR3H = (unsigned char)(TIMER3_RELOAD >> 8);	// 8 ms delay at 8 MHz
000f8e   6ab3     clrf	0xb3, 0             	CLRF	_TMR3H
                                           ;	.line	184; pillefyrsstyring.c	TMR3L = (unsigned char)TIMER3_RELOAD;
000f90   6ab2     clrf	0xb2, 0             	CLRF	_TMR3L
                                           ;	.line	185; pillefyrsstyring.c	PIR2bits.TMR3IF = 0;	/* Clear the Timer Flag  */
000f92   92a1     bcf	0xa1, 0x1, 0         	BCF	_PIR2bits, 1
                                           ;	.line	188; pillefyrsstyring.c	adc_setchannel(3);
000f94   0e03     movlw	0x3                	MOVLW	0x03
000f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f98   eca1     call	0x1542, 0           	CALL	_adc_setchannel
000f9a   f00a
000f9c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	189; pillefyrsstyring.c	adc_conv();
000f9e   ec02     call	0x4, 0              	CALL	_adc_conv
000fa0   f000
                                           _00167_DS_:
                                           ;	.line	190; pillefyrsstyring.c	while(adc_busy()) {
000fa2   ec1d     call	0x183a, 0           	CALL	_adc_busy
000fa4   f00c
000fa6   6e00     movwf	0, 0               	MOVWF	r0x00
000fa8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000faa   e1fb     bnz	0xfa2                	BNZ	_00167_DS_
                                           ;	.line	193; pillefyrsstyring.c	boiler_temp = adc_read();
000fac   ec15     call	0x182a, 0           	CALL	_adc_read
000fae   f00c
000fb0   0100     movlb	0                  	BANKSEL	_boiler_temp
000fb2   6fc6     movwf	0xc6, 0x1          	MOVWF	_boiler_temp, B
000fb4   cff3     movff	0xff3, 0xc7        	MOVFF	PRODL, (_boiler_temp + 1)
000fb6   f0c7
                                           ;	.line	196; pillefyrsstyring.c	adc_setchannel(4);
000fb8   0e04     movlw	0x4                	MOVLW	0x04
000fba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fbc   eca1     call	0x1542, 0           	CALL	_adc_setchannel
000fbe   f00a
000fc0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	197; pillefyrsstyring.c	adc_conv();
000fc2   ec02     call	0x4, 0              	CALL	_adc_conv
000fc4   f000
                                           _00170_DS_:
                                           ;	.line	198; pillefyrsstyring.c	while(adc_busy()) {
000fc6   ec1d     call	0x183a, 0           	CALL	_adc_busy
000fc8   f00c
000fca   6e00     movwf	0, 0               	MOVWF	r0x00
000fcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fce   e1fb     bnz	0xfc6                	BNZ	_00170_DS_
                                           ;	.line	201; pillefyrsstyring.c	smoke_temp = adc_read();
000fd0   ec15     call	0x182a, 0           	CALL	_adc_read
000fd2   f00c
000fd4   0100     movlb	0                  	BANKSEL	_smoke_temp
000fd6   6fc8     movwf	0xc8, 0x1          	MOVWF	_smoke_temp, B
000fd8   cff3     movff	0xff3, 0xc9        	MOVFF	PRODL, (_smoke_temp + 1)
000fda   f0c9
                                           ;	.line	204; pillefyrsstyring.c	adc_setchannel(1);
000fdc   0e01     movlw	0x1                	MOVLW	0x01
000fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe0   eca1     call	0x1542, 0           	CALL	_adc_setchannel
000fe2   f00a
000fe4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	205; pillefyrsstyring.c	adc_conv();
000fe6   ec02     call	0x4, 0              	CALL	_adc_conv
000fe8   f000
                                           _00173_DS_:
                                           ;	.line	206; pillefyrsstyring.c	while(adc_busy()) {
000fea   ec1d     call	0x183a, 0           	CALL	_adc_busy
000fec   f00c
000fee   6e00     movwf	0, 0               	MOVWF	r0x00
000ff0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ff2   e1fb     bnz	0xfea                	BNZ	_00173_DS_
                                           ;	.line	209; pillefyrsstyring.c	chimney_temp = adc_read();
000ff4   ec15     call	0x182a, 0           	CALL	_adc_read
000ff6   f00c
000ff8   0100     movlb	0                  	BANKSEL	_chimney_temp
000ffa   6fca     movwf	0xca, 0x1          	MOVWF	_chimney_temp, B
000ffc   cff3     movff	0xff3, 0xcb        	MOVFF	PRODL, (_chimney_temp + 1)
000ffe   f0cb
                                           _00177_DS_:
                                           ;	.line	212; pillefyrsstyring.c	if (usart_drdy()) {
001000   ec19     call	0x1832, 0           	CALL	_usart_drdy
001002   f00c
001004   6e00     movwf	0, 0               	MOVWF	r0x00
001006   5000     movf	0, 0, 0             	MOVF	r0x00, W
001008   e006     bz	0x1016                	BZ	_00180_DS_
                                           ;	.line	214; pillefyrsstyring.c	usart_putc(usart_getc());
00100a   ec81     call	0x1702, 0           	CALL	_usart_getc
00100c   f00b
00100e   6e00     movwf	0, 0               	MOVWF	r0x00
001010   5000     movf	0, 0, 0             	MOVF	r0x00, W
001012   ecff     call	0x17fe, 0           	CALL	_usart_putc
001014   f00b
                                           _00180_DS_:
001016   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001018   f000
00101a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00101c   ffd9
00101e   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001020   fffb
001022   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
001024   fffa
001026   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001028   ffea
00102a   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00102c   ffe9
00102e   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001030   fff4
001032   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
001034   fff3
001036   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001038   ffe0
00103a   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00103c   ffd8
00103e   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001040   ffe8
001042   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001044   704f     btg	0x4f, 0, 0           	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
001046   6e65     movwf	0x65, 0            
001048   7453     btg	0x53, 0x2, 0         
00104a   6b6f     clrf	0x6f, 0x1           
00104c   7265     btg	0x65, 0x1, 0         
00104e   7320     btg	0x20, 0x1, 0x1       
001050   6174     cpfslt	0x74, 0x1         	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x00
001052   7472     btg	0x72, 0x2, 0         
001054   6e69     movwf	0x69, 0            
001056   2e67     decfsz	0x67, 0x1, 0      
001058   2e2e     decfsz	0x2e, 0x1, 0      
00105a   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1120 (0x0460) bytes ( 0.85%)
                                           ;           	  560 (0x0230) words
                                           ; udata size:	   35 (0x0023) bytes ( 0.91%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.0.0 #6037 (Jul 16 2012) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 18 04:56:14 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _lcd_buffer
                                           	global _lcd_init
                                           	global _lcd_enable
                                           	global _lcd_status
                                           	global _lcd_reset
                                           	global _lcd_screenon
                                           	global _lcd_cls
                                           	global _lcd_setpage
                                           	global _lcd_setyaddr
                                           	global _lcd_waitbusy
                                           	global _lcd_write
                                           	global _lcd_selectside
                                           	global _lcd_read
                                           	global _lcd_plot_pixel
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sleep_ms
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	202; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
001220   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001222   ffe5
001224   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001226   ffd9
001228   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00122a   ffe5
00122c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00122e   ffe5
001230   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001232   ffe5
001234   0e02     movlw	0x2                	MOVLW	0x02
001236   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001238   f000
00123a   0e03     movlw	0x3                	MOVLW	0x03
00123c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00123e   f001
                                           ;	.line	207; glcd.c	if (rx & 64) {
001240   ac00     btfss	0, 0x6, 0          	BTFSS	r0x00, 6
001242   d006     bra	0x1250               	BRA	_00205_DS_
                                           ;	.line	208; glcd.c	lcd_selectside(LCD_RIGHT);
001244   0e02     movlw	0x2                	MOVLW	0x02
001246   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001248   ec26     call	0x164c, 0           	CALL	_lcd_selectside
00124a   f00b
00124c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00124e   d005     bra	0x125a               	BRA	_00206_DS_
                                           _00205_DS_:
                                           ;	.line	211; glcd.c	lcd_selectside(LCD_LEFT);
001250   0e01     movlw	0x1                	MOVLW	0x01
001252   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001254   ec26     call	0x164c, 0           	CALL	_lcd_selectside
001256   f00b
001258   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00206_DS_:
                                           ;	.line	214; glcd.c	lcd_setpage( ry >> 3);		// fast /8
00125a   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
00125c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00125e   0b1f     andlw	0x1f               	ANDLW	0x1f
001260   6e02     movwf	0x2, 0             	MOVWF	r0x02
001262   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001266   ec55     call	0x16aa, 0           	CALL	_lcd_setpage
001268   f00b
00126a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	215; glcd.c	lcd_setyaddr( rx & 0b00111111);
00126c   0e3f     movlw	0x3f               	MOVLW	0x3f
00126e   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
001270   5000     movf	0, 0, 0             	MOVF	r0x00, W
001272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001274   ecf4     call	0x15e8, 0           	CALL	_lcd_setyaddr
001276   f00a
001278   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	216; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
00127a   ec6c     call	0x16d8, 0           	CALL	_lcd_read
00127c   f00b
                                           ;	.line	217; glcd.c	d = lcd_read();				// read again to transfer to pic
00127e   ec6c     call	0x16d8, 0           	CALL	_lcd_read
001280   f00b
001282   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	218; glcd.c	lcd_setyaddr( rx & 0b00111111); 
001284   5000     movf	0, 0, 0             	MOVF	r0x00, W
001286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001288   ecf4     call	0x15e8, 0           	CALL	_lcd_setyaddr
00128a   f00a
00128c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	219; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
00128e   0e07     movlw	0x7                	MOVLW	0x07
001290   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
001292   0e01     movlw	0x1                	MOVLW	0x01
001294   6e00     movwf	0, 0               	MOVWF	r0x00
001296   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001298   e005     bz	0x12a4                	BZ	_00213_DS_
00129a   6ce8     negf	0xe8, 0             	NEGF	WREG
00129c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00214_DS_:
00129e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0012a0   0f01     addlw	0x1                	ADDLW	0x01
0012a2   e3fd     bnc	0x129e               	BNC	_00214_DS_
                                           _00213_DS_:
0012a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012a6   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
0012a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0012aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ac   ec3e     call	0x167c, 0           	CALL	_lcd_write
0012ae   f00b
0012b0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0012b2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0012b4   f002
0012b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012b8   f001
0012ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0012bc   f000
0012be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0012c0   ffd9
0012c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	187; glcd.c	unsigned char lcd_read (void) {
0016d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0016da   ffe5
0016dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0016de   ffd9
0016e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0016e2   ffe5
                                           ;	.line	190; glcd.c	LCD_TRIS = 0xFF;
0016e4   0eff     movlw	0xff               	MOVLW	0xff
0016e6   6e95     movwf	0x95, 0            	MOVWF	_TRISD
                                           ;	.line	191; glcd.c	RW = 1;	// read
0016e8   8284     bsf	0x84, 0x1, 0         	BSF	_PORTEbits, 1
                                           ;	.line	192; glcd.c	DI = 1;	// data
0016ea   8084     bsf	0x84, 0, 0           	BSF	_PORTEbits, 0
                                           ;	.line	194; glcd.c	lcd_enable();
0016ec   ecde     call	0x17bc, 0           	CALL	_lcd_enable
0016ee   f00b
                                           ;	.line	195; glcd.c	d = LCD_DATA;
0016f0   cf83     movff	0xf83, 0           	MOVFF	_PORTD, r0x00
0016f2   f000
                                           ;	.line	196; glcd.c	LCD_TRIS = 0x00;
0016f4   6a95     clrf	0x95, 0             	CLRF	_TRISD
                                           ;	.line	198; glcd.c	return d;
0016f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016fa   f000
0016fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016fe   ffd9
001700   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	166; glcd.c	void lcd_selectside(unsigned char sides) {
00164c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00164e   ffe5
001650   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001652   ffd9
001654   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001656   ffe5
001658   0e02     movlw	0x2                	MOVLW	0x02
00165a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00165c   f000
                                           ;	.line	169; glcd.c	if (sides & LCD_LEFT) {
00165e   a000     btfss	0, 0, 0            	BTFSS	r0x00, 0
001660   d002     bra	0x1666               	BRA	_00184_DS_
                                           ;	.line	170; glcd.c	CS1 = 0;
001662   9082     bcf	0x82, 0, 0           	BCF	_PORTCbits, 0
001664   d001     bra	0x1668               	BRA	_00185_DS_
                                           _00184_DS_:
                                           ;	.line	173; glcd.c	CS1 = 1;
001666   8082     bsf	0x82, 0, 0           	BSF	_PORTCbits, 0
                                           _00185_DS_:
                                           ;	.line	176; glcd.c	if (sides & LCD_RIGHT) {
001668   a200     btfss	0, 0x1, 0          	BTFSS	r0x00, 1
00166a   d002     bra	0x1670               	BRA	_00187_DS_
                                           ;	.line	177; glcd.c	CS2 = 0;
00166c   9282     bcf	0x82, 0x1, 0         	BCF	_PORTCbits, 1
00166e   d001     bra	0x1672               	BRA	_00189_DS_
                                           _00187_DS_:
                                           ;	.line	180; glcd.c	CS2 = 1;
001670   8282     bsf	0x82, 0x1, 0         	BSF	_PORTCbits, 1
                                           _00189_DS_:
001672   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001674   f000
001676   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001678   ffd9
00167a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	156; glcd.c	void lcd_write (unsigned char d) {
00167c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00167e   ffe5
001680   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001682   ffd9
001684   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001686   ffe5
001688   0e02     movlw	0x2                	MOVLW	0x02
00168a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00168c   f000
                                           ;	.line	157; glcd.c	lcd_waitbusy();
00168e   eca8     call	0x1750, 0           	CALL	_lcd_waitbusy
001690   f00b
                                           ;	.line	158; glcd.c	DI = 1;	// data
001692   8084     bsf	0x84, 0, 0           	BSF	_PORTEbits, 0
                                           ;	.line	159; glcd.c	RW = 0;	// write
001694   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
                                           ;	.line	160; glcd.c	LCD_TRIS = 0; 
001696   6a95     clrf	0x95, 0             	CLRF	_TRISD
                                           ;	.line	161; glcd.c	LCD_DATA = d;
001698   c000     movff	0, 0xf83           	MOVFF	r0x00, _PORTD
00169a   ff83
                                           ;	.line	162; glcd.c	lcd_enable();
00169c   ecde     call	0x17bc, 0           	CALL	_lcd_enable
00169e   f00b
0016a0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016a2   f000
0016a4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016a6   ffd9
0016a8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	149; glcd.c	void lcd_waitbusy(void) {
001750   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001752   ffe5
001754   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001756   ffd9
001758   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00175a   ffe5
                                           _00166_DS_:
                                           ;	.line	150; glcd.c	while (lcd_status() & 0b10000000) {
00175c   ecbe     call	0x157c, 0           	CALL	_lcd_status
00175e   f00a
001760   6e00     movwf	0, 0               	MOVWF	r0x00
001762   ae00     btfss	0, 0x7, 0          	BTFSS	r0x00, 7
001764   d003     bra	0x176c               	BRA	_00169_DS_
                                           _00173_DS_:
001766   0000     nop                      	nop 
001768   0000     nop                      	nop 
00176a   d7f8     bra	0x175c               	BRA	_00166_DS_
                                           _00169_DS_:
00176c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00176e   f000
001770   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001772   ffd9
001774   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	138; glcd.c	void lcd_setyaddr(unsigned char y) {
0015e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0015ea   ffe5
0015ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0015ee   ffd9
0015f0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0015f2   ffe5
0015f4   0e02     movlw	0x2                	MOVLW	0x02
0015f6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0015f8   f000
                                           ;	.line	140; glcd.c	lcd_waitbusy();
0015fa   eca8     call	0x1750, 0           	CALL	_lcd_waitbusy
0015fc   f00b
                                           ;	.line	141; glcd.c	DI = 0; RW = 0;
0015fe   9084     bcf	0x84, 0, 0           	BCF	_PORTEbits, 0
001600   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
                                           ;	.line	142; glcd.c	LCD_DATA = 0b01000000 | (y & 0b00111111);
001602   0e3f     movlw	0x3f               	MOVLW	0x3f
001604   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
001606   0e40     movlw	0x40               	MOVLW	0x40
001608   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
00160a   6e83     movwf	0x83, 0            	MOVWF	_PORTD
                                           ;	.line	143; glcd.c	lcd_enable();
00160c   ecde     call	0x17bc, 0           	CALL	_lcd_enable
00160e   f00b
001610   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001612   f000
001614   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001616   ffd9
001618   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	126; glcd.c	void lcd_setpage(unsigned char page) {
0016aa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0016ac   ffe5
0016ae   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0016b0   ffd9
0016b2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0016b4   ffe5
0016b6   0e02     movlw	0x2                	MOVLW	0x02
0016b8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0016ba   f000
                                           ;	.line	128; glcd.c	lcd_waitbusy();
0016bc   eca8     call	0x1750, 0           	CALL	_lcd_waitbusy
0016be   f00b
                                           ;	.line	129; glcd.c	DI = 0; RW = 0; 
0016c0   9084     bcf	0x84, 0, 0           	BCF	_PORTEbits, 0
0016c2   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
                                           ;	.line	130; glcd.c	LCD_DATA = 0b10111000 | page;
0016c4   0eb8     movlw	0xb8               	MOVLW	0xb8
0016c6   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
0016c8   6e83     movwf	0x83, 0            	MOVWF	_PORTD
                                           ;	.line	131; glcd.c	lcd_enable();
0016ca   ecde     call	0x17bc, 0           	CALL	_lcd_enable
0016cc   f00b
0016ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016d0   f000
0016d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016d4   ffd9
0016d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	98; glcd.c	void lcd_cls(void) {
00143a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00143c   ffe5
00143e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001440   ffd9
001442   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001444   ffe5
001446   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001448   ffe5
                                           ;	.line	102; glcd.c	lcd_selectside(LCD_BOTH);
00144a   0e03     movlw	0x3                	MOVLW	0x03
00144c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144e   ec26     call	0x164c, 0           	CALL	_lcd_selectside
001450   f00b
001452   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	103; glcd.c	for (x = 0; x < 8; x++) {
001454   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00140_DS_:
001456   0e08     movlw	0x8                	MOVLW	0x08
001458   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
00145a   e217     bc	0x148a                	BC	_00143_DS_
                                           ;	.line	105; glcd.c	lcd_setpage(x);
00145c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00145e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001460   ec55     call	0x16aa, 0           	CALL	_lcd_setpage
001462   f00b
001464   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	108; glcd.c	lcd_setyaddr(0);
001466   0e00     movlw	0                  	MOVLW	0x00
001468   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00146a   ecf4     call	0x15e8, 0           	CALL	_lcd_setyaddr
00146c   f00a
00146e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	111; glcd.c	LCD_DATA = 0; RW = 0; DI = 1;
001470   6a83     clrf	0x83, 0             	CLRF	_PORTD
001472   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
001474   8084     bsf	0x84, 0, 0           	BSF	_PORTEbits, 0
                                           ;	.line	114; glcd.c	for (y = 0; y < 64; y++) {
001476   0e40     movlw	0x40               	MOVLW	0x40
001478   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00139_DS_:
                                           ;	.line	115; glcd.c	lcd_enable(); 
00147a   ecde     call	0x17bc, 0           	CALL	_lcd_enable
00147c   f00b
00147e   0000     nop                      	nop 
001480   0000     nop                      	nop 
001482   2e01     decfsz	0x1, 0x1, 0       	DECFSZ	r0x01, F
001484   d7fa     bra	0x147a               	BRA	_00139_DS_
                                           ;	.line	103; glcd.c	for (x = 0; x < 8; x++) {
001486   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001488   d7e6     bra	0x1456               	BRA	_00140_DS_
                                           _00143_DS_:
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_LEFT);
00148a   0e01     movlw	0x1                	MOVLW	0x01
00148c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00148e   ec26     call	0x164c, 0           	CALL	_lcd_selectside
001490   f00b
001492   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001494   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001496   f001
001498   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00149a   f000
00149c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00149e   ffd9
0014a0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	86; glcd.c	void lcd_screenon(unsigned char on) {
0015b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0015b6   ffe5
0015b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0015ba   ffd9
0015bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0015be   ffe5
0015c0   0e02     movlw	0x2                	MOVLW	0x02
0015c2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0015c4   f000
                                           ;	.line	88; glcd.c	CS1 = 0;
0015c6   9082     bcf	0x82, 0, 0           	BCF	_PORTCbits, 0
                                           ;	.line	89; glcd.c	CS2 = 0;
0015c8   9282     bcf	0x82, 0x1, 0         	BCF	_PORTCbits, 1
                                           ;	.line	90; glcd.c	RW = 0;
0015ca   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
                                           ;	.line	91; glcd.c	DI = 0;
0015cc   9084     bcf	0x84, 0, 0           	BCF	_PORTEbits, 0
                                           ;	.line	92; glcd.c	LCD_TRIS = 0;	// all outputs	
0015ce   6a95     clrf	0x95, 0             	CLRF	_TRISD
                                           ;	.line	93; glcd.c	LATD = 0b00111110 | (on & 0b00000001);	// main screen turn on!
0015d0   0e01     movlw	0x1                	MOVLW	0x01
0015d2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0015d4   0e3e     movlw	0x3e               	MOVLW	0x3e
0015d6   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
0015d8   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	94; glcd.c	lcd_enable();
0015da   ecde     call	0x17bc, 0           	CALL	_lcd_enable
0015dc   f00b
0015de   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0015e0   f000
0015e2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0015e4   ffd9
0015e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	67; glcd.c	void lcd_reset(void) {
0013cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0013ce   ffe5
0013d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0013d2   ffd9
0013d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0013d6   ffe5
                                           ;	.line	74; glcd.c	sleep_ms(1);
0013d8   0e00     movlw	0                  	MOVLW	0x00
0013da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013dc   0e00     movlw	0                  	MOVLW	0x00
0013de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e0   0e00     movlw	0                  	MOVLW	0x00
0013e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e4   0e01     movlw	0x1                	MOVLW	0x01
0013e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e8   ec5c     call	0xcb8, 0            	CALL	_sleep_ms
0013ea   f006
0013ec   0e04     movlw	0x4                	MOVLW	0x04
0013ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	RESET = 1;
0013f0   8a82     bsf	0x82, 0x5, 0         	BSF	_PORTCbits, 5
                                           ;	.line	76; glcd.c	sleep_ms(1);
0013f2   0e00     movlw	0                  	MOVLW	0x00
0013f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f6   0e00     movlw	0                  	MOVLW	0x00
0013f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fa   0e00     movlw	0                  	MOVLW	0x00
0013fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fe   0e01     movlw	0x1                	MOVLW	0x01
001400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001402   ec5c     call	0xcb8, 0            	CALL	_sleep_ms
001404   f006
001406   0e04     movlw	0x4                	MOVLW	0x04
001408   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	77; glcd.c	RESET = 0;
00140a   9a82     bcf	0x82, 0x5, 0         	BCF	_PORTCbits, 5
                                           _00120_DS_:
                                           ;	.line	80; glcd.c	while (lcd_status() & 0b00010000) {
00140c   ecbe     call	0x157c, 0           	CALL	_lcd_status
00140e   f00a
001410   6e00     movwf	0, 0               	MOVWF	r0x00
001412   a800     btfss	0, 0x4, 0          	BTFSS	r0x00, 4
001414   d00d     bra	0x1430               	BRA	_00123_DS_
                                           ;	.line	81; glcd.c	sleep_ms(1);
001416   0e00     movlw	0                  	MOVLW	0x00
001418   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00141a   0e00     movlw	0                  	MOVLW	0x00
00141c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00141e   0e00     movlw	0                  	MOVLW	0x00
001420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001422   0e01     movlw	0x1                	MOVLW	0x01
001424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001426   ec5c     call	0xcb8, 0            	CALL	_sleep_ms
001428   f006
00142a   0e04     movlw	0x4                	MOVLW	0x04
00142c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00142e   d7ee     bra	0x140c               	BRA	_00120_DS_
                                           _00123_DS_:
001430   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001432   f000
001434   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001436   ffd9
001438   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	44; glcd.c	unsigned char lcd_status(void) {
00157c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00157e   ffe5
001580   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001582   ffd9
001584   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001586   ffe5
001588   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00158a   ffe5
                                           ;	.line	51; glcd.c	_lcd_tris = LCD_TRIS;
00158c   cf95     movff	0xf95, 0           	MOVFF	_TRISD, r0x00
00158e   f000
                                           ;	.line	54; glcd.c	LCD_TRIS = 0xFF;	// all inputs
001590   0eff     movlw	0xff               	MOVLW	0xff
001592   6e95     movwf	0x95, 0            	MOVWF	_TRISD
                                           ;	.line	55; glcd.c	DI = 0; RW = 1;		// command/read
001594   9084     bcf	0x84, 0, 0           	BCF	_PORTEbits, 0
001596   8284     bsf	0x84, 0x1, 0         	BSF	_PORTEbits, 1
                                           ;	.line	57; glcd.c	lcd_enable();
001598   ecde     call	0x17bc, 0           	CALL	_lcd_enable
00159a   f00b
                                           ;	.line	58; glcd.c	_status = LCD_DATA;
00159c   cf83     movff	0xf83, 0x1         	MOVFF	_PORTD, r0x01
00159e   f001
                                           ;	.line	61; glcd.c	LCD_TRIS = _lcd_tris;
0015a0   c000     movff	0, 0xf95           	MOVFF	r0x00, _TRISD
0015a2   ff95
                                           ;	.line	63; glcd.c	return _status;
0015a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0015a8   f001
0015aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0015ac   f000
0015ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0015b0   ffd9
0015b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	36; glcd.c	void lcd_enable(void) {
0017bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0017be   ffe5
0017c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0017c2   ffd9
                                           ;	.line	37; glcd.c	ENABLE = 1;
0017c4   8484     bsf	0x84, 0x2, 0         	BSF	_PORTEbits, 2
0017c6   0000     nop                      	nop 
0017c8   0000     nop                      	nop 
                                           ;	.line	39; glcd.c	ENABLE = 0;
0017ca   9484     bcf	0x84, 0x2, 0         	BCF	_PORTEbits, 2
0017cc   0000     nop                      	nop 
0017ce   0000     nop                      	nop 
0017d0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017d2   ffd9
0017d4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	15; glcd.c	void lcd_init(void) {
00161a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00161c   ffe5
00161e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001620   ffd9
                                           ;	.line	16; glcd.c	LCD_TRIS = 0x00;
001622   6a95     clrf	0x95, 0             	CLRF	_TRISD
                                           ;	.line	17; glcd.c	ENABLE_TRIS = 0;
001624   9496     bcf	0x96, 0x2, 0         	BCF	_TRISEbits, 2
                                           ;	.line	18; glcd.c	RW_TRIS	= 0;
001626   9296     bcf	0x96, 0x1, 0         	BCF	_TRISEbits, 1
                                           ;	.line	19; glcd.c	DI_TRIS = 0;
001628   9096     bcf	0x96, 0, 0           	BCF	_TRISEbits, 0
                                           ;	.line	20; glcd.c	RESET_TRIS = 0;
00162a   9a94     bcf	0x94, 0x5, 0         	BCF	_TRISCbits, 5
                                           ;	.line	21; glcd.c	CS1_TRIS = 0;
00162c   9094     bcf	0x94, 0, 0           	BCF	_TRISCbits, 0
                                           ;	.line	22; glcd.c	CS2_TRIS = 0;
00162e   9294     bcf	0x94, 0x1, 0         	BCF	_TRISCbits, 1
                                           ;	.line	24; glcd.c	CS1 = 1;
001630   8082     bsf	0x82, 0, 0           	BSF	_PORTCbits, 0
                                           ;	.line	25; glcd.c	CS2 = 1;
001632   8282     bsf	0x82, 0x1, 0         	BSF	_PORTCbits, 1
                                           ;	.line	31; glcd.c	lcd_reset();
001634   ece6     call	0x13cc, 0           	CALL	_lcd_reset
001636   f009
                                           ;	.line	32; glcd.c	lcd_screenon(1);
001638   0e01     movlw	0x1                	MOVLW	0x01
00163a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00163c   ecda     call	0x15b4, 0           	CALL	_lcd_screenon
00163e   f00a
001640   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	33; glcd.c	lcd_cls();
001642   ec1d     call	0x143a, 0           	CALL	_lcd_cls
001644   f00a
001646   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001648   ffd9
00164a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  832 (0x0340) bytes ( 0.63%)
                                           ;           	  416 (0x01a0) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.03%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.0.0 #6037 (Jul 16 2012) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 18 04:56:14 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _do_menu_update
                                           	global _lcd_print
                                           	global _button_pressed
                                           	global _button_released
                                           	global _selected
                                           	global _font8x5
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strcat
                                           	extern _strcpy
                                           	extern _lcd_cls
                                           	extern _lcd_plot_pixel
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _selected	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           
                                           udata_menu_system_0	udata
                                           _do_menu_update_menu_item_1_1	res	22
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_menu_system__button_released	code
                                           _button_released:
                                           ;	.line	103; menu_system.c	void button_released(unsigned char button) {
0014fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014fc   ffe5
0014fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001500   ffd9
001502   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001504   ffe5
001506   0e02     movlw	0x2                	MOVLW	0x02
001508   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00150a   f000
                                           ;	.line	104; menu_system.c	if (button == UP) {
00150c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00150e   0a01     xorlw	0x1                	XORLW	0x01
001510   e106     bnz	0x151e               	BNZ	_00186_DS_
                                           _00195_DS_:
001512   0100     movlb	0                  	BANKSEL	_selected
                                           ;	.line	105; menu_system.c	if (selected > 0) {
001514   51ce     movf	0xce, 0, 0x1        	MOVF	_selected, W, B
001516   e00c     bz	0x1530                	BZ	_00187_DS_
001518   0100     movlb	0                  	BANKSEL	_selected
                                           ;	.line	106; menu_system.c	selected--;
00151a   07ce     decf	0xce, 0x1, 0x1      	DECF	_selected, F, B
00151c   d009     bra	0x1530               	BRA	_00187_DS_
                                           _00186_DS_:
                                           ;	.line	109; menu_system.c	else if (button == DOWN) {
00151e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001520   0a04     xorlw	0x4                	XORLW	0x04
001522   e106     bnz	0x1530               	BNZ	_00187_DS_
                                           ;	.line	110; menu_system.c	if (selected < MENU_N) {
001524   0e07     movlw	0x7                	MOVLW	0x07
001526   0100     movlb	0                  	BANKSEL	_selected
001528   5dce     subwf	0xce, 0, 0x1       	SUBWF	_selected, W, B
00152a   e202     bc	0x1530                	BC	_00187_DS_
00152c   0100     movlb	0                  	BANKSEL	_selected
                                           ;	.line	111; menu_system.c	selected++;
00152e   2bce     incf	0xce, 0x1, 0x1      	INCF	_selected, F, B
                                           _00187_DS_:
                                           ;	.line	114; menu_system.c	lcd_cls();
001530   ec1d     call	0x143a, 0           	CALL	_lcd_cls
001532   f00a
                                           ;	.line	115; menu_system.c	do_menu_update();
001534   ec04     call	0xe08, 0            	CALL	_do_menu_update
001536   f007
001538   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00153a   f000
00153c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00153e   ffd9
001540   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_menu_system__button_pressed	code
                                           _button_pressed:
                                           ;	.line	99; menu_system.c	void button_pressed(unsigned char button) {
00180e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001810   ffe5
001812   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001814   ffd9
                                           ;	.line	101; menu_system.c	}
001816   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001818   ffd9
00181a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_menu_system__lcd_print	code
                                           _lcd_print:
                                           ;	.line	67; menu_system.c	void lcd_print(unsigned char *s, unsigned char line, unsigned char inverted) {
0006b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0006b2   ffe5
0006b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0006b6   ffd9
0006b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0006ba   ffe5
0006bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0006be   ffe5
0006c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0006c2   ffe5
0006c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0006c6   ffe5
0006c8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0006ca   ffe5
0006cc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0006ce   ffe5
0006d0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0006d2   ffe5
0006d4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0006d6   ffe5
0006d8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0006da   ffe5
0006dc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0006de   ffe5
0006e0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0006e2   ffe5
0006e4   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0006e6   ffe5
0006e8   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0006ea   ffe5
0006ec   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0006ee   ffe5
0006f0   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0006f2   ffe5
0006f4   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0006f6   ffe5
0006f8   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0006fa   ffe5
0006fc   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0006fe   ffe5
000700   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000702   ffe5
000704   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000706   ffe5
000708   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00070a   ffe5
00070c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00070e   ffe5
000710   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
000712   ffe5
000714   0e02     movlw	0x2                	MOVLW	0x02
000716   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000718   f000
00071a   0e03     movlw	0x3                	MOVLW	0x03
00071c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00071e   f001
000720   0e04     movlw	0x4                	MOVLW	0x04
000722   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000724   f002
000726   0e05     movlw	0x5                	MOVLW	0x05
000728   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00072a   f003
00072c   0e06     movlw	0x6                	MOVLW	0x06
00072e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000730   f004
                                           ; ;multiply lit val:0x08 by variable r0x03 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	73; menu_system.c	for (n = 0; s[n]; n++) {
000732   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000734   0d08     mullw	0x8                	MULLW	0x08
000736   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000738   f003
00073a   6a05     clrf	0x5, 0              	CLRF	r0x05
00073c   6a06     clrf	0x6, 0              	CLRF	r0x06
00073e   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00140_DS_:
000740   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000742   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000744   6e08     movwf	0x8, 0             	MOVWF	r0x08
000746   6ae8     clrf	0xe8, 0             	CLRF	WREG
000748   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00074a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00074c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00074e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000750   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000752   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000754   ffe9
000756   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000758   fff3
00075a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00075c   eccd     call	0x179a, 0           	CALL	__gptrget1
00075e   f00b
000760   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000762   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000764   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000766   d0bf     bra	0x8e6                	BRA	_00144_DS_
                                           ;	.line	74; menu_system.c	for (x = 0; x < FONT_WIDTH; x++) {
000768   c008     movff	0x8, 0xb           	MOVFF	r0x08, r0x0b
00076a   f00b
00076c   c009     movff	0x9, 0xc           	MOVFF	r0x09, r0x0c
00076e   f00c
000770   c00a     movff	0xa, 0xd           	MOVFF	r0x0a, r0x0d
000772   f00d
000774   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00136_DS_:
000776   0e06     movlw	0x6                	MOVLW	0x06
000778   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
00077a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00077c   d0ae     bra	0x8da                	BRA	_00142_DS_
                                           ;	.line	75; menu_system.c	for (y = 0; y < FONT_HEIGHT; y++) {
00077e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000780   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
000782   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
000784   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000786   240e     addwf	0xe, 0, 0          	ADDWF	r0x0e, W
000788   6e10     movwf	0x10, 0            	MOVWF	r0x10
00078a   6a11     clrf	0x11, 0             	CLRF	r0x11
                                           _00132_DS_:
00078c   0e08     movlw	0x8                	MOVLW	0x08
00078e   5c11     subwf	0x11, 0, 0         	SUBWF	r0x11, W
000790   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000792   d0a1     bra	0x8d6                	BRA	_00138_DS_
                                           ;	.line	76; menu_system.c	if (inverted) {
000794   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000796   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000798   d04f     bra	0x838                	BRA	_00130_DS_
                                           ;	.line	77; menu_system.c	if (!((font8x5[ s[n] ][x] & (1 << y)) >> y)) {
00079a   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00079c   ffe9
00079e   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0007a0   fff3
0007a2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0007a4   eccd     call	0x179a, 0           	CALL	__gptrget1
0007a6   f00b
0007a8   6e12     movwf	0x12, 0            	MOVWF	r0x12
                                           ; ;multiply lit val:0x06 by variable r0x12 and store in r0x12
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0007aa   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0007ac   0d06     mullw	0x6                	MULLW	0x06
0007ae   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x12
0007b0   f012
0007b2   cff4     movff	0xff4, 0x13        	MOVFF	PRODH, r0x13
0007b4   f013
0007b6   6a14     clrf	0x14, 0             	CLRF	r0x14
0007b8   0e0c     movlw	0xc                	MOVLW	LOW(_font8x5)
0007ba   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x12, F
0007bc   0e00     movlw	0                  	MOVLW	HIGH(_font8x5)
0007be   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x13, F
0007c0   0e00     movlw	0                  	MOVLW	UPPER(_font8x5)
0007c2   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x14, F
0007c4   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0007c6   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x12, F
0007c8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0007ca   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x13, F
0007cc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0007ce   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x14, F
0007d0   0e01     movlw	0x1                	MOVLW	0x01
0007d2   6e15     movwf	0x15, 0            	MOVWF	r0x15
0007d4   0e00     movlw	0                  	MOVLW	0x00
0007d6   6e16     movwf	0x16, 0            	MOVWF	r0x16
0007d8   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0007da   e006     bz	0x7e8                 	BZ	_00160_DS_
0007dc   6ce8     negf	0xe8, 0             	NEGF	WREG
0007de   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00161_DS_:
0007e0   3615     rlcf	0x15, 0x1, 0        	RLCF	r0x15, F
0007e2   3616     rlcf	0x16, 0x1, 0        	RLCF	r0x16, F
0007e4   0f01     addlw	0x1                	ADDLW	0x01
0007e6   e3fc     bnc	0x7e0                	BNC	_00161_DS_
                                           _00160_DS_:
0007e8   c012     movff	0x12, 0xff6        	MOVFF	r0x12, TBLPTRL
0007ea   fff6
0007ec   c013     movff	0x13, 0xff7        	MOVFF	r0x13, TBLPTRH
0007ee   fff7
0007f0   c014     movff	0x14, 0xff8        	MOVFF	r0x14, TBLPTRU
0007f2   fff8
0007f4   0009     tblrd	*+                 	TBLRD*+	
0007f6   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x12
0007f8   f012
0007fa   6a13     clrf	0x13, 0             	CLRF	r0x13
0007fc   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0007fe   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x15, F
000800   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000802   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x16, F
000804   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000806   e008     bz	0x818                 	BZ	_00163_DS_
000808   6ce8     negf	0xe8, 0             	NEGF	WREG
00080a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00164_DS_:
00080c   be16     btfsc	0x16, 0x7, 0       	BTFSC	r0x16, 7
00080e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000810   3216     rrcf	0x16, 0x1, 0        	RRCF	r0x16, F
000812   3215     rrcf	0x15, 0x1, 0        	RRCF	r0x15, F
000814   0f01     addlw	0x1                	ADDLW	0x01
000816   e3fa     bnc	0x80c                	BNC	_00164_DS_
                                           _00163_DS_:
000818   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00081a   1016     iorwf	0x16, 0, 0         	IORWF	r0x16, W
00081c   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00081e   d059     bra	0x8d2                	BRA	_00134_DS_
                                           ;	.line	79; menu_system.c	lcd_plot_pixel(x + n * FONT_WIDTH, y + line * FONT_HEIGHT);
000820   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000822   2411     addwf	0x11, 0, 0         	ADDWF	r0x11, W
000824   6e12     movwf	0x12, 0            	MOVWF	r0x12
000826   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000828   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00082a   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00082c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00082e   ec10     call	0x1220, 0           	CALL	_lcd_plot_pixel
000830   f009
000832   0e02     movlw	0x2                	MOVLW	0x02
000834   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000836   d04d     bra	0x8d2                	BRA	_00134_DS_
                                           _00130_DS_:
                                           ;	.line	86; menu_system.c	if ((font8x5[ s[n] ][x] & (1 << y)) >> y) {
000838   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00083a   ffe9
00083c   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00083e   fff3
000840   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000842   eccd     call	0x179a, 0           	CALL	__gptrget1
000844   f00b
000846   6e12     movwf	0x12, 0            	MOVWF	r0x12
                                           ; ;multiply lit val:0x06 by variable r0x12 and store in r0x12
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000848   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00084a   0d06     mullw	0x6                	MULLW	0x06
00084c   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x12
00084e   f012
000850   cff4     movff	0xff4, 0x13        	MOVFF	PRODH, r0x13
000852   f013
000854   6a14     clrf	0x14, 0             	CLRF	r0x14
000856   0e0c     movlw	0xc                	MOVLW	LOW(_font8x5)
000858   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x12, F
00085a   0e00     movlw	0                  	MOVLW	HIGH(_font8x5)
00085c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x13, F
00085e   0e00     movlw	0                  	MOVLW	UPPER(_font8x5)
000860   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x14, F
000862   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000864   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x12, F
000866   6ae8     clrf	0xe8, 0             	CLRF	WREG
000868   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x13, F
00086a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00086c   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x14, F
00086e   0e01     movlw	0x1                	MOVLW	0x01
000870   6e15     movwf	0x15, 0            	MOVWF	r0x15
000872   0e00     movlw	0                  	MOVLW	0x00
000874   6e16     movwf	0x16, 0            	MOVWF	r0x16
000876   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000878   e006     bz	0x886                 	BZ	_00165_DS_
00087a   6ce8     negf	0xe8, 0             	NEGF	WREG
00087c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00166_DS_:
00087e   3615     rlcf	0x15, 0x1, 0        	RLCF	r0x15, F
000880   3616     rlcf	0x16, 0x1, 0        	RLCF	r0x16, F
000882   0f01     addlw	0x1                	ADDLW	0x01
000884   e3fc     bnc	0x87e                	BNC	_00166_DS_
                                           _00165_DS_:
000886   c012     movff	0x12, 0xff6        	MOVFF	r0x12, TBLPTRL
000888   fff6
00088a   c013     movff	0x13, 0xff7        	MOVFF	r0x13, TBLPTRH
00088c   fff7
00088e   c014     movff	0x14, 0xff8        	MOVFF	r0x14, TBLPTRU
000890   fff8
000892   0009     tblrd	*+                 	TBLRD*+	
000894   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x12
000896   f012
000898   6a13     clrf	0x13, 0             	CLRF	r0x13
00089a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00089c   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x15, F
00089e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0008a0   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x16, F
0008a2   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0008a4   e008     bz	0x8b6                 	BZ	_00168_DS_
0008a6   6ce8     negf	0xe8, 0             	NEGF	WREG
0008a8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00169_DS_:
0008aa   be16     btfsc	0x16, 0x7, 0       	BTFSC	r0x16, 7
0008ac   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0008ae   3216     rrcf	0x16, 0x1, 0        	RRCF	r0x16, F
0008b0   3215     rrcf	0x15, 0x1, 0        	RRCF	r0x15, F
0008b2   0f01     addlw	0x1                	ADDLW	0x01
0008b4   e3fa     bnc	0x8aa                	BNC	_00169_DS_
                                           _00168_DS_:
0008b6   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0008b8   1016     iorwf	0x16, 0, 0         	IORWF	r0x16, W
0008ba   e00b     bz	0x8d2                 	BZ	_00134_DS_
                                           ;	.line	88; menu_system.c	lcd_plot_pixel(x + n * FONT_WIDTH, y + line * FONT_HEIGHT);
0008bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008be   2411     addwf	0x11, 0, 0         	ADDWF	r0x11, W
0008c0   6e12     movwf	0x12, 0            	MOVWF	r0x12
0008c2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0008c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008c6   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ca   ec10     call	0x1220, 0           	CALL	_lcd_plot_pixel
0008cc   f009
0008ce   0e02     movlw	0x2                	MOVLW	0x02
0008d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00134_DS_:
                                           ;	.line	75; menu_system.c	for (y = 0; y < FONT_HEIGHT; y++) {
0008d2   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
0008d4   d75b     bra	0x78c                	BRA	_00132_DS_
                                           _00138_DS_:
                                           ;	.line	74; menu_system.c	for (x = 0; x < FONT_WIDTH; x++) {
0008d6   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
0008d8   d74e     bra	0x776                	BRA	_00136_DS_
                                           _00142_DS_:
                                           ;	.line	73; menu_system.c	for (n = 0; s[n]; n++) {
0008da   0e06     movlw	0x6                	MOVLW	0x06
0008dc   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
0008de   0e06     movlw	0x6                	MOVLW	0x06
0008e0   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0008e2   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0008e4   d72d     bra	0x740                	BRA	_00140_DS_
                                           _00144_DS_:
0008e6   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
0008e8   f016
0008ea   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0008ec   f015
0008ee   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0008f0   f014
0008f2   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0008f4   f013
0008f6   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0008f8   f012
0008fa   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0008fc   f011
0008fe   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000900   f010
000902   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000904   f00f
000906   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000908   f00e
00090a   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00090c   f00d
00090e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000910   f00c
000912   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000914   f00b
000916   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000918   f00a
00091a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00091c   f009
00091e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000920   f008
000922   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000924   f007
000926   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000928   f006
00092a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00092c   f005
00092e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000930   f004
000932   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000934   f003
000936   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000938   f002
00093a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00093c   f001
00093e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000940   f000
000942   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000944   ffd9
000946   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_menu_system__do_menu_update	code
                                           _do_menu_update:
                                           ;	.line	50; menu_system.c	void do_menu_update() {
000e08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e0a   ffe5
000e0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e0e   ffd9
000e10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e12   ffe5
000e14   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e16   ffe5
000e18   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e1a   ffe5
000e1c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e1e   ffe5
000e20   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e22   ffe5
000e24   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e26   ffe5
000e28   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e2a   ffe5
000e2c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e2e   ffe5
                                           ;	.line	54; menu_system.c	for (i = 0; i < MENU_N; i++) {
000e30   6a00     clrf	0, 0                	CLRF	r0x00
000e32   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00108_DS_:
000e34   0e07     movlw	0x7                	MOVLW	0x07
000e36   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000e38   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e3a   d06b     bra	0xf12                	BRA	_00112_DS_
                                           ;	.line	55; menu_system.c	strcpy(menu_item, " ");
000e3c   0e00     movlw	0                  	MOVLW	HIGH(_do_menu_update_menu_item_1_1)
000e3e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e40   0e96     movlw	0x96               	MOVLW	LOW(_do_menu_update_menu_item_1_1)
000e42   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e44   0e80     movlw	0x80               	MOVLW	0x80
000e46   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e48   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4c   0e06     movlw	0x6                	MOVLW	HIGH(__str_0)
000e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e50   0eae     movlw	0xae               	MOVLW	LOW(__str_0)
000e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e54   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e58   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e60   eca7     call	0x114e, 0           	CALL	_strcpy
000e62   f008
000e64   0e06     movlw	0x6                	MOVLW	0x06
000e66   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	56; menu_system.c	strcat(menu_item, menu[i].name);
000e68   0e00     movlw	0                  	MOVLW	HIGH(_do_menu_update_menu_item_1_1)
000e6a   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e6c   0e96     movlw	0x96               	MOVLW	LOW(_do_menu_update_menu_item_1_1)
000e6e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e70   0e80     movlw	0x80               	MOVLW	0x80
000e72   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e74   0e0c     movlw	0xc                	MOVLW	LOW(_menu)
000e76   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000e78   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e7a   6a06     clrf	0x6, 0              	CLRF	r0x06
000e7c   0e06     movlw	0x6                	MOVLW	HIGH(_menu)
000e7e   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000e80   6a07     clrf	0x7, 0              	CLRF	r0x07
000e82   0e00     movlw	0                  	MOVLW	UPPER(_menu)
000e84   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000e86   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
000e88   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e8a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000e8c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000e8e   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
000e90   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e94   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e98   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e9c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ea0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ea2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ea4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ea6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ea8   ec2e     call	0x105c, 0           	CALL	_strcat
000eaa   f008
000eac   0e06     movlw	0x6                	MOVLW	0x06
000eae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	58; menu_system.c	if (i == selected) {
000eb0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000eb2   0100     movlb	0                  	BANKSEL	_selected
000eb4   19ce     xorwf	0xce, 0, 0x1       	XORWF	_selected, W, B
000eb6   e115     bnz	0xee2                	BNZ	_00106_DS_
                                           ;	.line	59; menu_system.c	lcd_print(menu_item, i, INVERTED);
000eb8   0e00     movlw	0                  	MOVLW	HIGH(_do_menu_update_menu_item_1_1)
000eba   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ebc   0e96     movlw	0x96               	MOVLW	LOW(_do_menu_update_menu_item_1_1)
000ebe   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ec0   0e80     movlw	0x80               	MOVLW	0x80
000ec2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000ec4   0e01     movlw	0x1                	MOVLW	0x01
000ec6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000eca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ecc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed8   ec58     call	0x6b0, 0            	CALL	_lcd_print
000eda   f003
000edc   0e05     movlw	0x5                	MOVLW	0x05
000ede   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000ee0   d014     bra	0xf0a                	BRA	_00110_DS_
                                           _00106_DS_:
                                           ;	.line	62; menu_system.c	lcd_print(menu_item, i, NON_INVERTED);
000ee2   0e00     movlw	0                  	MOVLW	HIGH(_do_menu_update_menu_item_1_1)
000ee4   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ee6   0e96     movlw	0x96               	MOVLW	LOW(_do_menu_update_menu_item_1_1)
000ee8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000eea   0e80     movlw	0x80               	MOVLW	0x80
000eec   6e04     movwf	0x4, 0             	MOVWF	r0x04
000eee   0e00     movlw	0                  	MOVLW	0x00
000ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000efa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000efc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000efe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f02   ec58     call	0x6b0, 0            	CALL	_lcd_print
000f04   f003
000f06   0e05     movlw	0x5                	MOVLW	0x05
000f08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00110_DS_:
                                           ;	.line	54; menu_system.c	for (i = 0; i < MENU_N; i++) {
000f0a   0e17     movlw	0x17               	MOVLW	0x17
000f0c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000f0e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000f10   d791     bra	0xe34                	BRA	_00108_DS_
                                           _00112_DS_:
000f12   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000f14   f007
000f16   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000f18   f006
000f1a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000f1c   f005
000f1e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f20   f004
000f22   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f24   f003
000f26   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f28   f002
000f2a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f2c   f001
000f2e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f30   f000
000f32   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f34   ffd9
000f36   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _font8x5:
00000c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x18, 0x04, 0x64, 0x18
00000e   0000     nop                      
000010   0000     nop                      
000012   6400     cpfsgt	0, 0              
000014   0418     decf	0x18, 0, 0          
000016   1864     xorwf	0x64, 0, 0         
000018   3c00     incfsz	0, 0, 0           	DB	0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c, 0x00, 0x0c, 0x30, 0x40, 0x30, 0x0c
00001a   4040     rrncf	0x40, 0, 0         
00001c   7c20     btg	0x20, 0x6, 0         
00001e   0c00     retlw	0                  
000020   4030     rrncf	0x30, 0, 0         
000022   0c30     retlw	0x30               
000024   3c00     incfsz	0, 0, 0           	DB	0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c, 0x00, 0x00, 0x3e, 0x1c, 0x08, 0x00
000026   3040     rrcf	0x40, 0, 0          
000028   3c40     incfsz	0x40, 0, 0        
00002a   0000     nop                      
00002c   1c3e     comf	0x3e, 0, 0          
00002e   0008     tblrd	*                  
000030   0400     decf	0, 0, 0             	DB	0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04, 0x00, 0x10, 0x3c, 0x7c, 0x3c, 0x10
000032   1f1e     comf	0x1e, 0x1, 0x1      
000034   041e     decf	0x1e, 0, 0          
000036   1000     iorwf	0, 0, 0            
000038   7c3c     btg	0x3c, 0x6, 0         
00003a   103c     iorwf	0x3c, 0, 0         
00003c   2000     addwfc	0, 0, 0           	DB	0x00, 0x20, 0x40, 0x3e, 0x01, 0x02, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22
00003e   3e40     incfsz	0x40, 0x1, 0      
000040   0201     mulwf	0x1, 0             
000042   2200     addwfc	0, 0x1, 0         
000044   0814     sublw	0x14               
000046   2214     addwfc	0x14, 0x1, 0      
000048   0000     nop                      	DB	0x00, 0x00, 0x38, 0x28, 0x38, 0x00, 0x00, 0x00, 0x10, 0x38, 0x10, 0x00
00004a   2838     incf	0x38, 0, 0          
00004c   0038     dw	0x38  ;unknown opcode 
00004e   0000     nop                      
000050   3810     swapf	0x10, 0, 0         
000052   0010     retfie	0                 
000054   0000     nop                      	DB	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x78, 0x08, 0x00, 0x00
000056   1000     iorwf	0, 0, 0            
000058   0000     nop                      
00005a   0800     sublw	0                  
00005c   0878     sublw	0x78               
00005e   0000     nop                      
000060   0000     nop                      	DB	0x00, 0x00, 0x15, 0x15, 0x0a, 0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01
000062   1515     andwf	0x15, 0, 0x1       
000064   000a     tblrd	*-                 
000066   7f00     btg	0, 0x7, 0x1          
000068   097f     iorlw	0x7f               
00006a   0109     movlb	0x9                
00006c   1000     iorwf	0, 0, 0            	DB	0x00, 0x10, 0x20, 0x7f, 0x01, 0x01, 0x00, 0x04, 0x04, 0x00, 0x01, 0x1f
00006e   7f20     btg	0x20, 0x7, 0x1       
000070   0101     movlb	0x1                
000072   0400     decf	0, 0, 0             
000074   0004     clrwdt                   
000076   1f01     comf	0x1, 0x1, 0x1       
000078   0000     nop                      	DB	0x00, 0x00, 0x19, 0x15, 0x12, 0x00, 0x00, 0x40, 0x60, 0x50, 0x48, 0x44
00007a   1519     andwf	0x19, 0, 0x1       
00007c   0012     return	0                 
00007e   4000     rrncf	0, 0, 0            
000080   5060     movf	0x60, 0, 0          
000082   4448     rlncf	0x48, 0, 0         
000084   0600     decf	0, 0x1, 0           	DB	0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x0f, 0x02, 0x01, 0x01, 0x00
000086   0909     iorlw	0x9                
000088   0006     pop                      
00008a   0f00     addlw	0                  
00008c   0102     movlb	0x2                
00008e   0001     dw	0x1  ;unknown opcode  
000090   0000     nop                      	DB	0x00, 0x00, 0x01, 0x1f, 0x01, 0x00, 0x00, 0x44, 0x44, 0x4a, 0x4a, 0x51
000092   1f01     comf	0x1, 0x1, 0x1       
000094   0001     dw	0x1  ;unknown opcode  
000096   4400     rlncf	0, 0, 0            
000098   4a44     infsnz	0x44, 0x1, 0      
00009a   514a     movf	0x4a, 0, 0x1        
00009c   1400     andwf	0, 0, 0            	DB	0x00, 0x14, 0x74, 0x1c, 0x17, 0x14, 0x00, 0x51, 0x4a, 0x4a, 0x44, 0x44
00009e   1c74     comf	0x74, 0, 0          
0000a0   1417     andwf	0x17, 0, 0         
0000a2   5100     movf	0, 0, 0x1           
0000a4   4a4a     infsnz	0x4a, 0x1, 0      
0000a6   4444     rlncf	0x44, 0, 0         
0000a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x7c, 0x54, 0x54, 0x44
0000aa   0400     decf	0, 0, 0             
0000ac   0404     decf	0x4, 0, 0           
0000ae   0000     nop                      
0000b0   547c     subfwb	0x7c, 0, 0        
0000b2   4454     rlncf	0x54, 0, 0         
0000b4   0800     sublw	0                  	DB	0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08, 0x00, 0x7c, 0x00, 0x7c, 0x44, 0x7c
0000b6   2a08     incf	0x8, 0x1, 0         
0000b8   081c     sublw	0x1c               
0000ba   7c00     btg	0, 0x6, 0            
0000bc   7c00     btg	0, 0x6, 0            
0000be   7c44     btg	0x44, 0x6, 0         
0000c0   0400     decf	0, 0, 0             	DB	0x00, 0x04, 0x02, 0x7f, 0x02, 0x04, 0x00, 0x10, 0x20, 0x7f, 0x20, 0x10
0000c2   7f02     btg	0x2, 0x7, 0x1        
0000c4   0402     decf	0x2, 0, 0           
0000c6   1000     iorwf	0, 0, 0            
0000c8   7f20     btg	0x20, 0x7, 0x1       
0000ca   1020     iorwf	0x20, 0, 0         
0000cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00
0000ce   0000     nop                      
0000d0   0000     nop                      
0000d2   0000     nop                      
0000d4   6f00     movwf	0, 0x1             
0000d6   0000     nop                      
0000d8   0000     nop                      	DB	0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14
0000da   0007     daw                      
0000dc   0007     daw                      
0000de   1400     andwf	0, 0, 0            
0000e0   147f     andwf	0x7f, 0, 0         
0000e2   147f     andwf	0x7f, 0, 0         
0000e4   0000     nop                      	DB	0x00, 0x00, 0x07, 0x04, 0x1e, 0x00, 0x00, 0x23, 0x13, 0x08, 0x64, 0x62
0000e6   0407     decf	0x7, 0, 0           
0000e8   001e     dw	0x1e  ;unknown opcode 
0000ea   2300     addwfc	0, 0x1, 0x1       
0000ec   0813     sublw	0x13               
0000ee   6264     cpfseq	0x64, 0           
0000f0   3600     rlcf	0, 0x1, 0           	DB	0x00, 0x36, 0x49, 0x56, 0x20, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00
0000f2   5649     subfwb	0x49, 0x1, 0      
0000f4   5020     movf	0x20, 0, 0          
0000f6   0000     nop                      
0000f8   0700     decf	0, 0x1, 0x1         
0000fa   0000     nop                      
0000fc   0000     nop                      	DB	0x00, 0x00, 0x1c, 0x22, 0x41, 0x00, 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00
0000fe   221c     addwfc	0x1c, 0x1, 0      
000100   0041     dw	0x41  ;unknown opcode 
000102   0000     nop                      
000104   2241     addwfc	0x41, 0x1, 0      
000106   001c     dw	0x1c  ;unknown opcode 
000108   1400     andwf	0, 0, 0            	DB	0x00, 0x14, 0x08, 0x3e, 0x08, 0x14, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08
00010a   3e08     incfsz	0x8, 0x1, 0       
00010c   1408     andwf	0x8, 0, 0          
00010e   0800     sublw	0                  
000110   3e08     incfsz	0x8, 0x1, 0       
000112   0808     sublw	0x8                
000114   0000     nop                      	DB	0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08
000116   3050     rrcf	0x50, 0, 0          
000118   0000     nop                      
00011a   0800     sublw	0                  
00011c   0808     sublw	0x8                
00011e   0808     sublw	0x8                
000120   0000     nop                      	DB	0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02
000122   6060     cpfslt	0x60, 0           
000124   0000     nop                      
000126   2000     addwfc	0, 0, 0           
000128   0810     sublw	0x10               
00012a   0204     mulwf	0x4, 0             
00012c   3e00     incfsz	0, 0x1, 0         	DB	0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e, 0x00, 0x00, 0x42, 0x7f, 0x40, 0x00
00012e   4951     infsnz	0x51, 0, 0x1      
000130   3e45     incfsz	0x45, 0x1, 0      
000132   0000     nop                      
000134   7f42     btg	0x42, 0x7, 0x1       
000136   0040     dw	0x40  ;unknown opcode 
000138   4200     rrncf	0, 0x1, 0          	DB	0x00, 0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x21, 0x41, 0x45, 0x4b, 0x31
00013a   5161     movf	0x61, 0, 0x1        
00013c   4649     rlncf	0x49, 0x1, 0       
00013e   2100     addwfc	0, 0, 0x1         
000140   4541     rlncf	0x41, 0, 0x1       
000142   314b     rrcf	0x4b, 0, 0x1        
000144   1800     xorwf	0, 0, 0            	DB	0x00, 0x18, 0x14, 0x12, 0x7f, 0x10, 0x00, 0x27, 0x45, 0x45, 0x45, 0x39
000146   1214     iorwf	0x14, 0x1, 0       
000148   107f     iorwf	0x7f, 0, 0         
00014a   2700     addwf	0, 0x1, 0x1        
00014c   4545     rlncf	0x45, 0, 0x1       
00014e   3945     swapf	0x45, 0, 0x1       
000150   3c00     incfsz	0, 0, 0           	DB	0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30, 0x00, 0x01, 0x71, 0x09, 0x05, 0x03
000152   494a     infsnz	0x4a, 0, 0x1      
000154   3049     rrcf	0x49, 0, 0          
000156   0100     movlb	0                  
000158   0971     iorlw	0x71               
00015a   0305     mulwf	0x5, 0x1           
00015c   3600     rlcf	0, 0x1, 0           	DB	0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x06, 0x49, 0x49, 0x29, 0x1e
00015e   4949     infsnz	0x49, 0, 0x1      
000160   3649     rlcf	0x49, 0x1, 0        
000162   0600     decf	0, 0x1, 0           
000164   4949     infsnz	0x49, 0, 0x1      
000166   1e29     comf	0x29, 0x1, 0        
000168   0000     nop                      	DB	0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x56, 0x36, 0x00, 0x00
00016a   3636     rlcf	0x36, 0x1, 0        
00016c   0000     nop                      
00016e   0000     nop                      
000170   3656     rlcf	0x56, 0x1, 0        
000172   0000     nop                      
000174   0800     sublw	0                  	DB	0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x14, 0x14, 0x14, 0x14, 0x14
000176   2214     addwfc	0x14, 0x1, 0      
000178   0041     dw	0x41  ;unknown opcode 
00017a   1400     andwf	0, 0, 0            
00017c   1414     andwf	0x14, 0, 0         
00017e   1414     andwf	0x14, 0, 0         
000180   0000     nop                      	DB	0x00, 0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x02, 0x01, 0x51, 0x09, 0x06
000182   2241     addwfc	0x41, 0x1, 0      
000184   0814     sublw	0x14               
000186   0200     mulwf	0, 0               
000188   5101     movf	0x1, 0, 0x1         
00018a   0609     decf	0x9, 0x1, 0         
00018c   3e00     incfsz	0, 0x1, 0         	DB	0x00, 0x3e, 0x41, 0x5d, 0x49, 0x4e, 0x00, 0x7e, 0x09, 0x09, 0x09, 0x7e
00018e   5d41     subwf	0x41, 0, 0x1       
000190   4e49     dcfsnz	0x49, 0x1, 0      
000192   7e00     btg	0, 0x7, 0            
000194   0909     iorlw	0x9                
000196   7e09     btg	0x9, 0x7, 0          
000198   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x49, 0x49, 0x49, 0x36, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x22
00019a   4949     infsnz	0x49, 0, 0x1      
00019c   3649     rlcf	0x49, 0x1, 0        
00019e   3e00     incfsz	0, 0x1, 0         
0001a0   4141     rrncf	0x41, 0, 0x1       
0001a2   2241     addwfc	0x41, 0x1, 0      
0001a4   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x7f, 0x49, 0x49, 0x49, 0x41
0001a6   4141     rrncf	0x41, 0, 0x1       
0001a8   3e41     incfsz	0x41, 0x1, 0      
0001aa   7f00     btg	0, 0x7, 0x1          
0001ac   4949     infsnz	0x49, 0, 0x1      
0001ae   4149     rrncf	0x49, 0, 0x1       
0001b0   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x09, 0x09, 0x09, 0x01, 0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a
0001b2   0909     iorlw	0x9                
0001b4   0109     movlb	0x9                
0001b6   3e00     incfsz	0, 0x1, 0         
0001b8   4941     infsnz	0x41, 0, 0x1      
0001ba   7a49     btg	0x49, 0x5, 0         
0001bc   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x41, 0x7f, 0x41, 0x00
0001be   0808     sublw	0x8                
0001c0   7f08     btg	0x8, 0x7, 0x1        
0001c2   0000     nop                      
0001c4   7f41     btg	0x41, 0x7, 0x1       
0001c6   0041     dw	0x41  ;unknown opcode 
0001c8   2000     addwfc	0, 0, 0           	DB	0x00, 0x20, 0x40, 0x41, 0x3f, 0x01, 0x00, 0x7f, 0x08, 0x14, 0x22, 0x41
0001ca   4140     rrncf	0x40, 0, 0x1       
0001cc   013f     movlb	0x3f               
0001ce   7f00     btg	0, 0x7, 0x1          
0001d0   1408     andwf	0x8, 0, 0          
0001d2   4122     rrncf	0x22, 0, 0x1       
0001d4   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f
0001d6   4040     rrncf	0x40, 0, 0         
0001d8   4040     rrncf	0x40, 0, 0         
0001da   7f00     btg	0, 0x7, 0x1          
0001dc   0c02     retlw	0x2                
0001de   7f02     btg	0x2, 0x7, 0x1        
0001e0   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e
0001e2   0804     sublw	0x4                
0001e4   7f10     btg	0x10, 0x7, 0x1       
0001e6   3e00     incfsz	0, 0x1, 0         
0001e8   4141     rrncf	0x41, 0, 0x1       
0001ea   3e41     incfsz	0x41, 0x1, 0      
0001ec   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x09, 0x09, 0x09, 0x06, 0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e
0001ee   0909     iorlw	0x9                
0001f0   0609     decf	0x9, 0x1, 0         
0001f2   3e00     incfsz	0, 0x1, 0         
0001f4   5141     movf	0x41, 0, 0x1        
0001f6   5e21     subwf	0x21, 0x1, 0       
0001f8   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x09, 0x19, 0x29, 0x46, 0x00, 0x46, 0x49, 0x49, 0x49, 0x31
0001fa   1909     xorwf	0x9, 0, 0x1        
0001fc   4629     rlncf	0x29, 0x1, 0       
0001fe   4600     rlncf	0, 0x1, 0          
000200   4949     infsnz	0x49, 0, 0x1      
000202   3149     rrcf	0x49, 0, 0x1        
000204   0100     movlb	0                  	DB	0x00, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f
000206   7f01     btg	0x1, 0x7, 0x1        
000208   0101     movlb	0x1                
00020a   3f00     incfsz	0, 0x1, 0x1       
00020c   4040     rrncf	0x40, 0, 0         
00020e   3f40     incfsz	0x40, 0x1, 0x1    
000210   0f00     addlw	0                  	DB	0x00, 0x0f, 0x30, 0x40, 0x30, 0x0f, 0x00, 0x3f, 0x40, 0x30, 0x40, 0x3f
000212   4030     rrncf	0x30, 0, 0         
000214   0f30     addlw	0x30               
000216   3f00     incfsz	0, 0x1, 0x1       
000218   3040     rrcf	0x40, 0, 0          
00021a   3f40     incfsz	0x40, 0x1, 0x1    
00021c   6300     cpfseq	0, 0x1            	DB	0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x07, 0x08, 0x70, 0x08, 0x07
00021e   0814     sublw	0x14               
000220   6314     cpfseq	0x14, 0x1         
000222   0700     decf	0, 0x1, 0x1         
000224   7008     btg	0x8, 0, 0            
000226   0708     decf	0x8, 0x1, 0x1       
000228   6100     cpfslt	0, 0x1            	DB	0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x3c, 0x4a, 0x49, 0x29, 0x1e
00022a   4951     infsnz	0x51, 0, 0x1      
00022c   4345     rrncf	0x45, 0x1, 0x1     
00022e   3c00     incfsz	0, 0, 0           
000230   494a     infsnz	0x4a, 0, 0x1      
000232   1e29     comf	0x29, 0x1, 0        
000234   0200     mulwf	0, 0               	DB	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x41, 0x7f, 0x00, 0x00
000236   0804     sublw	0x4                
000238   2010     addwfc	0x10, 0, 0        
00023a   0000     nop                      
00023c   7f41     btg	0x41, 0x7, 0x1       
00023e   0000     nop                      
000240   0400     decf	0, 0, 0             	DB	0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40
000242   0102     movlb	0x2                
000244   0402     decf	0x2, 0, 0           
000246   4000     rrncf	0, 0, 0            
000248   4040     rrncf	0x40, 0, 0         
00024a   4040     rrncf	0x40, 0, 0         
00024c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x20, 0x54, 0x54, 0x54, 0x78
00024e   0300     mulwf	0, 0x1             
000250   0004     clrwdt                   
000252   2000     addwfc	0, 0, 0           
000254   5454     subfwb	0x54, 0, 0        
000256   7854     btg	0x54, 0x4, 0         
000258   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x48, 0x44, 0x44, 0x38, 0x00, 0x38, 0x44, 0x44, 0x44, 0x20
00025a   4448     rlncf	0x48, 0, 0         
00025c   3844     swapf	0x44, 0, 0         
00025e   3800     swapf	0, 0, 0            
000260   4444     rlncf	0x44, 0, 0         
000262   2044     addwfc	0x44, 0, 0        
000264   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x44, 0x44, 0x48, 0x7f, 0x00, 0x38, 0x54, 0x54, 0x54, 0x18
000266   4444     rlncf	0x44, 0, 0         
000268   7f48     btg	0x48, 0x7, 0x1       
00026a   3800     swapf	0, 0, 0            
00026c   5454     subfwb	0x54, 0, 0        
00026e   1854     xorwf	0x54, 0, 0         
000270   0800     sublw	0                  	DB	0x00, 0x08, 0x7e, 0x09, 0x01, 0x02, 0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e
000272   097e     iorlw	0x7e               
000274   0201     mulwf	0x1, 0             
000276   0c00     retlw	0                  
000278   5252     movf	0x52, 0x1, 0        
00027a   3e52     incfsz	0x52, 0x1, 0      
00027c   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00, 0x44, 0x7d, 0x40, 0x00
00027e   0408     decf	0x8, 0, 0           
000280   7804     btg	0x4, 0x4, 0          
000282   0000     nop                      
000284   7d44     btg	0x44, 0x6, 0x1       
000286   0040     dw	0x40  ;unknown opcode 
000288   2000     addwfc	0, 0, 0           	DB	0x00, 0x20, 0x40, 0x44, 0x3d, 0x00, 0x00, 0x00, 0x7f, 0x10, 0x28, 0x44
00028a   4440     rlncf	0x40, 0, 0         
00028c   003d     dw	0x3d  ;unknown opcode 
00028e   0000     nop                      
000290   107f     iorwf	0x7f, 0, 0         
000292   4428     rlncf	0x28, 0, 0         
000294   0000     nop                      	DB	0x00, 0x00, 0x41, 0x7f, 0x40, 0x00, 0x00, 0x7c, 0x04, 0x18, 0x04, 0x78
000296   7f41     btg	0x41, 0x7, 0x1       
000298   0040     dw	0x40  ;unknown opcode 
00029a   7c00     btg	0, 0x6, 0            
00029c   1804     xorwf	0x4, 0, 0          
00029e   7804     btg	0x4, 0x4, 0          
0002a0   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x08, 0x04, 0x04, 0x78, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38
0002a2   0408     decf	0x8, 0, 0           
0002a4   7804     btg	0x4, 0x4, 0          
0002a6   3800     swapf	0, 0, 0            
0002a8   4444     rlncf	0x44, 0, 0         
0002aa   3844     swapf	0x44, 0, 0         
0002ac   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x14, 0x14, 0x14, 0x08, 0x00, 0x08, 0x14, 0x14, 0x18, 0x7c
0002ae   1414     andwf	0x14, 0, 0         
0002b0   0814     sublw	0x14               
0002b2   0800     sublw	0                  
0002b4   1414     andwf	0x14, 0, 0         
0002b6   7c18     btg	0x18, 0x6, 0         
0002b8   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x08, 0x04, 0x04, 0x08, 0x00, 0x48, 0x54, 0x54, 0x54, 0x20
0002ba   0408     decf	0x8, 0, 0           
0002bc   0804     sublw	0x4                
0002be   4800     infsnz	0, 0, 0           
0002c0   5454     subfwb	0x54, 0, 0        
0002c2   2054     addwfc	0x54, 0, 0        
0002c4   0400     decf	0, 0, 0             	DB	0x00, 0x04, 0x3f, 0x44, 0x40, 0x20, 0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c
0002c6   443f     rlncf	0x3f, 0, 0         
0002c8   2040     addwfc	0x40, 0, 0        
0002ca   3c00     incfsz	0, 0, 0           
0002cc   4040     rrncf	0x40, 0, 0         
0002ce   7c20     btg	0x20, 0x6, 0         
0002d0   1c00     comf	0, 0, 0             	DB	0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c, 0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c
0002d2   4020     rrncf	0x20, 0, 0         
0002d4   1c20     comf	0x20, 0, 0          
0002d6   3c00     incfsz	0, 0, 0           
0002d8   3040     rrcf	0x40, 0, 0          
0002da   3c40     incfsz	0x40, 0, 0        
0002dc   4400     rlncf	0, 0, 0            	DB	0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c
0002de   1028     iorwf	0x28, 0, 0         
0002e0   4428     rlncf	0x28, 0, 0         
0002e2   0c00     retlw	0                  
0002e4   5050     movf	0x50, 0, 0          
0002e6   3c50     incfsz	0x50, 0, 0        
0002e8   4400     rlncf	0, 0, 0            	DB	0x00, 0x44, 0x64, 0x54, 0x4c, 0x44, 0x00, 0x00, 0x08, 0x36, 0x41, 0x41
0002ea   5464     subfwb	0x64, 0, 0        
0002ec   444c     rlncf	0x4c, 0, 0         
0002ee   0000     nop                      
0002f0   3608     rlcf	0x8, 0x1, 0         
0002f2   4141     rrncf	0x41, 0, 0x1       
0002f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x41, 0x41, 0x36, 0x08, 0x00
0002f6   7f00     btg	0, 0x7, 0x1          
0002f8   0000     nop                      
0002fa   4100     rrncf	0, 0, 0x1          
0002fc   3641     rlcf	0x41, 0x1, 0        
0002fe   0008     tblrd	*                  
000300   0400     decf	0, 0, 0             	DB	0x00, 0x04, 0x02, 0x04, 0x08, 0x04, 0x00, 0x7f, 0x6b, 0x6b, 0x6b, 0x7f
000302   0402     decf	0x2, 0, 0           
000304   0408     decf	0x8, 0, 0           
000306   7f00     btg	0, 0x7, 0x1          
000308   6b6b     clrf	0x6b, 0x1           
00030a   7f6b     btg	0x6b, 0x7, 0x1       
00030c   0000     nop                      	DB	0x00, 0x00, 0x7c, 0x44, 0x7c, 0x00, 0x00, 0x00, 0x08, 0x7c, 0x00, 0x00
00030e   447c     rlncf	0x7c, 0, 0         
000310   007c     dw	0x7c  ;unknown opcode 
000312   0000     nop                      
000314   7c08     btg	0x8, 0x6, 0          
000316   0000     nop                      
000318   0000     nop                      	DB	0x00, 0x00, 0x64, 0x54, 0x48, 0x00, 0x00, 0x00, 0x44, 0x54, 0x28, 0x00
00031a   5464     subfwb	0x64, 0, 0        
00031c   0048     dw	0x48  ;unknown opcode 
00031e   0000     nop                      
000320   5444     subfwb	0x44, 0, 0        
000322   0028     dw	0x28  ;unknown opcode 
000324   0000     nop                      	DB	0x00, 0x00, 0x1c, 0x10, 0x78, 0x00, 0x00, 0x00, 0x5c, 0x54, 0x24, 0x00
000326   101c     iorwf	0x1c, 0, 0         
000328   0078     dw	0x78  ;unknown opcode 
00032a   0000     nop                      
00032c   545c     subfwb	0x5c, 0, 0        
00032e   0024     dw	0x24  ;unknown opcode 
000330   0000     nop                      	DB	0x00, 0x00, 0x78, 0x54, 0x74, 0x00, 0x00, 0x00, 0x64, 0x14, 0x0c, 0x00
000332   5478     subfwb	0x78, 0, 0        
000334   0074     dw	0x74  ;unknown opcode 
000336   0000     nop                      
000338   1464     andwf	0x64, 0, 0         
00033a   000c     tblwt	*                  
00033c   0000     nop                      	DB	0x00, 0x00, 0x7c, 0x54, 0x7c, 0x00, 0x00, 0x00, 0x5c, 0x54, 0x3c, 0x00
00033e   547c     subfwb	0x7c, 0, 0        
000340   007c     dw	0x7c  ;unknown opcode 
000342   0000     nop                      
000344   545c     subfwb	0x5c, 0, 0        
000346   003c     dw	0x3c  ;unknown opcode 
000348   7800     btg	0, 0x4, 0            	DB	0x00, 0x78, 0x24, 0x26, 0x25, 0x78, 0x00, 0x78, 0x25, 0x26, 0x24, 0x78
00034a   2624     addwf	0x24, 0x1, 0       
00034c   7825     btg	0x25, 0x4, 0         
00034e   7800     btg	0, 0x4, 0            
000350   2625     addwf	0x25, 0x1, 0       
000352   7824     btg	0x24, 0x4, 0         
000354   7000     btg	0, 0, 0              	DB	0x00, 0x70, 0x2a, 0x29, 0x2a, 0x70, 0x00, 0x78, 0x25, 0x24, 0x25, 0x78
000356   292a     incf	0x2a, 0, 0x1        
000358   702a     btg	0x2a, 0, 0           
00035a   7800     btg	0, 0x4, 0            
00035c   2425     addwf	0x25, 0, 0         
00035e   7825     btg	0x25, 0x4, 0         
000360   2000     addwfc	0, 0, 0           	DB	0x00, 0x20, 0x54, 0x56, 0x55, 0x78, 0x00, 0x20, 0x55, 0x56, 0x54, 0x78
000362   5654     subfwb	0x54, 0x1, 0      
000364   7855     btg	0x55, 0x4, 0         
000366   2000     addwfc	0, 0, 0           
000368   5655     subfwb	0x55, 0x1, 0      
00036a   7854     btg	0x54, 0x4, 0         
00036c   2000     addwfc	0, 0, 0           	DB	0x00, 0x20, 0x56, 0x55, 0x56, 0x78, 0x00, 0x20, 0x55, 0x54, 0x55, 0x78
00036e   5556     subfwb	0x56, 0, 0x1      
000370   7856     btg	0x56, 0x4, 0         
000372   2000     addwfc	0, 0, 0           
000374   5455     subfwb	0x55, 0, 0        
000376   7855     btg	0x55, 0x4, 0         
000378   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x54, 0x56, 0x55, 0x44, 0x00, 0x7c, 0x55, 0x56, 0x54, 0x44
00037a   5654     subfwb	0x54, 0x1, 0      
00037c   4455     rlncf	0x55, 0, 0         
00037e   7c00     btg	0, 0x6, 0            
000380   5655     subfwb	0x55, 0x1, 0      
000382   4454     rlncf	0x54, 0, 0         
000384   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x56, 0x55, 0x56, 0x44, 0x00, 0x7c, 0x55, 0x54, 0x55, 0x44
000386   5556     subfwb	0x56, 0, 0x1      
000388   4456     rlncf	0x56, 0, 0         
00038a   7c00     btg	0, 0x6, 0            
00038c   5455     subfwb	0x55, 0, 0        
00038e   4455     rlncf	0x55, 0, 0         
000390   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x54, 0x56, 0x55, 0x18, 0x00, 0x38, 0x55, 0x56, 0x54, 0x18
000392   5654     subfwb	0x54, 0x1, 0      
000394   1855     xorwf	0x55, 0, 0         
000396   3800     swapf	0, 0, 0            
000398   5655     subfwb	0x55, 0x1, 0      
00039a   1854     xorwf	0x54, 0, 0         
00039c   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x56, 0x55, 0x56, 0x18, 0x00, 0x38, 0x55, 0x54, 0x55, 0x18
00039e   5556     subfwb	0x56, 0, 0x1      
0003a0   1856     xorwf	0x56, 0, 0         
0003a2   3800     swapf	0, 0, 0            
0003a4   5455     subfwb	0x55, 0, 0        
0003a6   1855     xorwf	0x55, 0, 0         
0003a8   0000     nop                      	DB	0x00, 0x00, 0x44, 0x7e, 0x45, 0x00, 0x00, 0x00, 0x45, 0x7e, 0x44, 0x00
0003aa   7e44     btg	0x44, 0x7, 0         
0003ac   0045     dw	0x45  ;unknown opcode 
0003ae   0000     nop                      
0003b0   7e45     btg	0x45, 0x7, 0         
0003b2   0044     dw	0x44  ;unknown opcode 
0003b4   0000     nop                      	DB	0x00, 0x00, 0x46, 0x7d, 0x46, 0x00, 0x00, 0x00, 0x45, 0x7c, 0x45, 0x00
0003b6   7d46     btg	0x46, 0x6, 0x1       
0003b8   0046     dw	0x46  ;unknown opcode 
0003ba   0000     nop                      
0003bc   7c45     btg	0x45, 0x6, 0         
0003be   0045     dw	0x45  ;unknown opcode 
0003c0   0000     nop                      	DB	0x00, 0x00, 0x48, 0x7a, 0x41, 0x00, 0x00, 0x00, 0x49, 0x7a, 0x40, 0x00
0003c2   7a48     btg	0x48, 0x5, 0         
0003c4   0041     dw	0x41  ;unknown opcode 
0003c6   0000     nop                      
0003c8   7a49     btg	0x49, 0x5, 0         
0003ca   0040     dw	0x40  ;unknown opcode 
0003cc   0000     nop                      	DB	0x00, 0x00, 0x4a, 0x79, 0x42, 0x00, 0x00, 0x00, 0x49, 0x78, 0x41, 0x00
0003ce   794a     btg	0x4a, 0x4, 0x1       
0003d0   0042     dw	0x42  ;unknown opcode 
0003d2   0000     nop                      
0003d4   7849     btg	0x49, 0x4, 0         
0003d6   0041     dw	0x41  ;unknown opcode 
0003d8   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x44, 0x46, 0x45, 0x38, 0x00, 0x38, 0x45, 0x46, 0x44, 0x38
0003da   4644     rlncf	0x44, 0x1, 0       
0003dc   3845     swapf	0x45, 0, 0         
0003de   3800     swapf	0, 0, 0            
0003e0   4645     rlncf	0x45, 0x1, 0       
0003e2   3844     swapf	0x44, 0, 0         
0003e4   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x46, 0x45, 0x46, 0x38, 0x00, 0x38, 0x45, 0x44, 0x45, 0x38
0003e6   4546     rlncf	0x46, 0, 0x1       
0003e8   3846     swapf	0x46, 0, 0         
0003ea   3800     swapf	0, 0, 0            
0003ec   4445     rlncf	0x45, 0, 0         
0003ee   3845     swapf	0x45, 0, 0         
0003f0   3000     rrcf	0, 0, 0             	DB	0x00, 0x30, 0x48, 0x4a, 0x49, 0x30, 0x00, 0x30, 0x49, 0x4a, 0x48, 0x30
0003f2   4a48     infsnz	0x48, 0x1, 0      
0003f4   3049     rrcf	0x49, 0, 0          
0003f6   3000     rrcf	0, 0, 0             
0003f8   4a49     infsnz	0x49, 0x1, 0      
0003fa   3048     rrcf	0x48, 0, 0          
0003fc   3000     rrcf	0, 0, 0             	DB	0x00, 0x30, 0x4a, 0x49, 0x4a, 0x30, 0x00, 0x30, 0x49, 0x48, 0x49, 0x30
0003fe   494a     infsnz	0x4a, 0, 0x1      
000400   304a     rrcf	0x4a, 0, 0          
000402   3000     rrcf	0, 0, 0             
000404   4849     infsnz	0x49, 0, 0        
000406   3049     rrcf	0x49, 0, 0          
000408   3c00     incfsz	0, 0, 0           	DB	0x00, 0x3c, 0x40, 0x42, 0x41, 0x3c, 0x00, 0x3c, 0x41, 0x42, 0x40, 0x3c
00040a   4240     rrncf	0x40, 0x1, 0       
00040c   3c41     incfsz	0x41, 0, 0        
00040e   3c00     incfsz	0, 0, 0           
000410   4241     rrncf	0x41, 0x1, 0       
000412   3c40     incfsz	0x40, 0, 0        
000414   3c00     incfsz	0, 0, 0           	DB	0x00, 0x3c, 0x42, 0x41, 0x42, 0x3c, 0x00, 0x3c, 0x41, 0x40, 0x41, 0x3c
000416   4142     rrncf	0x42, 0, 0x1       
000418   3c42     incfsz	0x42, 0, 0        
00041a   3c00     incfsz	0, 0, 0           
00041c   4041     rrncf	0x41, 0, 0         
00041e   3c41     incfsz	0x41, 0, 0        
000420   3c00     incfsz	0, 0, 0           	DB	0x00, 0x3c, 0x40, 0x42, 0x21, 0x7c, 0x00, 0x3c, 0x41, 0x42, 0x20, 0x7c
000422   4240     rrncf	0x40, 0x1, 0       
000424   7c21     btg	0x21, 0x6, 0         
000426   3c00     incfsz	0, 0, 0           
000428   4241     rrncf	0x41, 0x1, 0       
00042a   7c20     btg	0x20, 0x6, 0         
00042c   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x42, 0x41, 0x22, 0x78, 0x00, 0x3c, 0x41, 0x40, 0x21, 0x7c
00042e   4142     rrncf	0x42, 0, 0x1       
000430   7822     btg	0x22, 0x4, 0         
000432   3c00     incfsz	0, 0, 0           
000434   4041     rrncf	0x41, 0, 0         
000436   7c21     btg	0x21, 0x6, 0         
000438   4e00     dcfsnz	0, 0x1, 0         	DB	0x00, 0x4e, 0x51, 0x71, 0x11, 0x0a, 0x00, 0x58, 0x64, 0x64, 0x24, 0x10
00043a   7151     btg	0x51, 0, 0x1         
00043c   0a11     xorlw	0x11               
00043e   5800     subwfb	0, 0, 0           
000440   6464     cpfsgt	0x64, 0           
000442   1024     iorwf	0x24, 0, 0         
000444   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x0a, 0x11, 0x22, 0x7d, 0x00, 0x78, 0x12, 0x09, 0x0a, 0x71
000446   110a     iorwf	0xa, 0, 0x1        
000448   7d22     btg	0x22, 0x6, 0x1       
00044a   7800     btg	0, 0x4, 0            
00044c   0912     iorlw	0x12               
00044e   710a     btg	0xa, 0, 0x1          
000450   0000     nop                      	DB	0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00
000452   0400     decf	0, 0, 0             
000454   0102     movlb	0x2                
000456   0100     movlb	0                  
000458   0402     decf	0x2, 0, 0           
00045a   0000     nop                      
00045c   0000     nop                      	DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x30, 0x48, 0x45, 0x40, 0x20
00045e   0002     dw	0x2  ;unknown opcode  
000460   0002     dw	0x2  ;unknown opcode  
000462   3000     rrcf	0, 0, 0             
000464   4548     rlncf	0x48, 0, 0x1       
000466   2040     addwfc	0x40, 0, 0        
000468   0000     nop                      	DB	0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x38, 0x44
00046a   7b00     btg	0, 0x5, 0x1          
00046c   0000     nop                      
00046e   3800     swapf	0, 0, 0            
000470   4444     rlncf	0x44, 0, 0         
000472   4438     rlncf	0x38, 0, 0         
000474   4000     rrncf	0, 0, 0            	DB	0x00, 0x40, 0x3e, 0x49, 0x49, 0x36, 0x00, 0x08, 0x04, 0x08, 0x70, 0x0c
000476   493e     infsnz	0x3e, 0, 0x1      
000478   3649     rlcf	0x49, 0x1, 0        
00047a   0800     sublw	0                  
00047c   0804     sublw	0x4                
00047e   0c70     retlw	0x70               
000480   6000     cpfslt	0, 0              	DB	0x00, 0x60, 0x50, 0x48, 0x50, 0x60, 0x00, 0x20, 0x52, 0x55, 0x59, 0x30
000482   4850     infsnz	0x50, 0, 0        
000484   6050     cpfslt	0x50, 0           
000486   2000     addwfc	0, 0, 0           
000488   5552     subfwb	0x52, 0, 0x1      
00048a   3059     rrcf	0x59, 0, 0          
00048c   3800     swapf	0, 0, 0            	DB	0x00, 0x38, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x41, 0x00
00048e   5454     subfwb	0x54, 0, 0        
000490   0054     dw	0x54  ;unknown opcode 
000492   0000     nop                      
000494   7f00     btg	0, 0x7, 0x1          
000496   0041     dw	0x41  ;unknown opcode 
000498   4000     rrncf	0, 0, 0            	DB	0x00, 0x40, 0x22, 0x14, 0x18, 0x60, 0x00, 0x7c, 0x20, 0x20, 0x1c, 0x20
00049a   1422     andwf	0x22, 0, 0         
00049c   6018     cpfslt	0x18, 0           
00049e   7c00     btg	0, 0x6, 0            
0004a0   2020     addwfc	0x20, 0, 0        
0004a2   201c     addwfc	0x1c, 0, 0        
0004a4   4400     rlncf	0, 0, 0            	DB	0x00, 0x44, 0x3c, 0x04, 0x7c, 0x44, 0x00, 0x40, 0x3c, 0x12, 0x12, 0x0c
0004a6   043c     decf	0x3c, 0, 0          
0004a8   447c     rlncf	0x7c, 0, 0         
0004aa   4000     rrncf	0, 0, 0            
0004ac   123c     iorwf	0x3c, 0x1, 0       
0004ae   0c12     retlw	0x12               
0004b0   4100     rrncf	0, 0, 0x1          	DB	0x00, 0x41, 0x63, 0x55, 0x49, 0x41, 0x00, 0x38, 0x44, 0x44, 0x3c, 0x04
0004b2   5563     subfwb	0x63, 0, 0x1      
0004b4   4149     rrncf	0x49, 0, 0x1       
0004b6   3800     swapf	0, 0, 0            
0004b8   4444     rlncf	0x44, 0, 0         
0004ba   043c     decf	0x3c, 0, 0          
0004bc   0800     sublw	0                  	DB	0x00, 0x08, 0x04, 0x3c, 0x44, 0x24, 0x00, 0x08, 0x14, 0x7f, 0x14, 0x08
0004be   3c04     incfsz	0x4, 0, 0         
0004c0   2444     addwf	0x44, 0, 0         
0004c2   0800     sublw	0                  
0004c4   7f14     btg	0x14, 0x7, 0x1       
0004c6   0814     sublw	0x14               
0004c8   4e00     dcfsnz	0, 0x1, 0         	DB	0x00, 0x4e, 0x71, 0x01, 0x71, 0x4e, 0x00, 0x45, 0x29, 0x11, 0x29, 0x45
0004ca   0171     movlb	0x71               
0004cc   4e71     dcfsnz	0x71, 0x1, 0      
0004ce   4500     rlncf	0, 0, 0x1          
0004d0   1129     iorwf	0x29, 0, 0x1       
0004d2   4529     rlncf	0x29, 0, 0x1       
0004d4   0d00     mullw	0                  	DB	0x00, 0x0d, 0x51, 0x51, 0x51, 0x3d, 0x00, 0x00, 0x00, 0x05, 0x02, 0x05
0004d6   5151     movf	0x51, 0, 0x1        
0004d8   3d51     incfsz	0x51, 0, 0x1      
0004da   0000     nop                      
0004dc   0500     decf	0, 0, 0x1           
0004de   0502     decf	0x2, 0, 0x1         
0004e0   4000     rrncf	0, 0, 0            	DB	0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0x1c, 0x3e, 0x00
0004e2   4000     rrncf	0, 0, 0            
0004e4   4000     rrncf	0, 0, 0            
0004e6   0000     nop                      
0004e8   1c08     comf	0x8, 0, 0           
0004ea   003e     dw	0x3e  ;unknown opcode 
0004ec   1c00     comf	0, 0, 0             	DB	0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x08, 0x07, 0x00
0004ee   1c1c     comf	0x1c, 0, 0          
0004f0   0000     nop                      
0004f2   0000     nop                      
0004f4   0870     sublw	0x70               
0004f6   0007     daw                      
0004f8   0000     nop                      	DB	0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x1d, 0x15, 0x17, 0x00
0004fa   0808     sublw	0x8                
0004fc   0008     tblrd	*                  
0004fe   0000     nop                      
000500   151d     andwf	0x1d, 0, 0x1       
000502   0017     dw	0x17  ;unknown opcode 
000504   0000     nop                      	DB	0x00, 0x00, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00, 0x11, 0x15, 0x0a, 0x00
000506   0507     decf	0x7, 0, 0x1         
000508   0007     daw                      
00050a   0000     nop                      
00050c   1511     andwf	0x11, 0, 0x1       
00050e   000a     tblrd	*-                 
000510   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 0x41, 0x20, 0x00
000512   0000     nop                      
000514   0000     nop                      
000516   0400     decf	0, 0, 0             
000518   413c     rrncf	0x3c, 0, 0x1       
00051a   0020     dw	0x20  ;unknown opcode 
00051c   7c00     btg	0, 0x6, 0            	DB	0x00, 0x7c, 0x16, 0x15, 0x16, 0x08, 0x00, 0x21, 0x16, 0x08, 0x34, 0x42
00051e   1516     andwf	0x16, 0, 0x1       
000520   0816     sublw	0x16               
000522   2100     addwfc	0, 0, 0x1         
000524   0816     sublw	0x16               
000526   4234     rrncf	0x34, 0x1, 0       
000528   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x09, 0x1d, 0x01, 0x03, 0x00, 0x38, 0x54, 0x54, 0x14, 0x08
00052a   1d09     comf	0x9, 0, 0x1         
00052c   0301     mulwf	0x1, 0x1           
00052e   3800     swapf	0, 0, 0            
000530   5454     subfwb	0x54, 0, 0        
000532   0814     sublw	0x14               
000534   0000     nop                      	DB	0x00, 0x00, 0x00, 0x7c, 0x40, 0x40, 0x00, 0x7f, 0x0e, 0x1c, 0x38, 0x7f
000536   7c00     btg	0, 0x6, 0            
000538   4040     rrncf	0x40, 0, 0         
00053a   7f00     btg	0, 0x7, 0x1          
00053c   1c0e     comf	0xe, 0, 0           
00053e   7f38     btg	0x38, 0x7, 0x1       
000540   4100     rrncf	0, 0, 0x1          	DB	0x00, 0x41, 0x22, 0x5d, 0x22, 0x1c, 0x00, 0x1c, 0x3e, 0x1c, 0x08, 0x00
000542   5d22     subwf	0x22, 0, 0x1       
000544   1c22     comf	0x22, 0, 0          
000546   1c00     comf	0, 0, 0             
000548   1c3e     comf	0x3e, 0, 0          
00054a   0008     tblrd	*                  
00054c   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x77, 0x7b, 0x01, 0x7b, 0x77
00054e   7f7f     btg	0x7f, 0x7, 0x1       
000550   7f7f     btg	0x7f, 0x7, 0x1       
000552   7700     btg	0, 0x3, 0x1          
000554   017b     movlb	0x7b               
000556   777b     btg	0x7b, 0x3, 0x1       
000558   7f00     btg	0, 0x7, 0x1          	DB	0x00, 0x7f, 0x43, 0x75, 0x43, 0x7f, 0x00, 0x7f, 0x6f, 0x55, 0x43, 0x7f
00055a   7543     btg	0x43, 0x2, 0x1       
00055c   7f43     btg	0x43, 0x7, 0x1       
00055e   7f00     btg	0, 0x7, 0x1          
000560   556f     subfwb	0x6f, 0, 0x1      
000562   7f43     btg	0x43, 0x7, 0x1       
000564   4000     rrncf	0, 0, 0            	DB	0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x44, 0x42, 0x5f, 0x42, 0x44
000566   4040     rrncf	0x40, 0, 0         
000568   4040     rrncf	0x40, 0, 0         
00056a   4400     rlncf	0, 0, 0            
00056c   5f42     subwf	0x42, 0x1, 0x1     
00056e   4442     rlncf	0x42, 0, 0         
000570   4000     rrncf	0, 0, 0            	DB	0x00, 0x40, 0x5e, 0x45, 0x5e, 0x40, 0x00, 0x40, 0x48, 0x55, 0x5e, 0x40
000572   455e     rlncf	0x5e, 0, 0x1       
000574   405e     rrncf	0x5e, 0, 0         
000576   4000     rrncf	0, 0, 0            
000578   5548     subfwb	0x48, 0, 0x1      
00057a   405e     rrncf	0x5e, 0, 0         
00057c   0000     nop                      	DB	0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x00, 0x03, 0x07, 0x0e, 0x1c, 0x38
00057e   0804     sublw	0x4                
000580   2010     addwfc	0x10, 0, 0        
000582   0300     mulwf	0, 0x1             
000584   0e07     movlw	0x7                
000586   381c     swapf	0x1c, 0, 0         
000588   0100     movlb	0                  	DB	0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x00, 0x7c, 0x78, 0x70, 0x60, 0x40
00058a   0703     decf	0x3, 0x1, 0x1       
00058c   1f0f     comf	0xf, 0x1, 0x1       
00058e   7c00     btg	0, 0x6, 0            
000590   7078     btg	0x78, 0, 0           
000592   4060     rrncf	0x60, 0, 0         
000594   0800     sublw	0                  	DB	0x00, 0x08, 0x08, 0x1c, 0x22, 0x1c, 0x00, 0x00, 0x1c, 0x22, 0x1c, 0x00
000596   1c08     comf	0x8, 0, 0           
000598   1c22     comf	0x22, 0, 0          
00059a   0000     nop                      
00059c   221c     addwfc	0x1c, 0x1, 0      
00059e   001c     dw	0x1c  ;unknown opcode 
0005a0   0200     mulwf	0, 0               	DB	0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x04, 0x3e, 0x3f, 0x3e, 0x04
0005a2   0800     sublw	0                  
0005a4   2000     addwfc	0, 0, 0           
0005a6   0400     decf	0, 0, 0             
0005a8   3f3e     incfsz	0x3e, 0x1, 0x1    
0005aa   043e     decf	0x3e, 0, 0          
0005ac   1000     iorwf	0, 0, 0            	DB	0x00, 0x10, 0x3e, 0x7e, 0x3e, 0x10, 0x00, 0x55, 0x2a, 0x55, 0x2a, 0x55
0005ae   7e3e     btg	0x3e, 0x7, 0         
0005b0   103e     iorwf	0x3e, 0, 0         
0005b2   5500     subfwb	0, 0, 0x1         
0005b4   552a     subfwb	0x2a, 0, 0x1      
0005b6   552a     subfwb	0x2a, 0, 0x1      
0005b8   2400     addwf	0, 0, 0            	DB	0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04
0005ba   7f2a     btg	0x2a, 0x7, 0x1       
0005bc   122a     iorwf	0x2a, 0x1, 0       
0005be   0400     decf	0, 0, 0             
0005c0   1f1e     comf	0x1e, 0x1, 0x1      
0005c2   041e     decf	0x1e, 0, 0          
0005c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0005c6   0000     nop                      
0005c8   0000     nop                      
0005ca   0000     nop                      
0005cc   0000     nop                      
0005ce   0000     nop                      
0005d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0005d2   0000     nop                      
0005d4   0000     nop                      
0005d6   0000     nop                      
0005d8   0000     nop                      
0005da   0000     nop                      
0005dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0005de   0000     nop                      
0005e0   0000     nop                      
0005e2   0000     nop                      
0005e4   0000     nop                      
0005e6   0000     nop                      
0005e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0005ea   0000     nop                      
0005ec   0000     nop                      
0005ee   0000     nop                      
0005f0   0000     nop                      
0005f2   0000     nop                      
0005f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0005f6   0000     nop                      
0005f8   0000     nop                      
0005fa   0000     nop                      
0005fc   0000     nop                      
0005fe   0000     nop                      
000600   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000602   0000     nop                      
000604   0000     nop                      
000606   0000     nop                      
000608   0000     nop                      
00060a   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _menu:
00060c   5300     movf	0, 0x1, 0x1         	DB	0x00, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x69, 0x74
00060e   6c65     negf	0x65, 0             
000610   6365     cpfseq	0x65, 0x1         
000612   6574     cpfsgt	0x74, 0x1         
000614   2064     addwfc	0x64, 0, 0        
000616   7469     btg	0x69, 0x2, 0         
000618   6d65     negf	0x65, 0x1           	DB	0x65, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
00061a   0000     nop                      
00061c   0000     nop                      
00061e   0000     nop                      
000620   0000     nop                      
000622   0100     movlb	0                  
000624   7449     btg	0x49, 0x2, 0         	DB	0x49, 0x74, 0x65, 0x6d, 0x20, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000626   6d65     negf	0x65, 0x1           
000628   3220     rrcf	0x20, 0x1, 0        
00062a   0000     nop                      
00062c   0000     nop                      
00062e   0000     nop                      
000630   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4f
000632   0000     nop                      
000634   0000     nop                      
000636   0000     nop                      
000638   0000     nop                      
00063a   4f02     dcfsnz	0x2, 0x1, 0x1     
00063c   7470     btg	0x70, 0x2, 0         	DB	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00063e   6f69     movwf	0x69, 0x1          
000640   006e     dw	0x6e  ;unknown opcode 
000642   0000     nop                      
000644   0000     nop                      
000646   0000     nop                      
000648   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x53, 0x65
00064a   0000     nop                      
00064c   0000     nop                      
00064e   0000     nop                      
000650   0300     mulwf	0, 0x1             
000652   6553     cpfsgt	0x53, 0x1         
000654   7474     btg	0x74, 0x2, 0         	DB	0x74, 0x74, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000656   6e69     movwf	0x69, 0            
000658   0067     dw	0x67  ;unknown opcode 
00065a   0000     nop                      
00065c   0000     nop                      
00065e   0000     nop                      
000660   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x57, 0x6f, 0x6f
000662   0000     nop                      
000664   0000     nop                      
000666   0000     nop                      
000668   5704     subfwb	0x4, 0x1, 0x1     
00066a   6f6f     movwf	0x6f, 0x1          
00066c   0064     dw	0x64  ;unknown opcode 	DB	0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00066e   0000     nop                      
000670   0000     nop                      
000672   0000     nop                      
000674   0000     nop                      
000676   0000     nop                      
000678   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x4f, 0x78, 0x79, 0x67
00067a   0000     nop                      
00067c   0000     nop                      
00067e   0500     decf	0, 0, 0x1           
000680   784f     btg	0x4f, 0x4, 0         
000682   6779     tstfsz	0x79, 0x1         
000684   6e65     movwf	0x65, 0            	DB	0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000686   0000     nop                      
000688   0000     nop                      
00068a   0000     nop                      
00068c   0000     nop                      
00068e   0000     nop                      
000690   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61
000692   0000     nop                      
000694   0000     nop                      
000696   4d06     dcfsnz	0x6, 0, 0x1       
000698   6e61     movwf	0x61, 0            
00069a   6175     cpfslt	0x75, 0x1         
00069c   206c     addwfc	0x6c, 0, 0        	DB	0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 0x00
00069e   6f63     movwf	0x63, 0x1          
0006a0   746e     btg	0x6e, 0x2, 0         
0006a2   6f72     movwf	0x72, 0x1          
0006a4   006c     dw	0x6c  ;unknown opcode 
0006a6   0000     nop                      
0006a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00
0006aa   0000     nop                      
0006ac   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_0:
0006ae   0020     dw	0x20  ;unknown opcode 	DB	0x20, 0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1342 (0x053e) bytes ( 1.02%)
                                           ;           	  671 (0x029f) words
                                           ; udata size:	   22 (0x0016) bytes ( 0.57%)
                                           ; access size:	   23 (0x0017) bytes
                                           
                                           
                                           	end
