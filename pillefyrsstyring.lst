gplink-1.2.0 #980 (Oct 25 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-17-2013  01:10:38
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 17 01:10:37 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           	CONFIG	OSC=INTIO67,FCMEN=OFF,IESO=OFF
                                           	CONFIG	PWRT=OFF,BOREN=OFF
                                           	CONFIG	WDT=OFF
                                           	CONFIG	WDTPS=8192
                                           	CONFIG	CCP2MX=PORTC,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=OFF,LVP=OFF,XINST=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_sleep_ms
                                           	global	_init_timers
                                           	global	_init_latches
                                           	global	_set_ac_power
                                           	global	_get_inputs
                                           	global	_my_usart_open
                                           	global	_fifo_in_use
                                           	global	_fifo_put
                                           	global	_fifo_get
                                           	global	_base64decode
                                           	global	_base64encode
                                           	global	_validate_command
                                           	global	_reset
                                           	global	__debug
                                           	global	_i
                                           	global	_timer_1_ms
                                           	global	_sensor_inputs
                                           	global	_last_inputs
                                           	global	_output_ac_power_pwm
                                           	global	_ac_power_pwm_counter
                                           	global	_fifo_head
                                           	global	_fifo_tail
                                           	global	_fifo_buffer
                                           	global	_command
                                           	global	_command_index
                                           	global	_valid_command
                                           	global	__latch_2_data
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stdin
                                           	extern	_stdout
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_crc16
                                           	extern	_sprintf
                                           	extern	_strchr
                                           	extern	_memcpy
                                           	extern	_adc_open
                                           	extern	_usart_drdy
                                           	extern	_usart_getc
                                           	extern	_usart_putc
                                           	extern	_usart_puts
                                           	extern	_latched_lcd_power
                                           	extern	__mullong
                                           	extern	__moduint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_pillefyrsstyring_0	udata
                                           _timer_1_ms	res	4
                                           
                                           udata_pillefyrsstyring_1	udata
                                           _fifo_head	res	2
                                           
                                           udata_pillefyrsstyring_2	udata
                                           _fifo_tail	res	2
                                           
                                           udata_pillefyrsstyring_3	udata
                                           _command_index	res	1
                                           
                                           udata_pillefyrsstyring_4	udata
                                           _last_inputs	res	1
                                           
                                           udata_pillefyrsstyring_5	udata
                                           _output_ac_power_pwm	res	6
                                           
                                           udata_pillefyrsstyring_6	udata
                                           _main_c_1_102	res	1
                                           
                                           udata_pillefyrsstyring_7	udata
                                           _sensor_inputs	res	1
                                           
                                           udata_pillefyrsstyring_8	udata
                                           _command	res	21
                                           
                                           udata_pillefyrsstyring_9	udata
                                           _valid_command	res	7
                                           
                                           udata_pillefyrsstyring_10	udata
                                           _main_buffer_1_102	res	10
                                           
                                           udata_pillefyrsstyring_11	udata
                                           _i	res	2
                                           
                                           udata_pillefyrsstyring_12	udata
                                           _ac_power_pwm_counter	res	1
                                           
                                           udata_pillefyrsstyring_13	udata
                                           __latch_2_data	res	1
                                           
                                           udata_pillefyrsstyring_14	udata
                                           _fifo_buffer	res	100
                                           
                                           udata_pillefyrsstyring_15	udata
                                           _base64decode_xlate_1_148	res	17
                                           
                                           udata_pillefyrsstyring_16	udata
                                           _validate_command_decoded_command_1_153	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x1_isr_high_prio	code	0X000008
                                           ivec_0x1_isr_high_prio:
000008   ef86     goto    0x130c           	GOTO	_isr_high_prio
00000a   f009
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_pillefyrsstyring_ivec_0x2_isr_low_prio	code	0X000018
                                           ivec_0x2_isr_low_prio:
000018   efa3     goto    0x2146           	GOTO	_isr_low_prio
00001a   f010
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__main	code
                                           _main:
                                           ;	.line	43; pillefyrsstyring.c	OSCCONbits.SCS = 0x10;
000828   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
00082a   0bfc     andlw   0xfc             	ANDLW	0xfc
00082c   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	44; pillefyrsstyring.c	OSCCONbits.IRCF = 0x7;	// 8 MHz
00082e   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
000830   0b8f     andlw   0x8f             	ANDLW	0x8f
000832   0970     iorlw   0x70             	IORLW	0x70
000834   6ed3     movwf   0xd3, 0          	MOVWF	_OSCCONbits
                                           ;	.line	45; pillefyrsstyring.c	WDTCONbits.SWDTEN = 1;	// enable watchdog
000836   80d1     bsf     0xd1, 0, 0       	BSF	_WDTCONbits, 0
000838   0004     clrwdt                   	clrwdt 
00083a   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	48; pillefyrsstyring.c	timer_1_ms = 0;
00083c   6b57     clrf    0x57, 0x1        	CLRF	_timer_1_ms, B
00083e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
000840   6b58     clrf    0x58, 0x1        	CLRF	(_timer_1_ms + 1), B
000842   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
000844   6b59     clrf    0x59, 0x1        	CLRF	(_timer_1_ms + 2), B
000846   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
000848   6b5a     clrf    0x5a, 0x1        	CLRF	(_timer_1_ms + 3), B
00084a   010f     movlb   0xf              	BANKSEL	_fifo_head
                                           ;	.line	50; pillefyrsstyring.c	fifo_head = 0;
00084c   6b72     clrf    0x72, 0x1        	CLRF	_fifo_head, B
00084e   010f     movlb   0xf              	BANKSEL	(_fifo_head + 1)
000850   6b73     clrf    0x73, 0x1        	CLRF	(_fifo_head + 1), B
000852   010f     movlb   0xf              	BANKSEL	_fifo_tail
                                           ;	.line	51; pillefyrsstyring.c	fifo_tail = 0;
000854   6b74     clrf    0x74, 0x1        	CLRF	_fifo_tail, B
000856   010f     movlb   0xf              	BANKSEL	(_fifo_tail + 1)
000858   6b75     clrf    0x75, 0x1        	CLRF	(_fifo_tail + 1), B
00085a   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	52; pillefyrsstyring.c	command_index = 0;
00085c   6b7e     clrf    0x7e, 0x1        	CLRF	_command_index, B
                                           ;	.line	55; pillefyrsstyring.c	RCONbits.IPEN = 1;
00085e   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	57; pillefyrsstyring.c	init_timers();
000860   ecc9     call    0x2992, 0        	CALL	_init_timers
000862   f014
                                           ;	.line	60; pillefyrsstyring.c	IPR1bits.RCIP = 0;
000864   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	61; pillefyrsstyring.c	IPR1bits.TXIP = 0;
000866   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	72; pillefyrsstyring.c	my_usart_open();
000868   ec92     call    0x2b24, 0        	CALL	_my_usart_open
00086a   f015
                                           ;	.line	74; pillefyrsstyring.c	sleep_ms(1000);	// let stuff settle...
00086c   0e00     movlw   0                	MOVLW	0x00
00086e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000870   0e00     movlw   0                	MOVLW	0x00
000872   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000874   0e03     movlw   0x3              	MOVLW	0x03
000876   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000878   0ee8     movlw   0xe8             	MOVLW	0xe8
00087a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00087c   ecdf     call    0x15be, 0        	CALL	_sleep_ms
00087e   f00a
000880   0e04     movlw   0x4              	MOVLW	0x04
000882   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; pillefyrsstyring.c	usart_puts("OpenStoker starting... serial working\n\r");
000884   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000886   6e02     movwf   0x2, 0           	MOVWF	r0x02
000888   0e14     movlw   0x14             	MOVLW	HIGH(__str_0)
00088a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00088c   0e38     movlw   0x38             	MOVLW	LOW(__str_0)
00088e   6e00     movwf   0, 0             	MOVWF	r0x00
000890   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000892   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000894   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000896   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000898   5000     movf    0, 0, 0          	MOVF	r0x00, W
00089a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00089c   ec09     call    0x2412, 0        	CALL	_usart_puts
00089e   f012
0008a0   0e03     movlw   0x3              	MOVLW	0x03
0008a2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	117; pillefyrsstyring.c	adc_open(ADC_CHN_0, ADC_FOSC_64, ADC_CFG_12A, ADC_FRM_RJUST | ADC_INT_OFF | ADC_VCFG_AN3_AN2);
0008a4   0eb0     movlw   0xb0             	MOVLW	0xb0
0008a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008a8   0e03     movlw   0x3              	MOVLW	0x03
0008aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ac   0e06     movlw   0x6              	MOVLW	0x06
0008ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b0   0e00     movlw   0                	MOVLW	0x00
0008b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008b4   eccb     call    0x2396, 0        	CALL	_adc_open
0008b6   f011
0008b8   0e04     movlw   0x4              	MOVLW	0x04
0008ba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	120; pillefyrsstyring.c	init_latches();
0008bc   eca7     call    0x2b4e, 0        	CALL	_init_latches
0008be   f015
                                           _00105_DS_:
                                           ;	.line	124; pillefyrsstyring.c	while (!fifo_in_use()) {
0008c0   ec35     call    0x2a6a, 0        	CALL	_fifo_in_use
0008c2   f015
0008c4   6e00     movwf   0, 0             	MOVWF	r0x00
0008c6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008c8   e123     bnz     0x910            	BNZ	_00107_DS_
                                           ;	.line	125; pillefyrsstyring.c	latched_lcd_power(1);
0008ca   0e01     movlw   0x1              	MOVLW	0x01
0008cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ce   ec8f     call    0x291e, 0        	CALL	_latched_lcd_power
0008d0   f014
0008d2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	126; pillefyrsstyring.c	sleep_ms(1000);
0008d4   0e00     movlw   0                	MOVLW	0x00
0008d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d8   0e00     movlw   0                	MOVLW	0x00
0008da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008dc   0e03     movlw   0x3              	MOVLW	0x03
0008de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e0   0ee8     movlw   0xe8             	MOVLW	0xe8
0008e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008e4   ecdf     call    0x15be, 0        	CALL	_sleep_ms
0008e6   f00a
0008e8   0e04     movlw   0x4              	MOVLW	0x04
0008ea   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	127; pillefyrsstyring.c	latched_lcd_power(0);
0008ec   0e00     movlw   0                	MOVLW	0x00
0008ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f0   ec8f     call    0x291e, 0        	CALL	_latched_lcd_power
0008f2   f014
0008f4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	128; pillefyrsstyring.c	sleep_ms(1000);
0008f6   0e00     movlw   0                	MOVLW	0x00
0008f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fa   0e00     movlw   0                	MOVLW	0x00
0008fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008fe   0e03     movlw   0x3              	MOVLW	0x03
000900   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000902   0ee8     movlw   0xe8             	MOVLW	0xe8
000904   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000906   ecdf     call    0x15be, 0        	CALL	_sleep_ms
000908   f00a
00090a   0e04     movlw   0x4              	MOVLW	0x04
00090c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00090e   d7d8     bra     0x8c0            	BRA	_00105_DS_
                                           _00107_DS_:
                                           ;	.line	130; pillefyrsstyring.c	latched_lcd_power(1);
000910   0e01     movlw   0x1              	MOVLW	0x01
000912   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000914   ec8f     call    0x291e, 0        	CALL	_latched_lcd_power
000916   f014
000918   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; pillefyrsstyring.c	RELAY = 1;
00091a   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
                                           ;	.line	133; pillefyrsstyring.c	last_inputs = get_inputs();
00091c   ec0a     call    0x2c14, 0        	CALL	_get_inputs
00091e   f016
000920   0108     movlb   0x8              	BANKSEL	_last_inputs
000922   6f00     movwf   0, 0x1           	MOVWF	_last_inputs, B
000924   010f     movlb   0xf              	BANKSEL	_output_ac_power_pwm
                                           ;	.line	135; pillefyrsstyring.c	output_ac_power_pwm[0] = 0;
000926   6b51     clrf    0x51, 0x1        	CLRF	_output_ac_power_pwm, B
000928   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 1)
                                           ;	.line	136; pillefyrsstyring.c	output_ac_power_pwm[1] = 0;
00092a   6b52     clrf    0x52, 0x1        	CLRF	(_output_ac_power_pwm + 1), B
00092c   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 2)
                                           ;	.line	137; pillefyrsstyring.c	output_ac_power_pwm[2] = 0;
00092e   6b53     clrf    0x53, 0x1        	CLRF	(_output_ac_power_pwm + 2), B
000930   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 3)
                                           ;	.line	138; pillefyrsstyring.c	output_ac_power_pwm[3] = 0;
000932   6b54     clrf    0x54, 0x1        	CLRF	(_output_ac_power_pwm + 3), B
000934   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 4)
                                           ;	.line	139; pillefyrsstyring.c	output_ac_power_pwm[4] = 0;
000936   6b55     clrf    0x55, 0x1        	CLRF	(_output_ac_power_pwm + 4), B
000938   010f     movlb   0xf              	BANKSEL	(_output_ac_power_pwm + 5)
                                           ;	.line	140; pillefyrsstyring.c	output_ac_power_pwm[5] = 0;
00093a   6b56     clrf    0x56, 0x1        	CLRF	(_output_ac_power_pwm + 5), B
                                           _00129_DS_:
                                           ;	.line	146; pillefyrsstyring.c	if (fifo_get(&c)) {
00093c   0e08     movlw   0x8              	MOVLW	HIGH(_main_c_1_102)
00093e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000940   0e01     movlw   0x1              	MOVLW	LOW(_main_c_1_102)
000942   6e00     movwf   0, 0             	MOVWF	r0x00
000944   0e80     movlw   0x80             	MOVLW	0x80
000946   6e02     movwf   0x2, 0           	MOVWF	r0x02
000948   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00094a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00094c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00094e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000950   5000     movf    0, 0, 0          	MOVF	r0x00, W
000952   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000954   ecaa     call    0x1f54, 0        	CALL	_fifo_get
000956   f00f
000958   6e00     movwf   0, 0             	MOVWF	r0x00
00095a   0e03     movlw   0x3              	MOVLW	0x03
00095c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00095e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000960   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000962   d0f8     bra     0xb54            	BRA	_00125_DS_
000964   0108     movlb   0x8              	BANKSEL	_main_c_1_102
                                           ;	.line	147; pillefyrsstyring.c	if (c == '\n' || c == '.') {
000966   5101     movf    0x1, 0, 0x1      	MOVF	_main_c_1_102, W, B
000968   0a0a     xorlw   0xa              	XORLW	0x0a
00096a   e005     bz      0x976            	BZ	_00120_DS_
                                           _00175_DS_:
00096c   0108     movlb   0x8              	BANKSEL	_main_c_1_102
00096e   5101     movf    0x1, 0, 0x1      	MOVF	_main_c_1_102, W, B
000970   0a2e     xorlw   0x2e             	XORLW	0x2e
000972   e001     bz      0x976            	BZ	_00120_DS_
000974   d0c4     bra     0xafe            	BRA	_00121_DS_
                                           _00120_DS_:
000976   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	149; pillefyrsstyring.c	command_index = 0;
000978   6b7e     clrf    0x7e, 0x1        	CLRF	_command_index, B
                                           ;	.line	150; pillefyrsstyring.c	if (validate_command(command, valid_command)) {
00097a   0e00     movlw   0                	MOVLW	HIGH(_command)
00097c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00097e   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000980   6e00     movwf   0, 0             	MOVWF	r0x00
000982   0e80     movlw   0x80             	MOVLW	0x80
000984   6e02     movwf   0x2, 0           	MOVWF	r0x02
000986   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
000988   6e04     movwf   0x4, 0           	MOVWF	r0x04
00098a   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
00098c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00098e   0e80     movlw   0x80             	MOVLW	0x80
000990   6e05     movwf   0x5, 0           	MOVWF	r0x05
000992   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000994   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000996   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000998   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00099a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00099c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00099e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0009a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009a6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009aa   ec36     call    0x146c, 0        	CALL	_validate_command
0009ac   f00a
0009ae   6e00     movwf   0, 0             	MOVWF	r0x00
0009b0   0e06     movlw   0x6              	MOVLW	0x06
0009b2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0009b4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009b6   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
0009b8   d09e     bra     0xaf6            	BRA	_00115_DS_
0009ba   0004     clrwdt                   	clrwdt 
0009bc   0100     movlb   0                	BANKSEL	_valid_command
                                           ;	.line	153; pillefyrsstyring.c	switch (valid_command[0]) {					// only look at first character
0009be   51f9     movf    0xf9, 0, 0x1     	MOVF	_valid_command, W, B
0009c0   6e00     movwf   0, 0             	MOVWF	r0x00
0009c2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009c4   0a67     xorlw   0x67             	XORLW	0x67
0009c6   e101     bnz     0x9ca            	BNZ	_00179_DS_
0009c8   d03c     bra     0xa42            	BRA	_00110_DS_
                                           _00179_DS_:
0009ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009cc   0a73     xorlw   0x73             	XORLW	0x73
0009ce   e005     bz      0x9da            	BZ	_00108_DS_
0009d0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009d2   0a7a     xorlw   0x7a             	XORLW	0x7a
0009d4   e101     bnz     0x9d8            	BNZ	_00183_DS_
0009d6   d069     bra     0xaaa            	BRA	_00111_DS_
                                           _00183_DS_:
0009d8   d08a     bra     0xaee            	BRA	_00112_DS_
                                           _00108_DS_:
                                           ;	.line	155; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
0009da   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00131_DS_:
                                           ;	.line	156; pillefyrsstyring.c	output_ac_power_pwm[j] = valid_command[j + 1];
0009dc   0e51     movlw   0x51             	MOVLW	LOW(_output_ac_power_pwm)
0009de   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0009e0   6e01     movwf   0x1, 0           	MOVWF	r0x01
0009e2   6a02     clrf    0x2, 0           	CLRF	r0x02
0009e4   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
0009e6   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009e8   2800     incf    0, 0, 0          	INCF	r0x00, W
0009ea   6e03     movwf   0x3, 0           	MOVWF	r0x03
0009ec   0ef9     movlw   0xf9             	MOVLW	LOW(_valid_command)
0009ee   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0009f0   6e04     movwf   0x4, 0           	MOVWF	r0x04
0009f2   6a05     clrf    0x5, 0           	CLRF	r0x05
0009f4   0e00     movlw   0                	MOVLW	HIGH(_valid_command)
0009f6   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
0009f8   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0009fa   ffe9
0009fc   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0009fe   ffea
000a00   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
000a02   f004
000a04   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000a06   ffe9
000a08   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
000a0a   ffea
000a0c   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
000a0e   ffef
                                           ;	.line	155; pillefyrsstyring.c	for (j = 0; j < AC_POWER_OUTS; j++) {
000a10   c003     movff   0x3, 0           	MOVFF	r0x03, r0x00
000a12   f000
000a14   0e06     movlw   0x6              	MOVLW	0x06
000a16   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000a18   e3e1     bnc     0x9dc            	BNC	_00131_DS_
                                           ;	.line	158; pillefyrsstyring.c	usart_putc('!');	// ok values set to ac power pwm system
000a1a   0e21     movlw   0x21             	MOVLW	0x21
000a1c   ec8c     call    0x2d18, 0        	CALL	_usart_putc
000a1e   f016
                                           ;	.line	159; pillefyrsstyring.c	usart_puts("\n\r");
000a20   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000a22   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a24   0e14     movlw   0x14             	MOVLW	HIGH(__str_1)
000a26   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a28   0e60     movlw   0x60             	MOVLW	LOW(__str_1)
000a2a   6e00     movwf   0, 0             	MOVWF	r0x00
000a2c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a2e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a30   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a32   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a34   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a38   ec09     call    0x2412, 0        	CALL	_usart_puts
000a3a   f012
000a3c   0e03     movlw   0x3              	MOVLW	0x03
000a3e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	160; pillefyrsstyring.c	break;
000a40   d089     bra     0xb54            	BRA	_00125_DS_
                                           _00110_DS_:
                                           ;	.line	162; pillefyrsstyring.c	sprintf(buffer, "g%02x\n\r", sensor_inputs);
000a42   c802     movff   0x802, 0         	MOVFF	_sensor_inputs, r0x00
000a44   f000
000a46   6a01     clrf    0x1, 0           	CLRF	r0x01
000a48   0e00     movlw   0                	MOVLW	UPPER(__str_2)
000a4a   6e04     movwf   0x4, 0           	MOVWF	r0x04
000a4c   0e14     movlw   0x14             	MOVLW	HIGH(__str_2)
000a4e   6e03     movwf   0x3, 0           	MOVWF	r0x03
000a50   0e64     movlw   0x64             	MOVLW	LOW(__str_2)
000a52   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a54   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a56   6e06     movwf   0x6, 0           	MOVWF	r0x06
000a58   0e3e     movlw   0x3e             	MOVLW	LOW(_main_buffer_1_102)
000a5a   6e05     movwf   0x5, 0           	MOVWF	r0x05
000a5c   0e80     movlw   0x80             	MOVLW	0x80
000a5e   6e07     movwf   0x7, 0           	MOVWF	r0x07
000a60   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a62   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a64   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a66   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a68   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a6a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a6c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000a6e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a70   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a72   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a74   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000a76   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a78   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000a7a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a7c   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000a7e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a80   ec55     call    0x1aaa, 0        	CALL	_sprintf
000a82   f00d
000a84   0e08     movlw   0x8              	MOVLW	0x08
000a86   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	163; pillefyrsstyring.c	usart_puts(buffer);
000a88   0e0f     movlw   0xf              	MOVLW	HIGH(_main_buffer_1_102)
000a8a   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a8c   0e3e     movlw   0x3e             	MOVLW	LOW(_main_buffer_1_102)
000a8e   6e00     movwf   0, 0             	MOVWF	r0x00
000a90   0e80     movlw   0x80             	MOVLW	0x80
000a92   6e02     movwf   0x2, 0           	MOVWF	r0x02
000a94   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000a96   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a98   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a9a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a9c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a9e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aa0   ec09     call    0x2412, 0        	CALL	_usart_puts
000aa2   f012
000aa4   0e03     movlw   0x3              	MOVLW	0x03
000aa6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	164; pillefyrsstyring.c	break;
000aa8   d055     bra     0xb54            	BRA	_00125_DS_
                                           _00111_DS_:
                                           ;	.line	166; pillefyrsstyring.c	usart_putc('z');
000aaa   0e7a     movlw   0x7a             	MOVLW	0x7a
000aac   ec8c     call    0x2d18, 0        	CALL	_usart_putc
000aae   f016
                                           ;	.line	167; pillefyrsstyring.c	usart_puts("\n\r");
000ab0   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000ab2   6e02     movwf   0x2, 0           	MOVWF	r0x02
000ab4   0e14     movlw   0x14             	MOVLW	HIGH(__str_1)
000ab6   6e01     movwf   0x1, 0           	MOVWF	r0x01
000ab8   0e60     movlw   0x60             	MOVLW	LOW(__str_1)
000aba   6e00     movwf   0, 0             	MOVWF	r0x00
000abc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000abe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ac2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac4   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ac6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ac8   ec09     call    0x2412, 0        	CALL	_usart_puts
000aca   f012
000acc   0e03     movlw   0x3              	MOVLW	0x03
000ace   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	168; pillefyrsstyring.c	sleep_ms(100);
000ad0   0e00     movlw   0                	MOVLW	0x00
000ad2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad4   0e00     movlw   0                	MOVLW	0x00
000ad6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ad8   0e00     movlw   0                	MOVLW	0x00
000ada   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000adc   0e64     movlw   0x64             	MOVLW	0x64
000ade   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ae0   ecdf     call    0x15be, 0        	CALL	_sleep_ms
000ae2   f00a
000ae4   0e04     movlw   0x4              	MOVLW	0x04
000ae6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	169; pillefyrsstyring.c	reset();
000ae8   ec84     call    0x2d08, 0        	CALL	_reset
000aea   f016
                                           ;	.line	170; pillefyrsstyring.c	break;
000aec   d033     bra     0xb54            	BRA	_00125_DS_
                                           _00112_DS_:
                                           ;	.line	172; pillefyrsstyring.c	usart_putc('?');	// unknown command
000aee   0e3f     movlw   0x3f             	MOVLW	0x3f
000af0   ec8c     call    0x2d18, 0        	CALL	_usart_putc
000af2   f016
                                           ;	.line	173; pillefyrsstyring.c	}		
000af4   d02f     bra     0xb54            	BRA	_00125_DS_
                                           _00115_DS_:
                                           ;	.line	176; pillefyrsstyring.c	usart_putc('?');			// command not valid
000af6   0e3f     movlw   0x3f             	MOVLW	0x3f
000af8   ec8c     call    0x2d18, 0        	CALL	_usart_putc
000afa   f016
000afc   d02b     bra     0xb54            	BRA	_00125_DS_
                                           _00121_DS_:
                                           ;	.line	182; pillefyrsstyring.c	if (command_index <= COMMAND_LENGTH) {
000afe   0e15     movlw   0x15             	MOVLW	0x15
000b00   010f     movlb   0xf              	BANKSEL	_command_index
000b02   5d7e     subwf   0x7e, 0, 0x1     	SUBWF	_command_index, W, B
000b04   e210     bc      0xb26            	BC	_00118_DS_
                                           ;	.line	183; pillefyrsstyring.c	command[command_index] = c;
000b06   0ee4     movlw   0xe4             	MOVLW	LOW(_command)
000b08   010f     movlb   0xf              	BANKSEL	_command_index
000b0a   257e     addwf   0x7e, 0, 0x1     	ADDWF	_command_index, W, B
000b0c   6e00     movwf   0, 0             	MOVWF	r0x00
000b0e   6a01     clrf    0x1, 0           	CLRF	r0x01
000b10   0e00     movlw   0                	MOVLW	HIGH(_command)
000b12   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000b14   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000b16   ffe9
000b18   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000b1a   ffea
000b1c   c801     movff   0x801, 0xfef     	MOVFF	_main_c_1_102, INDF0
000b1e   ffef
000b20   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	184; pillefyrsstyring.c	command_index++;
000b22   2b7e     incf    0x7e, 0x1, 0x1   	INCF	_command_index, F, B
000b24   d017     bra     0xb54            	BRA	_00125_DS_
                                           _00118_DS_:
000b26   0100     movlb   0                	BANKSEL	(_command + 20)
                                           ;	.line	187; pillefyrsstyring.c	command[COMMAND_LENGTH] = '\0';	// null terminate it
000b28   6bf8     clrf    0xf8, 0x1        	CLRF	(_command + 20), B
000b2a   010f     movlb   0xf              	BANKSEL	_command_index
                                           ;	.line	188; pillefyrsstyring.c	command_index = 0;
000b2c   6b7e     clrf    0x7e, 0x1        	CLRF	_command_index, B
                                           ;	.line	189; pillefyrsstyring.c	usart_putc('+');		// overflow
000b2e   0e2b     movlw   0x2b             	MOVLW	0x2b
000b30   ec8c     call    0x2d18, 0        	CALL	_usart_putc
000b32   f016
                                           ;	.line	190; pillefyrsstyring.c	usart_puts("\n\r");
000b34   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000b36   6e02     movwf   0x2, 0           	MOVWF	r0x02
000b38   0e14     movlw   0x14             	MOVLW	HIGH(__str_1)
000b3a   6e01     movwf   0x1, 0           	MOVWF	r0x01
000b3c   0e60     movlw   0x60             	MOVLW	LOW(__str_1)
000b3e   6e00     movwf   0, 0             	MOVWF	r0x00
000b40   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000b42   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b44   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000b46   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b48   5000     movf    0, 0, 0          	MOVF	r0x00, W
000b4a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000b4c   ec09     call    0x2412, 0        	CALL	_usart_puts
000b4e   f012
000b50   0e03     movlw   0x3              	MOVLW	0x03
000b52   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00125_DS_:
000b54   0108     movlb   0x8              	BANKSEL	_sensor_inputs
                                           ;	.line	195; pillefyrsstyring.c	if (sensor_inputs != last_inputs) {
000b56   5102     movf    0x2, 0, 0x1      	MOVF	_sensor_inputs, W, B
000b58   0108     movlb   0x8              	BANKSEL	_last_inputs
000b5a   1900     xorwf   0, 0, 0x1        	XORWF	_last_inputs, W, B
000b5c   e101     bnz     0xb60            	BNZ	_00187_DS_
000b5e   d6ee     bra     0x93c            	BRA	_00129_DS_
                                           _00187_DS_:
                                           ;	.line	196; pillefyrsstyring.c	last_inputs = sensor_inputs;
000b60   c802     movff   0x802, 0x800     	MOVFF	_sensor_inputs, _last_inputs
000b62   f800
                                           ;	.line	197; pillefyrsstyring.c	_debug();	// blocks main for a while :-/
000b64   ec9d     call    0x253a, 0        	CALL	__debug
000b66   f012
000b68   d6e9     bra     0x93c            	BRA	_00129_DS_
000b6a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring___debug	code
                                           __debug:
                                           ;	.line	443; pillefyrsstyring.c	void _debug() {
00253a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00253c   ffe5
00253e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002540   ffd9
                                           ;	.line	444; pillefyrsstyring.c	latched_lcd_power(0);
002542   0e00     movlw   0                	MOVLW	0x00
002544   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002546   ec8f     call    0x291e, 0        	CALL	_latched_lcd_power
002548   f014
00254a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	445; pillefyrsstyring.c	sleep_ms(200);
00254c   0e00     movlw   0                	MOVLW	0x00
00254e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002550   0e00     movlw   0                	MOVLW	0x00
002552   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002554   0e00     movlw   0                	MOVLW	0x00
002556   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002558   0ec8     movlw   0xc8             	MOVLW	0xc8
00255a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00255c   ecdf     call    0x15be, 0        	CALL	_sleep_ms
00255e   f00a
002560   0e04     movlw   0x4              	MOVLW	0x04
002562   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	446; pillefyrsstyring.c	latched_lcd_power(1);
002564   0e01     movlw   0x1              	MOVLW	0x01
002566   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002568   ec8f     call    0x291e, 0        	CALL	_latched_lcd_power
00256a   f014
00256c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	447; pillefyrsstyring.c	sleep_ms(200);
00256e   0e00     movlw   0                	MOVLW	0x00
002570   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002572   0e00     movlw   0                	MOVLW	0x00
002574   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002576   0e00     movlw   0                	MOVLW	0x00
002578   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257a   0ec8     movlw   0xc8             	MOVLW	0xc8
00257c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00257e   ecdf     call    0x15be, 0        	CALL	_sleep_ms
002580   f00a
002582   0e04     movlw   0x4              	MOVLW	0x04
002584   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
002586   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002588   ffd9
00258a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__reset	code
                                           _reset:
                                           ;	.line	437; pillefyrsstyring.c	void reset() {
002d08   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d0a   ffe5
002d0c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d0e   ffd9
002d10   00ff     reset                    	reset
002d12   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d14   ffd9
002d16   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__validate_command	code
                                           _validate_command:
                                           ;	.line	420; pillefyrsstyring.c	unsigned char validate_command(unsigned char *encoded_command, unsigned char *validated_command) {
00146c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00146e   ffe5
001470   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001472   ffd9
001474   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001476   ffe5
001478   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00147a   ffe5
00147c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00147e   ffe5
001480   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001482   ffe5
001484   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001486   ffe5
001488   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00148a   ffe5
00148c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00148e   ffe5
001490   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001492   ffe5
001494   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
001496   ffe5
001498   0e02     movlw   0x2              	MOVLW	0x02
00149a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00149c   f000
00149e   0e03     movlw   0x3              	MOVLW	0x03
0014a0   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0014a2   f001
0014a4   0e04     movlw   0x4              	MOVLW	0x04
0014a6   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0014a8   f002
0014aa   0e05     movlw   0x5              	MOVLW	0x05
0014ac   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0014ae   f003
0014b0   0e06     movlw   0x6              	MOVLW	0x06
0014b2   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
0014b4   f004
0014b6   0e07     movlw   0x7              	MOVLW	0x07
0014b8   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
0014ba   f005
                                           ;	.line	424; pillefyrsstyring.c	base64decode(encoded_command, decoded_command);
0014bc   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_153)
0014be   6e07     movwf   0x7, 0           	MOVWF	r0x07
0014c0   0e48     movlw   0x48             	MOVLW	LOW(_validate_command_decoded_command_1_153)
0014c2   6e06     movwf   0x6, 0           	MOVWF	r0x06
0014c4   0e80     movlw   0x80             	MOVLW	0x80
0014c6   6e08     movwf   0x8, 0           	MOVWF	r0x08
0014c8   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0014ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014cc   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0014ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014d0   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0014d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014d4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0014d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014d8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0014da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014dc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0014de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014e0   ecc0     call    0xf80, 0         	CALL	_base64decode
0014e2   f007
0014e4   0e06     movlw   0x6              	MOVLW	0x06
0014e6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	425; pillefyrsstyring.c	received_checksum = (decoded_command[7] << 8) + decoded_command[8];
0014e8   cf4f     movff   0xf4f, 0         	MOVFF	(_validate_command_decoded_command_1_153 + 7), r0x00
0014ea   f000
0014ec   6a01     clrf    0x1, 0           	CLRF	r0x01
0014ee   5000     movf    0, 0, 0          	MOVF	r0x00, W
0014f0   6e06     movwf   0x6, 0           	MOVWF	r0x06
0014f2   6a02     clrf    0x2, 0           	CLRF	r0x02
0014f4   cf50     movff   0xf50, 0         	MOVFF	(_validate_command_decoded_command_1_153 + 8), r0x00
0014f6   f000
0014f8   6a01     clrf    0x1, 0           	CLRF	r0x01
0014fa   5000     movf    0, 0, 0          	MOVF	r0x00, W
0014fc   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
0014fe   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001500   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
                                           ;	.line	426; pillefyrsstyring.c	checksum = crc16(decoded_command, 7, 0);
001502   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_153)
001504   6e01     movwf   0x1, 0           	MOVWF	r0x01
001506   0e48     movlw   0x48             	MOVLW	LOW(_validate_command_decoded_command_1_153)
001508   6e00     movwf   0, 0             	MOVWF	r0x00
00150a   0e80     movlw   0x80             	MOVLW	0x80
00150c   6e07     movwf   0x7, 0           	MOVWF	r0x07
00150e   0e00     movlw   0                	MOVLW	0x00
001510   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001512   0e00     movlw   0                	MOVLW	0x00
001514   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001516   0e00     movlw   0                	MOVLW	0x00
001518   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00151a   0e00     movlw   0                	MOVLW	0x00
00151c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00151e   0e00     movlw   0                	MOVLW	0x00
001520   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001522   0e07     movlw   0x7              	MOVLW	0x07
001524   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001526   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001528   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00152a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00152c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00152e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001530   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001532   ec87     call    0x170e, 0        	CALL	_crc16
001534   f00b
001536   6e00     movwf   0, 0             	MOVWF	r0x00
001538   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
00153a   f001
00153c   0e09     movlw   0x9              	MOVLW	0x09
00153e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	428; pillefyrsstyring.c	if (received_checksum == checksum) {
001540   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001542   1800     xorwf   0, 0, 0          	XORWF	r0x00, W
001544   e103     bnz     0x154c           	BNZ	_00354_DS_
001546   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001548   1801     xorwf   0x1, 0, 0        	XORWF	r0x01, W
00154a   e001     bz      0x154e           	BZ	_00355_DS_
                                           _00354_DS_:
00154c   d022     bra     0x1592           	BRA	_00347_DS_
                                           _00355_DS_:
                                           ;	.line	429; pillefyrsstyring.c	memcpy(validated_command, decoded_command, 7);
00154e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001550   6e05     movwf   0x5, 0           	MOVWF	r0x05
001552   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001554   6e04     movwf   0x4, 0           	MOVWF	r0x04
001556   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001558   6e03     movwf   0x3, 0           	MOVWF	r0x03
00155a   0e0f     movlw   0xf              	MOVLW	HIGH(_validate_command_decoded_command_1_153)
00155c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00155e   0e48     movlw   0x48             	MOVLW	LOW(_validate_command_decoded_command_1_153)
001560   6e00     movwf   0, 0             	MOVWF	r0x00
001562   0e80     movlw   0x80             	MOVLW	0x80
001564   6e02     movwf   0x2, 0           	MOVWF	r0x02
001566   0e00     movlw   0                	MOVLW	0x00
001568   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00156a   0e07     movlw   0x7              	MOVLW	0x07
00156c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00156e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001570   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001572   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001574   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001576   5000     movf    0, 0, 0          	MOVF	r0x00, W
001578   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00157a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00157c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00157e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001580   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001582   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001584   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001586   ec68     call    0x1cd0, 0        	CALL	_memcpy
001588   f00e
00158a   0e08     movlw   0x8              	MOVLW	0x08
00158c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	430; pillefyrsstyring.c	return 1;
00158e   0e01     movlw   0x1              	MOVLW	0x01
001590   d001     bra     0x1594           	BRA	_00349_DS_
                                           _00347_DS_:
                                           ;	.line	433; pillefyrsstyring.c	return 0;
001592   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00349_DS_:
001594   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
001596   f008
001598   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00159a   f007
00159c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00159e   f006
0015a0   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0015a2   f005
0015a4   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0015a6   f004
0015a8   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0015aa   f003
0015ac   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0015ae   f002
0015b0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0015b2   f001
0015b4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0015b6   f000
0015b8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0015ba   ffd9
0015bc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64encode	code
                                           _base64encode:
                                           ;	.line	410; pillefyrsstyring.c	void base64encode(unsigned char *s) {
002d28   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d2a   ffe5
002d2c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d2e   ffd9
                                           ;	.line	418; pillefyrsstyring.c	}
002d30   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d32   ffd9
002d34   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__base64decode	code
                                           _base64decode:
                                           ;	.line	395; pillefyrsstyring.c	void base64decode(unsigned char *s, unsigned char *buffer) {
000f80   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000f82   ffe5
000f84   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000f86   ffd9
000f88   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000f8a   ffe5
000f8c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000f8e   ffe5
000f90   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000f92   ffe5
000f94   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000f96   ffe5
000f98   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000f9a   ffe5
000f9c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000f9e   ffe5
000fa0   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000fa2   ffe5
000fa4   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000fa6   ffe5
000fa8   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000faa   ffe5
000fac   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000fae   ffe5
000fb0   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000fb2   ffe5
000fb4   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000fb6   ffe5
000fb8   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
000fba   ffe5
000fbc   0e02     movlw   0x2              	MOVLW	0x02
000fbe   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000fc0   f000
000fc2   0e03     movlw   0x3              	MOVLW	0x03
000fc4   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000fc6   f001
000fc8   0e04     movlw   0x4              	MOVLW	0x04
000fca   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000fcc   f002
000fce   0e05     movlw   0x5              	MOVLW	0x05
000fd0   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
000fd2   f003
000fd4   0e06     movlw   0x6              	MOVLW	0x06
000fd6   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
000fd8   f004
000fda   0e07     movlw   0x7              	MOVLW	0x07
000fdc   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
000fde   f005
                                           ;	.line	400; pillefyrsstyring.c	char xlate[] = "0123456789abcdef";
000fe0   0e30     movlw   0x30             	MOVLW	0x30
000fe2   010f     movlb   0xf              	BANKSEL	_base64decode_xlate_1_148
000fe4   6f20     movwf   0x20, 0x1        	MOVWF	_base64decode_xlate_1_148, B
000fe6   0e31     movlw   0x31             	MOVLW	0x31
000fe8   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 1)
000fea   6f21     movwf   0x21, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 1), B
000fec   0e32     movlw   0x32             	MOVLW	0x32
000fee   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 2)
000ff0   6f22     movwf   0x22, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 2), B
000ff2   0e33     movlw   0x33             	MOVLW	0x33
000ff4   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 3)
000ff6   6f23     movwf   0x23, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 3), B
000ff8   0e34     movlw   0x34             	MOVLW	0x34
000ffa   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 4)
000ffc   6f24     movwf   0x24, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 4), B
000ffe   0e35     movlw   0x35             	MOVLW	0x35
001000   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 5)
001002   6f25     movwf   0x25, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 5), B
001004   0e36     movlw   0x36             	MOVLW	0x36
001006   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 6)
001008   6f26     movwf   0x26, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 6), B
00100a   0e37     movlw   0x37             	MOVLW	0x37
00100c   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 7)
00100e   6f27     movwf   0x27, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 7), B
001010   0e38     movlw   0x38             	MOVLW	0x38
001012   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 8)
001014   6f28     movwf   0x28, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 8), B
001016   0e39     movlw   0x39             	MOVLW	0x39
001018   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 9)
00101a   6f29     movwf   0x29, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 9), B
00101c   0e61     movlw   0x61             	MOVLW	0x61
00101e   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 10)
001020   6f2a     movwf   0x2a, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 10), B
001022   0e62     movlw   0x62             	MOVLW	0x62
001024   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 11)
001026   6f2b     movwf   0x2b, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 11), B
001028   0e63     movlw   0x63             	MOVLW	0x63
00102a   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 12)
00102c   6f2c     movwf   0x2c, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 12), B
00102e   0e64     movlw   0x64             	MOVLW	0x64
001030   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 13)
001032   6f2d     movwf   0x2d, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 13), B
001034   0e65     movlw   0x65             	MOVLW	0x65
001036   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 14)
001038   6f2e     movwf   0x2e, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 14), B
00103a   0e66     movlw   0x66             	MOVLW	0x66
00103c   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 15)
00103e   6f2f     movwf   0x2f, 0x1        	MOVWF	(_base64decode_xlate_1_148 + 15), B
001040   010f     movlb   0xf              	BANKSEL	(_base64decode_xlate_1_148 + 16)
001042   6b30     clrf    0x30, 0x1        	CLRF	(_base64decode_xlate_1_148 + 16), B
                                           _00324_DS_:
                                           ;	.line	402; pillefyrsstyring.c	while (*h) {
001044   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001046   ffe9
001048   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00104a   fff3
00104c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00104e   ec2e     call    0x2c5c, 0        	CALL	__gptrget1
001050   f016
001052   6e06     movwf   0x6, 0           	MOVWF	r0x06
001054   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001056   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
001058   d060     bra     0x111a           	BRA	_00327_DS_
                                           ;	.line	403; pillefyrsstyring.c	*b = ((strchr(xlate, *h) - xlate) * 16) /* multiply leading digit by 16 */
00105a   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
00105c   6e08     movwf   0x8, 0           	MOVWF	r0x08
00105e   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
001060   6e07     movwf   0x7, 0           	MOVWF	r0x07
001062   0e80     movlw   0x80             	MOVLW	0x80
001064   6e09     movwf   0x9, 0           	MOVWF	r0x09
001066   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001068   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00106a   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
00106c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00106e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001070   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001072   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001074   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001076   ec3f     call    0x227e, 0        	CALL	_strchr
001078   f011
00107a   6e06     movwf   0x6, 0           	MOVWF	r0x06
00107c   cff3     movff   0xff3, 0x7       	MOVFF	PRODL, r0x07
00107e   f007
001080   cff4     movff   0xff4, 0x8       	MOVFF	PRODH, r0x08
001082   f008
001084   0e04     movlw   0x4              	MOVLW	0x04
001086   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001088   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
00108a   5e06     subwf   0x6, 0x1, 0      	SUBWF	r0x06, F
00108c   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
00108e   5a07     subwfb  0x7, 0x1, 0      	SUBWFB	r0x07, F
                                           ; ;multiply lit val:0x10 by variable r0x06 and store in r0x06
001090   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001092   0d10     mullw   0x10             	MULLW	0x10
001094   cff3     movff   0xff3, 0x6       	MOVFF	PRODL, r0x06
001096   f006
                                           ;	.line	404; pillefyrsstyring.c	+ ((strchr(xlate, *(h+1)) - xlate));
001098   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
00109a   6e08     movwf   0x8, 0           	MOVWF	r0x08
00109c   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
00109e   6e07     movwf   0x7, 0           	MOVWF	r0x07
0010a0   0e80     movlw   0x80             	MOVLW	0x80
0010a2   6e09     movwf   0x9, 0           	MOVWF	r0x09
0010a4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0010a6   0f01     addlw   0x1              	ADDLW	0x01
0010a8   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0010aa   0e00     movlw   0                	MOVLW	0x00
0010ac   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
0010ae   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
0010b0   0e00     movlw   0                	MOVLW	0x00
0010b2   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0010b4   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
0010b6   c00a     movff   0xa, 0xfe9       	MOVFF	r0x0a, FSR0L
0010b8   ffe9
0010ba   c00b     movff   0xb, 0xff3       	MOVFF	r0x0b, PRODL
0010bc   fff3
0010be   500c     movf    0xc, 0, 0        	MOVF	r0x0c, W
0010c0   ec2e     call    0x2c5c, 0        	CALL	__gptrget1
0010c2   f016
0010c4   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
0010c6   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
0010c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010ca   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0010cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010ce   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0010d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010d2   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0010d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010d6   ec3f     call    0x227e, 0        	CALL	_strchr
0010d8   f011
0010da   6e07     movwf   0x7, 0           	MOVWF	r0x07
0010dc   cff3     movff   0xff3, 0x8       	MOVFF	PRODL, r0x08
0010de   f008
0010e0   cff4     movff   0xff4, 0x9       	MOVFF	PRODH, r0x09
0010e2   f009
0010e4   0e04     movlw   0x4              	MOVLW	0x04
0010e6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0010e8   0e20     movlw   0x20             	MOVLW	LOW(_base64decode_xlate_1_148)
0010ea   5e07     subwf   0x7, 0x1, 0      	SUBWF	r0x07, F
0010ec   0e0f     movlw   0xf              	MOVLW	HIGH(_base64decode_xlate_1_148)
0010ee   5a08     subwfb  0x8, 0x1, 0      	SUBWFB	r0x08, F
0010f0   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0010f2   2606     addwf   0x6, 0x1, 0      	ADDWF	r0x06, F
0010f4   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0010f6   ffe5
0010f8   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0010fa   ffe9
0010fc   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0010fe   fff3
001100   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001102   ec5c     call    0x2cb8, 0        	CALL	__gptrput1
001104   f016
                                           ;	.line	405; pillefyrsstyring.c	h += 2;
001106   0e02     movlw   0x2              	MOVLW	0x02
001108   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00110a   0e00     movlw   0                	MOVLW	0x00
00110c   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00110e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
                                           ;	.line	406; pillefyrsstyring.c	b++;
001110   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
001112   e398     bnc     0x1044           	BNC	_00324_DS_
001114   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
001116   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
                                           _00336_DS_:
001118   d795     bra     0x1044           	BRA	_00324_DS_
                                           _00327_DS_:
00111a   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
00111c   f00c
00111e   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
001120   f00b
001122   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
001124   f00a
001126   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
001128   f009
00112a   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00112c   f008
00112e   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
001130   f007
001132   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001134   f006
001136   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001138   f005
00113a   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00113c   f004
00113e   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001140   f003
001142   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001144   f002
001146   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001148   f001
00114a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00114c   f000
00114e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001150   ffd9
001152   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_get	code
                                           _fifo_get:
                                           ;	.line	385; pillefyrsstyring.c	unsigned char fifo_get(unsigned char *c) {
001f54   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f56   ffe5
001f58   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f5a   ffd9
001f5c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001f5e   ffe5
001f60   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001f62   ffe5
001f64   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001f66   ffe5
001f68   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001f6a   ffe5
001f6c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001f6e   ffe5
001f70   0e02     movlw   0x2              	MOVLW	0x02
001f72   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001f74   f000
001f76   0e03     movlw   0x3              	MOVLW	0x03
001f78   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001f7a   f001
001f7c   0e04     movlw   0x4              	MOVLW	0x04
001f7e   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001f80   f002
                                           ;	.line	386; pillefyrsstyring.c	if (fifo_in_use() != 0) {
001f82   ec35     call    0x2a6a, 0        	CALL	_fifo_in_use
001f84   f015
001f86   6e03     movwf   0x3, 0           	MOVWF	r0x03
001f88   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001f8a   e02d     bz      0x1fe6           	BZ	_00317_DS_
                                           ;	.line	387; pillefyrsstyring.c	*c = fifo_buffer[fifo_tail++ % QUEUE_SIZE];
001f8c   cf74     movff   0xf74, 0x3       	MOVFF	_fifo_tail, r0x03
001f8e   f003
001f90   cf75     movff   0xf75, 0x4       	MOVFF	(_fifo_tail + 1), r0x04
001f92   f004
001f94   010f     movlb   0xf              	BANKSEL	_fifo_tail
001f96   3f74     incfsz  0x74, 0x1, 0x1   	INCFSZ	_fifo_tail, F, B
001f98   d002     bra     0x1f9e           	BRA	_10365_DS_
001f9a   010f     movlb   0xf              	BANKSEL	(_fifo_tail + 1)
001f9c   2b75     incf    0x75, 0x1, 0x1   	INCF	(_fifo_tail + 1), F, B
                                           _10365_DS_:
001f9e   0e00     movlw   0                	MOVLW	0x00
001fa0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001fa2   0e64     movlw   0x64             	MOVLW	0x64
001fa4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001fa6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001fa8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001faa   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001fac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001fae   ec4d     call    0x1e9a, 0        	CALL	__moduint
001fb0   f00f
001fb2   6e03     movwf   0x3, 0           	MOVWF	r0x03
001fb4   cff3     movff   0xff3, 0x4       	MOVFF	PRODL, r0x04
001fb6   f004
001fb8   0e04     movlw   0x4              	MOVLW	0x04
001fba   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001fbc   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
001fbe   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
001fc0   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
001fc2   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
001fc4   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
001fc6   ffe9
001fc8   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
001fca   ffea
001fcc   cfef     movff   0xfef, 0x3       	MOVFF	INDF0, r0x03
001fce   f003
001fd0   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001fd2   ffe5
001fd4   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001fd6   ffe9
001fd8   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
001fda   fff3
001fdc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001fde   ec5c     call    0x2cb8, 0        	CALL	__gptrput1
001fe0   f016
                                           ;	.line	388; pillefyrsstyring.c	return 1;
001fe2   0e01     movlw   0x1              	MOVLW	0x01
001fe4   d001     bra     0x1fe8           	BRA	_00319_DS_
                                           _00317_DS_:
                                           ;	.line	391; pillefyrsstyring.c	return 0;
001fe6   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00319_DS_:
001fe8   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
001fea   f004
001fec   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001fee   f003
001ff0   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001ff2   f002
001ff4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001ff6   f001
001ff8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001ffa   f000
001ffc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001ffe   ffd9
002000   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_put	code
                                           _fifo_put:
                                           ;	.line	375; pillefyrsstyring.c	unsigned char fifo_put(unsigned char c) {
002314   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002316   ffe5
002318   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00231a   ffd9
00231c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00231e   ffe5
002320   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002322   ffe5
002324   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002326   ffe5
002328   0e02     movlw   0x2              	MOVLW	0x02
00232a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00232c   f000
                                           ;	.line	376; pillefyrsstyring.c	if (fifo_in_use() != QUEUE_SIZE) {
00232e   ec35     call    0x2a6a, 0        	CALL	_fifo_in_use
002330   f015
002332   6e01     movwf   0x1, 0           	MOVWF	r0x01
002334   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002336   0a64     xorlw   0x64             	XORLW	0x64
002338   e024     bz      0x2382           	BZ	_00303_DS_
                                           ;	.line	377; pillefyrsstyring.c	fifo_buffer[fifo_head++ % QUEUE_SIZE] = c;
00233a   cf72     movff   0xf72, 0x1       	MOVFF	_fifo_head, r0x01
00233c   f001
00233e   cf73     movff   0xf73, 0x2       	MOVFF	(_fifo_head + 1), r0x02
002340   f002
002342   010f     movlb   0xf              	BANKSEL	_fifo_head
002344   3f72     incfsz  0x72, 0x1, 0x1   	INCFSZ	_fifo_head, F, B
002346   d002     bra     0x234c           	BRA	_20366_DS_
002348   010f     movlb   0xf              	BANKSEL	(_fifo_head + 1)
00234a   2b73     incf    0x73, 0x1, 0x1   	INCF	(_fifo_head + 1), F, B
                                           _20366_DS_:
00234c   0e00     movlw   0                	MOVLW	0x00
00234e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002350   0e64     movlw   0x64             	MOVLW	0x64
002352   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002354   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002356   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002358   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00235a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00235c   ec4d     call    0x1e9a, 0        	CALL	__moduint
00235e   f00f
002360   6e01     movwf   0x1, 0           	MOVWF	r0x01
002362   cff3     movff   0xff3, 0x2       	MOVFF	PRODL, r0x02
002364   f002
002366   0e04     movlw   0x4              	MOVLW	0x04
002368   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00236a   0e80     movlw   0x80             	MOVLW	LOW(_fifo_buffer)
00236c   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00236e   0e00     movlw   0                	MOVLW	HIGH(_fifo_buffer)
002370   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
002372   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
002374   ffe9
002376   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
002378   ffea
00237a   c000     movff   0, 0xfef         	MOVFF	r0x00, INDF0
00237c   ffef
                                           ;	.line	378; pillefyrsstyring.c	return 1;
00237e   0e01     movlw   0x1              	MOVLW	0x01
002380   d001     bra     0x2384           	BRA	_00305_DS_
                                           _00303_DS_:
                                           ;	.line	381; pillefyrsstyring.c	return 0;
002382   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00305_DS_:
002384   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002386   f002
002388   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00238a   f001
00238c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00238e   f000
002390   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002392   ffd9
002394   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__fifo_in_use	code
                                           _fifo_in_use:
                                           ;	.line	371; pillefyrsstyring.c	unsigned char fifo_in_use() {
002a6a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a6c   ffe5
002a6e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a70   ffd9
002a72   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002a74   ffe5
002a76   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002a78   ffe5
002a7a   010f     movlb   0xf              	BANKSEL	_fifo_head
                                           ;	.line	372; pillefyrsstyring.c	return fifo_head - fifo_tail;
002a7c   5172     movf    0x72, 0, 0x1     	MOVF	_fifo_head, W, B
002a7e   6e00     movwf   0, 0             	MOVWF	r0x00
002a80   010f     movlb   0xf              	BANKSEL	_fifo_tail
002a82   5174     movf    0x74, 0, 0x1     	MOVF	_fifo_tail, W, B
002a84   6e01     movwf   0x1, 0           	MOVWF	r0x01
002a86   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002a88   5e00     subwf   0, 0x1, 0        	SUBWF	r0x00, F
002a8a   5000     movf    0, 0, 0          	MOVF	r0x00, W
002a8c   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002a8e   f001
002a90   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002a92   f000
002a94   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a96   ffd9
002a98   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__my_usart_open	code
                                           _my_usart_open:
                                           ;	.line	341; pillefyrsstyring.c	void my_usart_open() {
002b24   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b26   ffe5
002b28   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b2a   ffd9
                                           ;	.line	342; pillefyrsstyring.c	SPBRG = 103;					// 8MHz => 19230 baud
002b2c   0e67     movlw   0x67             	MOVLW	0x67
002b2e   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	343; pillefyrsstyring.c	TXSTAbits.BRGH = 1;	// (1 = high speed)
002b30   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	344; pillefyrsstyring.c	TXSTAbits.SYNC = 0;	// (0 = asynchronous)
002b32   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	345; pillefyrsstyring.c	BAUDCONbits.BRG16 = 1;
002b34   86b8     bsf     0xb8, 0x3, 0     	BSF	_BAUDCONbits, 3
                                           ;	.line	348; pillefyrsstyring.c	RCSTAbits.SPEN = 1; // (1 = serial port enabled)
002b36   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	351; pillefyrsstyring.c	PIE1bits.TXIE = 0; // (1 = enabled)
002b38   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	352; pillefyrsstyring.c	IPR1bits.TXIP = 0; // USART Tx on low priority interrupt
002b3a   989f     bcf     0x9f, 0x4, 0     	BCF	_IPR1bits, 4
                                           ;	.line	355; pillefyrsstyring.c	PIE1bits.RCIE = 1; // (1 = enabled)
002b3c   8a9d     bsf     0x9d, 0x5, 0     	BSF	_PIE1bits, 5
                                           ;	.line	356; pillefyrsstyring.c	IPR1bits.RCIP = 0; // USART Rx on low priority interrupt
002b3e   9a9f     bcf     0x9f, 0x5, 0     	BCF	_IPR1bits, 5
                                           ;	.line	359; pillefyrsstyring.c	TXSTAbits.TX9 = 0; // (0 = 8-bit transmit)
002b40   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	362; pillefyrsstyring.c	RCSTAbits.RX9 = 0; // (0 = 8-bit reception)
002b42   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	365; pillefyrsstyring.c	RCSTAbits.CREN = 1; // (1 = Enables receiver)
002b44   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           ;	.line	368; pillefyrsstyring.c	TXSTAbits.TXEN = 1; // (1 = transmit enabled)
002b46   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
002b48   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b4a   ffd9
002b4c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__get_inputs	code
                                           _get_inputs:
                                           ;	.line	329; pillefyrsstyring.c	unsigned char get_inputs() {
002c14   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c16   ffe5
002c18   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c1a   ffd9
002c1c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002c1e   ffe5
                                           ;	.line	333; pillefyrsstyring.c	LATCH_DATA_TRIS = 0xff;		// inputs
002c20   0eff     movlw   0xff             	MOVLW	0xff
002c22   6e95     movwf   0x95, 0          	MOVWF	_TRISD
                                           ;	.line	334; pillefyrsstyring.c	LATCH_1 = LATCH_1_ENABLED;
002c24   9889     bcf     0x89, 0x4, 0     	BCF	_LATAbits, 4
                                           ;	.line	335; pillefyrsstyring.c	data = LATCH_DATA_READ; // & 0b00100000;
002c26   cf83     movff   0xf83, 0         	MOVFF	_PORTD, r0x00
002c28   f000
                                           ;	.line	336; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;
002c2a   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	338; pillefyrsstyring.c	return data;
002c2c   5000     movf    0, 0, 0          	MOVF	r0x00, W
002c2e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002c30   f000
002c32   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c34   ffd9
002c36   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__set_ac_power	code
                                           _set_ac_power:
                                           ;	.line	312; pillefyrsstyring.c	void set_ac_power(unsigned char header_mask, unsigned char value) {
0024e4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0024e6   ffe5
0024e8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0024ea   ffd9
0024ec   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0024ee   ffe5
0024f0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0024f2   ffe5
0024f4   0e02     movlw   0x2              	MOVLW	0x02
0024f6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0024f8   f000
0024fa   0e03     movlw   0x3              	MOVLW	0x03
0024fc   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0024fe   f001
                                           ;	.line	313; pillefyrsstyring.c	header_mask &= 0b00111111;		// only 6 outputs on this hardware
002500   0e3f     movlw   0x3f             	MOVLW	0x3f
002502   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
                                           ;	.line	314; pillefyrsstyring.c	value &= header_mask;
002504   5000     movf    0, 0, 0          	MOVF	r0x00, W
002506   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
                                           ;	.line	315; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002508   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	316; pillefyrsstyring.c	if (value) {	// set it
00250a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00250c   e006     bz      0x251a           	BZ	_00280_DS_
                                           ;	.line	317; pillefyrsstyring.c	_latch_2_data |= header_mask;
00250e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002510   0108     movlb   0x8              	BANKSEL	__latch_2_data
002512   1304     iorwf   0x4, 0x1, 0x1    	IORWF	__latch_2_data, F, B
                                           ;	.line	318; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
002514   c804     movff   0x804, 0xf8c     	MOVFF	__latch_2_data, _LATD
002516   ff8c
002518   d006     bra     0x2526           	BRA	_00281_DS_
                                           _00280_DS_:
                                           ;	.line	321; pillefyrsstyring.c	_latch_2_data &= ~header_mask;
00251a   1e00     comf    0, 0x1, 0        	COMF	r0x00, F
00251c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00251e   0108     movlb   0x8              	BANKSEL	__latch_2_data
002520   1704     andwf   0x4, 0x1, 0x1    	ANDWF	__latch_2_data, F, B
                                           ;	.line	322; pillefyrsstyring.c	LATCH_DATA = _latch_2_data;
002522   c804     movff   0x804, 0xf8c     	MOVFF	__latch_2_data, _LATD
002524   ff8c
                                           _00281_DS_:
                                           ;	.line	324; pillefyrsstyring.c	LATCH_2 = LATCH_2_ENABLED;
002526   8e89     bsf     0x89, 0x7, 0     	BSF	_LATAbits, 7
                                           ;	.line	325; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002528   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
                                           ;	.line	326; pillefyrsstyring.c	LATCH_DATA = 0x00;
00252a   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00252c   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00252e   f001
002530   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002532   f000
002534   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002536   ffd9
002538   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_latches	code
                                           _init_latches:
                                           ;	.line	292; pillefyrsstyring.c	void init_latches() {
002b4e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b50   ffe5
002b52   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b54   ffd9
                                           ;	.line	293; pillefyrsstyring.c	LATCH_DATA_TRIS = 0x00;		// outputs
002b56   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; pillefyrsstyring.c	LATCH_1_TRIS = 0x0; 			// output
002b58   9892     bcf     0x92, 0x4, 0     	BCF	_TRISAbits, 4
                                           ;	.line	295; pillefyrsstyring.c	LATCH_1 = LATCH_1_DISABLED;	// no inputs from input latch
002b5a   8889     bsf     0x89, 0x4, 0     	BSF	_LATAbits, 4
                                           ;	.line	297; pillefyrsstyring.c	LATCH_2_TRIS = 0x0; 			// output
002b5c   9e92     bcf     0x92, 0x7, 0     	BCF	_TRISAbits, 7
                                           ;	.line	298; pillefyrsstyring.c	LATCH_2 = LATCH_2_DISABLED;
002b5e   9e89     bcf     0x89, 0x7, 0     	BCF	_LATAbits, 7
002b60   0108     movlb   0x8              	BANKSEL	__latch_2_data
                                           ;	.line	299; pillefyrsstyring.c	_latch_2_data = 0x00;
002b62   6b04     clrf    0x4, 0x1         	CLRF	__latch_2_data, B
                                           ;	.line	301; pillefyrsstyring.c	LATCH_3_TRIS = 0x0; 			// output
002b64   9c92     bcf     0x92, 0x6, 0     	BCF	_TRISAbits, 6
                                           ;	.line	302; pillefyrsstyring.c	LATCH_3 = LATCH_3_DISABLED;
002b66   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; pillefyrsstyring.c	LATCH_4_TRIS = 0x0; 			// output
002b68   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	305; pillefyrsstyring.c	LATCH_4 = LATCH_4_DISABLED;
002b6a   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	307; pillefyrsstyring.c	RELAY_TRIS = 0x0;				// output
002b6c   9a94     bcf     0x94, 0x5, 0     	BCF	_TRISCbits, 5
                                           ;	.line	308; pillefyrsstyring.c	RELAY = 0x0;					// all power outputs off
002b6e   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
002b70   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b72   ffd9
002b74   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__init_timers	code
                                           _init_timers:
                                           ;	.line	264; pillefyrsstyring.c	void init_timers() {
002992   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002994   ffe5
002996   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002998   ffd9
                                           ;	.line	266; pillefyrsstyring.c	T0CONbits.TMR0ON = 1;
00299a   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           ;	.line	267; pillefyrsstyring.c	T0CONbits.T0PS0 = 0;
00299c   90d5     bcf     0xd5, 0, 0       	BCF	_T0CONbits, 0
                                           ;	.line	268; pillefyrsstyring.c	T0CONbits.T0PS1 = 0;
00299e   92d5     bcf     0xd5, 0x1, 0     	BCF	_T0CONbits, 1
                                           ;	.line	269; pillefyrsstyring.c	T0CONbits.T0PS2 = 0;	// prescaler 1:2
0029a0   94d5     bcf     0xd5, 0x2, 0     	BCF	_T0CONbits, 2
                                           ;	.line	270; pillefyrsstyring.c	T0CONbits.T08BIT = 0;   // use timer0 16-bit counter
0029a2   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	271; pillefyrsstyring.c	T0CONbits.T0CS = 0;             // internal clock source
0029a4   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	272; pillefyrsstyring.c	T0CONbits.PSA = 0;              // enable timer0 prescaler
0029a6   96d5     bcf     0xd5, 0x3, 0     	BCF	_T0CONbits, 3
                                           ;	.line	273; pillefyrsstyring.c	INTCON2bits.TMR0IP = 1; // high priority
0029a8   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	274; pillefyrsstyring.c	INTCONbits.T0IE = 1;    // Ensure that TMR0 Interrupt is enabled
0029aa   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	275; pillefyrsstyring.c	INTCONbits.TMR0IF = 1;  // Force Instant entry to Timer 0 Interrupt
0029ac   84f2     bsf     0xf2, 0x2, 0     	BSF	_INTCONbits, 2
                                           ;	.line	278; pillefyrsstyring.c	T1CONbits.TMR1ON = 1;
0029ae   80cd     bsf     0xcd, 0, 0       	BSF	_T1CONbits, 0
                                           ;	.line	279; pillefyrsstyring.c	T1CONbits.RD16 = 1;
0029b0   8ecd     bsf     0xcd, 0x7, 0     	BSF	_T1CONbits, 7
                                           ;	.line	280; pillefyrsstyring.c	T1CONbits.TMR1CS = 0;   // internal clock source
0029b2   92cd     bcf     0xcd, 0x1, 0     	BCF	_T1CONbits, 1
                                           ;	.line	281; pillefyrsstyring.c	T1CONbits.T1OSCEN = 0;  // dont put t1 on pin
0029b4   96cd     bcf     0xcd, 0x3, 0     	BCF	_T1CONbits, 3
                                           ;	.line	282; pillefyrsstyring.c	T1CONbits.T1CKPS0 = 1;
0029b6   88cd     bsf     0xcd, 0x4, 0     	BSF	_T1CONbits, 4
                                           ;	.line	283; pillefyrsstyring.c	T1CONbits.T1CKPS1 = 1;
0029b8   8acd     bsf     0xcd, 0x5, 0     	BSF	_T1CONbits, 5
                                           ;	.line	284; pillefyrsstyring.c	IPR1bits.TMR1IP = 0;	// low priority
0029ba   909f     bcf     0x9f, 0, 0       	BCF	_IPR1bits, 0
                                           ;	.line	285; pillefyrsstyring.c	PIE1bits.TMR1IE = 1;	// Ensure that TMR1 Interrupt is enabled
0029bc   809d     bsf     0x9d, 0, 0       	BSF	_PIE1bits, 0
                                           ;	.line	286; pillefyrsstyring.c	PIR1bits.TMR1IF = 1;	// Force Instant entry to Timer 1 Interrupt
0029be   809e     bsf     0x9e, 0, 0       	BSF	_PIR1bits, 0
                                           ;	.line	288; pillefyrsstyring.c	INTCONbits.PEIE = 1;
0029c0   8cf2     bsf     0xf2, 0x6, 0     	BSF	_INTCONbits, 6
                                           ;	.line	289; pillefyrsstyring.c	INTCONbits.GIE = 1;	/* Enable Global interrupts   */	
0029c2   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
0029c4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029c6   ffd9
0029c8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__sleep_ms	code
                                           _sleep_ms:
                                           ;	.line	254; pillefyrsstyring.c	void sleep_ms(unsigned long ms) {
0015be   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0015c0   ffe5
0015c2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0015c4   ffd9
0015c6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0015c8   ffe5
0015ca   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0015cc   ffe5
0015ce   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0015d0   ffe5
0015d2   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0015d4   ffe5
0015d6   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0015d8   ffe5
0015da   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0015dc   ffe5
0015de   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0015e0   ffe5
0015e2   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0015e4   ffe5
0015e6   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0015e8   ffe5
0015ea   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
0015ec   ffe5
0015ee   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
0015f0   ffe5
0015f2   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
0015f4   ffe5
0015f6   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
0015f8   ffe5
0015fa   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
0015fc   ffe5
0015fe   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
001600   ffe5
001602   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
001604   ffe5
001606   0e02     movlw   0x2              	MOVLW	0x02
001608   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00160a   f000
00160c   0e03     movlw   0x3              	MOVLW	0x03
00160e   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001610   f001
001612   0e04     movlw   0x4              	MOVLW	0x04
001614   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001616   f002
001618   0e05     movlw   0x5              	MOVLW	0x05
00161a   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
00161c   f003
                                           ;	.line	256; pillefyrsstyring.c	start_timer_1_ms = timer_1_ms;	
00161e   cf57     movff   0xf57, 0x4       	MOVFF	_timer_1_ms, r0x04
001620   f004
001622   cf58     movff   0xf58, 0x5       	MOVFF	(_timer_1_ms + 1), r0x05
001624   f005
001626   cf59     movff   0xf59, 0x6       	MOVFF	(_timer_1_ms + 2), r0x06
001628   f006
00162a   cf5a     movff   0xf5a, 0x7       	MOVFF	(_timer_1_ms + 3), r0x07
00162c   f007
                                           _00251_DS_:
                                           ;	.line	259; pillefyrsstyring.c	while ( (((signed long)(timer_1_ms - start_timer_1_ms) < 0) ? (-1 * (timer_1_ms - start_timer_1_ms)) : (timer_1_ms - start_timer_1_ms)) < ms) {
00162e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001630   010f     movlb   0xf              	BANKSEL	_timer_1_ms
001632   5d57     subwf   0x57, 0, 0x1     	SUBWF	_timer_1_ms, W, B
001634   6e08     movwf   0x8, 0           	MOVWF	r0x08
001636   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001638   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00163a   5958     subwfb  0x58, 0, 0x1     	SUBWFB	(_timer_1_ms + 1), W, B
00163c   6e09     movwf   0x9, 0           	MOVWF	r0x09
00163e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001640   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
001642   5959     subwfb  0x59, 0, 0x1     	SUBWFB	(_timer_1_ms + 2), W, B
001644   6e0a     movwf   0xa, 0           	MOVWF	r0x0a
001646   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001648   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
00164a   595a     subwfb  0x5a, 0, 0x1     	SUBWFB	(_timer_1_ms + 3), W, B
00164c   6e0b     movwf   0xb, 0           	MOVWF	r0x0b
00164e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001650   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
001652   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001654   6e0d     movwf   0xd, 0           	MOVWF	r0x0d
001656   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
001658   6e0e     movwf   0xe, 0           	MOVWF	r0x0e
00165a   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
00165c   6e0f     movwf   0xf, 0           	MOVWF	r0x0f
00165e   80d8     bsf     0xd8, 0, 0       	BSF	STATUS, 0
001660   ae0f     btfss   0xf, 0x7, 0      	BTFSS	r0x0f, 7
001662   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
001664   e31c     bnc     0x169e           	BNC	_00256_DS_
001666   500b     movf    0xb, 0, 0        	MOVF	r0x0b, W
001668   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00166a   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
00166c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00166e   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
001670   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001672   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
001674   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001676   0eff     movlw   0xff             	MOVLW	0xff
001678   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00167a   0eff     movlw   0xff             	MOVLW	0xff
00167c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00167e   0eff     movlw   0xff             	MOVLW	0xff
001680   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001682   0eff     movlw   0xff             	MOVLW	0xff
001684   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001686   ecb6     call    0xb6c, 0         	CALL	__mullong
001688   f005
00168a   6e0c     movwf   0xc, 0           	MOVWF	r0x0c
00168c   cff3     movff   0xff3, 0xd       	MOVFF	PRODL, r0x0d
00168e   f00d
001690   cff4     movff   0xff4, 0xe       	MOVFF	PRODH, r0x0e
001692   f00e
001694   cfe9     movff   0xfe9, 0xf       	MOVFF	FSR0L, r0x0f
001696   f00f
001698   0e08     movlw   0x8              	MOVLW	0x08
00169a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00169c   d008     bra     0x16ae           	BRA	_00257_DS_
                                           _00256_DS_:
00169e   c008     movff   0x8, 0xc         	MOVFF	r0x08, r0x0c
0016a0   f00c
0016a2   c009     movff   0x9, 0xd         	MOVFF	r0x09, r0x0d
0016a4   f00d
0016a6   c00a     movff   0xa, 0xe         	MOVFF	r0x0a, r0x0e
0016a8   f00e
0016aa   c00b     movff   0xb, 0xf         	MOVFF	r0x0b, r0x0f
0016ac   f00f
                                           _00257_DS_:
0016ae   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0016b0   5c0f     subwf   0xf, 0, 0        	SUBWF	r0x0f, W
0016b2   e108     bnz     0x16c4           	BNZ	_00264_DS_
0016b4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0016b6   5c0e     subwf   0xe, 0, 0        	SUBWF	r0x0e, W
0016b8   e105     bnz     0x16c4           	BNZ	_00264_DS_
0016ba   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0016bc   5c0d     subwf   0xd, 0, 0        	SUBWF	r0x0d, W
0016be   e102     bnz     0x16c4           	BNZ	_00264_DS_
0016c0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0016c2   5c0c     subwf   0xc, 0, 0        	SUBWF	r0x0c, W
                                           _00264_DS_:
0016c4   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0016c6   d7b3     bra     0x162e           	BRA	_00251_DS_
0016c8   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
0016ca   f00f
0016cc   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
0016ce   f00e
0016d0   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
0016d2   f00d
0016d4   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
0016d6   f00c
0016d8   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
0016da   f00b
0016dc   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0016de   f00a
0016e0   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
0016e2   f009
0016e4   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0016e6   f008
0016e8   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0016ea   f007
0016ec   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0016ee   f006
0016f0   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0016f2   f005
0016f4   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0016f6   f004
0016f8   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0016fa   f003
0016fc   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0016fe   f002
001700   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001702   f001
001704   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001706   f000
001708   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00170a   ffd9
00170c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_low_prio	code
                                           _isr_low_prio:
                                           ;	.line	236; pillefyrsstyring.c	static void isr_low_prio(void) __interrupt 2 {
002146   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002148   ffe5
00214a   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00214c   ffe5
00214e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002150   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
002152   ffe5
002154   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
002156   ffe5
002158   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
00215a   ffe5
00215c   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
00215e   ffe5
002160   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
002162   ffe5
002164   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
002166   ffe5
002168   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00216a   ffe5
00216c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00216e   ffd9
002170   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002172   ffe5
                                           ;	.line	238; pillefyrsstyring.c	if (PIR1bits.TMR1IF) {
002174   a09e     btfss   0x9e, 0, 0       	BTFSS	_PIR1bits, 0
002176   d010     bra     0x2198           	BRA	_00235_DS_
                                           ;	.line	239; pillefyrsstyring.c	TMR1H = (unsigned char)(TIMER1_RELOAD >> 8);    // 1 ms delay at 8 MHz
002178   0efe     movlw   0xfe             	MOVLW	0xfe
00217a   6ecf     movwf   0xcf, 0          	MOVWF	_TMR1H
                                           ;	.line	240; pillefyrsstyring.c	TMR1L = (unsigned char)TIMER1_RELOAD;
00217c   0ec8     movlw   0xc8             	MOVLW	0xc8
00217e   6ece     movwf   0xce, 0          	MOVWF	_TMR1L
                                           ;	.line	241; pillefyrsstyring.c	PIR1bits.TMR1IF = 0;    /* Clear the Timer Flag  */
002180   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
002182   010f     movlb   0xf              	BANKSEL	_timer_1_ms
                                           ;	.line	242; pillefyrsstyring.c	timer_1_ms++;
002184   2b57     incf    0x57, 0x1, 0x1   	INCF	_timer_1_ms, F, B
002186   e308     bnc     0x2198           	BNC	_00235_DS_
002188   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 1)
00218a   2b58     incf    0x58, 0x1, 0x1   	INCF	(_timer_1_ms + 1), F, B
00218c   e305     bnc     0x2198           	BNC	_00235_DS_
00218e   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 2)
002190   3f59     incfsz  0x59, 0x1, 0x1   	INCFSZ	(_timer_1_ms + 2), F, B
002192   d002     bra     0x2198           	BRA	_30367_DS_
002194   010f     movlb   0xf              	BANKSEL	(_timer_1_ms + 3)
002196   2b5a     incf    0x5a, 0x1, 0x1   	INCF	(_timer_1_ms + 3), F, B
                                           _30367_DS_:
                                           _00246_DS_:
                                           _00235_DS_:
                                           ;	.line	246; pillefyrsstyring.c	if (usart_drdy()) {
002198   ec9f     call    0x2d3e, 0        	CALL	_usart_drdy
00219a   f016
00219c   6e00     movwf   0, 0             	MOVWF	r0x00
00219e   5000     movf    0, 0, 0          	MOVF	r0x00, W
0021a0   e00b     bz      0x21b8           	BZ	_00238_DS_
                                           ;	.line	248; pillefyrsstyring.c	c = usart_getc();
0021a2   ece3     call    0x2bc6, 0        	CALL	_usart_getc
0021a4   f015
0021a6   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	249; pillefyrsstyring.c	fifo_put(c);
0021a8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0021aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021ac   ec8a     call    0x2314, 0        	CALL	_fifo_put
0021ae   f011
0021b0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	250; pillefyrsstyring.c	usart_putc(c);
0021b2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0021b4   ec8c     call    0x2d18, 0        	CALL	_usart_putc
0021b6   f016
                                           _00238_DS_:
0021b8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0021ba   f000
0021bc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021be   ffd9
0021c0   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0021c2   fffb
0021c4   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0021c6   fffa
0021c8   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0021ca   ffea
0021cc   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0021ce   ffe9
0021d0   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0021d2   fff4
0021d4   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0021d6   fff3
0021d8   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
0021da   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0021dc   ffe0
0021de   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0021e0   ffd8
0021e2   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_pillefyrsstyring__isr_high_prio	code
                                           _isr_high_prio:
                                           ;	.line	202; pillefyrsstyring.c	static void isr_high_prio(void) __interrupt 1 {
00130c   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
00130e   ffe5
001310   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
001312   ffe5
001314   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001316   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
001318   ffe5
00131a   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
00131c   ffe5
00131e   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
001320   ffe5
001322   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
001324   ffe5
001326   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001328   ffe5
00132a   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
00132c   ffe5
00132e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001330   ffe5
001332   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001334   ffd9
001336   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001338   ffe5
00133a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00133c   ffe5
                                           ;	.line	203; pillefyrsstyring.c	if (INTCONbits.TMR0IF) {
00133e   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
001340   d063     bra     0x1408           	BRA	_00204_DS_
                                           ;	.line	204; pillefyrsstyring.c	TMR0H = (unsigned char)(TIMER0_RELOAD >> 8);
001342   0efd     movlw   0xfd             	MOVLW	0xfd
001344   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	205; pillefyrsstyring.c	TMR0L = (unsigned char)TIMER0_RELOAD;   /* Reload the Timer ASAP */
001346   6ad6     clrf    0xd6, 0          	CLRF	_TMR0L
                                           ;	.line	206; pillefyrsstyring.c	INTCONbits.TMR0IF = 0;  /* Clear the Timer Flag  */
001348   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	209; pillefyrsstyring.c	sensor_inputs = get_inputs();
00134a   ec0a     call    0x2c14, 0        	CALL	_get_inputs
00134c   f016
00134e   0108     movlb   0x8              	BANKSEL	_sensor_inputs
001350   6f02     movwf   0x2, 0x1         	MOVWF	_sensor_inputs, B
001352   010f     movlb   0xf              	BANKSEL	_i
                                           ;	.line	212; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
001354   6b76     clrf    0x76, 0x1        	CLRF	_i, B
001356   010f     movlb   0xf              	BANKSEL	(_i + 1)
001358   6b77     clrf    0x77, 0x1        	CLRF	(_i + 1), B
                                           _00202_DS_:
                                           ;	.line	213; pillefyrsstyring.c	if (ac_power_pwm_counter < output_ac_power_pwm[i]) {
00135a   0e51     movlw   0x51             	MOVLW	LOW(_output_ac_power_pwm)
00135c   010f     movlb   0xf              	BANKSEL	_i
00135e   2576     addwf   0x76, 0, 0x1     	ADDWF	_i, W, B
001360   6e00     movwf   0, 0             	MOVWF	r0x00
001362   0e0f     movlw   0xf              	MOVLW	HIGH(_output_ac_power_pwm)
001364   010f     movlb   0xf              	BANKSEL	(_i + 1)
001366   2177     addwfc  0x77, 0, 0x1     	ADDWFC	(_i + 1), W, B
001368   6e01     movwf   0x1, 0           	MOVWF	r0x01
00136a   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00136c   ffe9
00136e   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
001370   ffea
001372   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
001374   f000
001376   5000     movf    0, 0, 0          	MOVF	r0x00, W
001378   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
00137a   5d03     subwf   0x3, 0, 0x1      	SUBWF	_ac_power_pwm_counter, W, B
00137c   e21b     bc      0x13b4           	BC	_00197_DS_
                                           ;	.line	215; pillefyrsstyring.c	set_ac_power(1 << i, 0xff);
00137e   0e01     movlw   0x1              	MOVLW	0x01
001380   6e00     movwf   0, 0             	MOVWF	r0x00
001382   6a01     clrf    0x1, 0           	CLRF	r0x01
001384   010f     movlb   0xf              	BANKSEL	_i
001386   5176     movf    0x76, 0, 0x1     	MOVF	_i, W, B
001388   e006     bz      0x1396           	BZ	_00225_DS_
00138a   6ce8     negf    0xe8, 0          	NEGF	WREG
00138c   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00226_DS_:
00138e   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
001390   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
001392   0f01     addlw   0x1              	ADDLW	0x01
001394   e3fc     bnc     0x138e           	BNC	_00226_DS_
                                           _00225_DS_:
001396   0eff     movlw   0xff             	MOVLW	0xff
001398   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00139a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00139c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00139e   ec72     call    0x24e4, 0        	CALL	_set_ac_power
0013a0   f012
0013a2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0013a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0013a6   010f     movlb   0xf              	BANKSEL	_i
                                           ;	.line	217; pillefyrsstyring.c	if (i == 0) {
0013a8   5176     movf    0x76, 0, 0x1     	MOVF	_i, W, B
0013aa   010f     movlb   0xf              	BANKSEL	(_i + 1)
0013ac   1177     iorwf   0x77, 0, 0x1     	IORWF	(_i + 1), W, B
0013ae   e11c     bnz     0x13e8           	BNZ	_00203_DS_
                                           ;	.line	218; pillefyrsstyring.c	RELAY = 1;
0013b0   8a8b     bsf     0x8b, 0x5, 0     	BSF	_LATCbits, 5
0013b2   d01a     bra     0x13e8           	BRA	_00203_DS_
                                           _00197_DS_:
                                           ;	.line	224; pillefyrsstyring.c	set_ac_power(1 << i, 0x00);
0013b4   0e01     movlw   0x1              	MOVLW	0x01
0013b6   6e00     movwf   0, 0             	MOVWF	r0x00
0013b8   6a01     clrf    0x1, 0           	CLRF	r0x01
0013ba   010f     movlb   0xf              	BANKSEL	_i
0013bc   5176     movf    0x76, 0, 0x1     	MOVF	_i, W, B
0013be   e006     bz      0x13cc           	BZ	_00227_DS_
0013c0   6ce8     negf    0xe8, 0          	NEGF	WREG
0013c2   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00228_DS_:
0013c4   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
0013c6   3601     rlcf    0x1, 0x1, 0      	RLCF	r0x01, F
0013c8   0f01     addlw   0x1              	ADDLW	0x01
0013ca   e3fc     bnc     0x13c4           	BNC	_00228_DS_
                                           _00227_DS_:
0013cc   0e00     movlw   0                	MOVLW	0x00
0013ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013d0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0013d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0013d4   ec72     call    0x24e4, 0        	CALL	_set_ac_power
0013d6   f012
0013d8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0013da   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0013dc   010f     movlb   0xf              	BANKSEL	_i
                                           ;	.line	226; pillefyrsstyring.c	if (i == 0) {
0013de   5176     movf    0x76, 0, 0x1     	MOVF	_i, W, B
0013e0   010f     movlb   0xf              	BANKSEL	(_i + 1)
0013e2   1177     iorwf   0x77, 0, 0x1     	IORWF	(_i + 1), W, B
0013e4   e101     bnz     0x13e8           	BNZ	_00203_DS_
                                           ;	.line	227; pillefyrsstyring.c	RELAY = 0;
0013e6   9a8b     bcf     0x8b, 0x5, 0     	BCF	_LATCbits, 5
                                           _00203_DS_:
0013e8   010f     movlb   0xf              	BANKSEL	_i
                                           ;	.line	212; pillefyrsstyring.c	for (i = 0; i < AC_POWER_OUTS; i++) {
0013ea   3f76     incfsz  0x76, 0x1, 0x1   	INCFSZ	_i, F, B
0013ec   d002     bra     0x13f2           	BRA	_40368_DS_
0013ee   010f     movlb   0xf              	BANKSEL	(_i + 1)
0013f0   2b77     incf    0x77, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _40368_DS_:
0013f2   0e00     movlw   0                	MOVLW	0x00
0013f4   010f     movlb   0xf              	BANKSEL	(_i + 1)
0013f6   5d77     subwf   0x77, 0, 0x1     	SUBWF	(_i + 1), W, B
0013f8   e103     bnz     0x1400           	BNZ	_00229_DS_
0013fa   0e06     movlw   0x6              	MOVLW	0x06
0013fc   010f     movlb   0xf              	BANKSEL	_i
0013fe   5d76     subwf   0x76, 0, 0x1     	SUBWF	_i, W, B
                                           _00229_DS_:
001400   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
001402   d7ab     bra     0x135a           	BRA	_00202_DS_
001404   0108     movlb   0x8              	BANKSEL	_ac_power_pwm_counter
                                           ;	.line	232; pillefyrsstyring.c	ac_power_pwm_counter++;
001406   2b03     incf    0x3, 0x1, 0x1    	INCF	_ac_power_pwm_counter, F, B
                                           _00204_DS_:
001408   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00140a   f001
00140c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00140e   f000
001410   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001412   ffd9
001414   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
001416   fffb
001418   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00141a   fffa
00141c   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00141e   ffea
001420   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
001422   ffe9
001424   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
001426   fff4
001428   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
00142a   fff3
00142c   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
00142e   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
001430   ffe0
001432   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
001434   ffd8
001436   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001438   704f     btg     0x4f, 0, 0       	DB	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x6b, 0x65, 0x72, 0x20, 0x73
00143a   6e65     movwf   0x65, 0          
00143c   7453     btg     0x53, 0x2, 0     
00143e   6b6f     clrf    0x6f, 0x1        
001440   7265     btg     0x65, 0x1, 0     
001442   7320     btg     0x20, 0x1, 0x1   
001444   6174     cpfslt  0x74, 0x1        	DB	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x20, 0x73
001446   7472     btg     0x72, 0x2, 0     
001448   6e69     movwf   0x69, 0          
00144a   2e67     decfsz  0x67, 0x1, 0     
00144c   2e2e     decfsz  0x2e, 0x1, 0     
00144e   7320     btg     0x20, 0x1, 0x1   
001450   7265     btg     0x65, 0x1, 0     	DB	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e
001452   6169     cpfslt  0x69, 0x1        
001454   206c     addwfc  0x6c, 0, 0       
001456   6f77     movwf   0x77, 0x1        
001458   6b72     clrf    0x72, 0x1        
00145a   6e69     movwf   0x69, 0          
00145c   0a67     xorlw   0x67             	DB	0x67, 0x0a, 0x0d, 0x00
00145e   000d     tblwt   *+               
                                           ; ; Starting pCode block
                                           __str_1:
001460   0d0a     mullw   0xa              	DB	0x0a, 0x0d, 0x00
001462   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001464   2567     addwf   0x67, 0, 0x1     	DB	0x67, 0x25, 0x30, 0x32, 0x78, 0x0a, 0x0d, 0x00
001466   3230     rrcf    0x30, 0x1, 0     
001468   0a78     xorlw   0x78             
00146a   000d     tblwt   *+               
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3176 (0x0c68) bytes ( 2.42%)
                                           ;           	 1588 (0x0634) words
                                           ; udata size:	  186 (0x00ba) bytes ( 4.84%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Oct 27 2013) (Mac OS X x86_64)
                                           ; This file was generated Tue Dec 17 01:10:36 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_buffer
                                           	global	_lcd_init
                                           	global	_lcd_enable
                                           	global	_lcd_status
                                           	global	_lcd_reset
                                           	global	_lcd_screenon
                                           	global	_lcd_cls
                                           	global	_lcd_setpage
                                           	global	_lcd_setyaddr
                                           	global	_lcd_waitbusy
                                           	global	_lcd_write
                                           	global	_lcd_selectside
                                           	global	_lcd_read
                                           	global	_lcd_plot_pixel
                                           	global	_latched_lcd_power
                                           	global	_latched_lcd_enable
                                           	global	_latched_lcd_di
                                           	global	_latched_lcd_rw
                                           	global	_latched_lcd_rst
                                           	global	_latched_lcd_cs2
                                           	global	_latched_lcd_cs1
                                           	global	_latched_lcd_data
                                           	global	__latch_3_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_sleep_ms
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_glcd_0	udata
                                           _lcd_buffer	res	1
                                           
                                           udata_glcd_1	udata
                                           __latch_3_data	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_data	code
                                           _latched_lcd_data:
                                           ;	.line	367; glcd.c	void latched_lcd_data(unsigned char value) {
002b76   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b78   ffe5
002b7a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b7c   ffd9
002b7e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002b80   ffe5
002b82   0e02     movlw   0x2              	MOVLW	0x02
002b84   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002b86   f000
                                           ;	.line	368; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002b88   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	369; glcd.c	LATCH_DATA = value;
002b8a   c000     movff   0, 0xf8c         	MOVFF	r0x00, _LATD
002b8c   ff8c
                                           ;	.line	370; glcd.c	LATCH_4 = LATCH_4_ENABLED;
002b8e   848b     bsf     0x8b, 0x2, 0     	BSF	_LATCbits, 2
                                           ;	.line	371; glcd.c	LATCH_4 = LATCH_4_DISABLED;
002b90   948b     bcf     0x8b, 0x2, 0     	BCF	_LATCbits, 2
                                           ;	.line	372; glcd.c	LATCH_DATA = 0x00;
002b92   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002b94   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002b96   f000
002b98   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b9a   ffd9
002b9c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs1	code
                                           _latched_lcd_cs1:
                                           ;	.line	352; glcd.c	void latched_lcd_cs1(unsigned char value) {
0027c2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027c4   ffe5
0027c6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027c8   ffd9
0027ca   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0027cc   ffe5
0027ce   0e02     movlw   0x2              	MOVLW	0x02
0027d0   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0027d2   f000
                                           ;	.line	353; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0027d4   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	354; glcd.c	if (value) {	// set it
0027d6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0027d8   e005     bz      0x27e4           	BZ	_00268_DS_
0027da   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	355; glcd.c	_latch_3_data |= 0b00100000;
0027dc   8b06     bsf     0x6, 0x5, 0x1    	BSF	__latch_3_data, 5, B
                                           ;	.line	356; glcd.c	LATCH_DATA = _latch_3_data;
0027de   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0027e0   ff8c
0027e2   d004     bra     0x27ec           	BRA	_00269_DS_
                                           _00268_DS_:
0027e4   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	359; glcd.c	_latch_3_data &= 0b11011111;
0027e6   9b06     bcf     0x6, 0x5, 0x1    	BCF	__latch_3_data, 5, B
                                           ;	.line	360; glcd.c	LATCH_DATA = _latch_3_data;
0027e8   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0027ea   ff8c
                                           _00269_DS_:
                                           ;	.line	362; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0027ec   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	363; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0027ee   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	364; glcd.c	LATCH_DATA = 0x00;
0027f0   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0027f2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0027f4   f000
0027f6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027f8   ffd9
0027fa   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_cs2	code
                                           _latched_lcd_cs2:
                                           ;	.line	337; glcd.c	void latched_lcd_cs2(unsigned char value) {
0027fc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027fe   ffe5
002800   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002802   ffd9
002804   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002806   ffe5
002808   0e02     movlw   0x2              	MOVLW	0x02
00280a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00280c   f000
                                           ;	.line	338; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
00280e   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	339; glcd.c	if (value) {	// set it
002810   5000     movf    0, 0, 0          	MOVF	r0x00, W
002812   e005     bz      0x281e           	BZ	_00260_DS_
002814   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	340; glcd.c	_latch_3_data |= 0b00010000;
002816   8906     bsf     0x6, 0x4, 0x1    	BSF	__latch_3_data, 4, B
                                           ;	.line	341; glcd.c	LATCH_DATA = _latch_3_data;
002818   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00281a   ff8c
00281c   d004     bra     0x2826           	BRA	_00261_DS_
                                           _00260_DS_:
00281e   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	344; glcd.c	_latch_3_data &= 0b11101111;
002820   9906     bcf     0x6, 0x4, 0x1    	BCF	__latch_3_data, 4, B
                                           ;	.line	345; glcd.c	LATCH_DATA = _latch_3_data;
002822   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002824   ff8c
                                           _00261_DS_:
                                           ;	.line	347; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002826   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	348; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002828   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	349; glcd.c	LATCH_DATA = 0x00;
00282a   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00282c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00282e   f000
002830   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002832   ffd9
002834   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rst	code
                                           _latched_lcd_rst:
                                           ;	.line	322; glcd.c	void latched_lcd_rst(unsigned char value) {
002836   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002838   ffe5
00283a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00283c   ffd9
00283e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002840   ffe5
002842   0e02     movlw   0x2              	MOVLW	0x02
002844   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002846   f000
                                           ;	.line	323; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002848   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	324; glcd.c	if (value) {	// set it
00284a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00284c   e005     bz      0x2858           	BZ	_00252_DS_
00284e   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	325; glcd.c	_latch_3_data |= 0b00001000;
002850   8706     bsf     0x6, 0x3, 0x1    	BSF	__latch_3_data, 3, B
                                           ;	.line	326; glcd.c	LATCH_DATA = _latch_3_data;
002852   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002854   ff8c
002856   d004     bra     0x2860           	BRA	_00253_DS_
                                           _00252_DS_:
002858   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	329; glcd.c	_latch_3_data &= 0b11110111;
00285a   9706     bcf     0x6, 0x3, 0x1    	BCF	__latch_3_data, 3, B
                                           ;	.line	330; glcd.c	LATCH_DATA = _latch_3_data;
00285c   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00285e   ff8c
                                           _00253_DS_:
                                           ;	.line	332; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002860   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	333; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002862   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	334; glcd.c	LATCH_DATA = 0x00;
002864   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002866   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002868   f000
00286a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00286c   ffd9
00286e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_rw	code
                                           _latched_lcd_rw:
                                           ;	.line	307; glcd.c	void latched_lcd_rw(unsigned char value) {
002870   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002872   ffe5
002874   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002876   ffd9
002878   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00287a   ffe5
00287c   0e02     movlw   0x2              	MOVLW	0x02
00287e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002880   f000
                                           ;	.line	308; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002882   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	309; glcd.c	if (value) {	// set it
002884   5000     movf    0, 0, 0          	MOVF	r0x00, W
002886   e005     bz      0x2892           	BZ	_00244_DS_
002888   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	310; glcd.c	_latch_3_data |= 0b00000100;
00288a   8506     bsf     0x6, 0x2, 0x1    	BSF	__latch_3_data, 2, B
                                           ;	.line	311; glcd.c	LATCH_DATA = _latch_3_data;
00288c   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00288e   ff8c
002890   d004     bra     0x289a           	BRA	_00245_DS_
                                           _00244_DS_:
002892   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	314; glcd.c	_latch_3_data &= 0b11111011;
002894   9506     bcf     0x6, 0x2, 0x1    	BCF	__latch_3_data, 2, B
                                           ;	.line	315; glcd.c	LATCH_DATA = _latch_3_data;
002896   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002898   ff8c
                                           _00245_DS_:
                                           ;	.line	317; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00289a   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	318; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00289c   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	319; glcd.c	LATCH_DATA = 0x00;
00289e   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028a0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028a2   f000
0028a4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028a6   ffd9
0028a8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_di	code
                                           _latched_lcd_di:
                                           ;	.line	292; glcd.c	void latched_lcd_di(unsigned char value) {
0028aa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028ac   ffe5
0028ae   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028b0   ffd9
0028b2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028b4   ffe5
0028b6   0e02     movlw   0x2              	MOVLW	0x02
0028b8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028ba   f000
                                           ;	.line	293; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028bc   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	294; glcd.c	if (value) {	// set it
0028be   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028c0   e005     bz      0x28cc           	BZ	_00236_DS_
0028c2   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	295; glcd.c	_latch_3_data |= 0b00000010;
0028c4   8306     bsf     0x6, 0x1, 0x1    	BSF	__latch_3_data, 1, B
                                           ;	.line	296; glcd.c	LATCH_DATA = _latch_3_data;
0028c6   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028c8   ff8c
0028ca   d004     bra     0x28d4           	BRA	_00237_DS_
                                           _00236_DS_:
0028cc   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	299; glcd.c	_latch_3_data &= 0b11111101;
0028ce   9306     bcf     0x6, 0x1, 0x1    	BCF	__latch_3_data, 1, B
                                           ;	.line	300; glcd.c	LATCH_DATA = _latch_3_data;
0028d0   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
0028d2   ff8c
                                           _00237_DS_:
                                           ;	.line	302; glcd.c	LATCH_3 = LATCH_3_ENABLED;
0028d4   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	303; glcd.c	LATCH_3 = LATCH_3_DISABLED;
0028d6   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	304; glcd.c	LATCH_DATA = 0x00;
0028d8   6a8c     clrf    0x8c, 0          	CLRF	_LATD
0028da   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0028dc   f000
0028de   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028e0   ffd9
0028e2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_enable	code
                                           _latched_lcd_enable:
                                           ;	.line	277; glcd.c	void latched_lcd_enable(unsigned char value) {
0028e4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028e6   ffe5
0028e8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028ea   ffd9
0028ec   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0028ee   ffe5
0028f0   0e02     movlw   0x2              	MOVLW	0x02
0028f2   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0028f4   f000
                                           ;	.line	278; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
0028f6   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	279; glcd.c	if (value) {	// set it
0028f8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0028fa   e005     bz      0x2906           	BZ	_00228_DS_
0028fc   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	280; glcd.c	_latch_3_data |= 0b00000001;
0028fe   8106     bsf     0x6, 0, 0x1      	BSF	__latch_3_data, 0, B
                                           ;	.line	281; glcd.c	LATCH_DATA = _latch_3_data;
002900   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002902   ff8c
002904   d004     bra     0x290e           	BRA	_00229_DS_
                                           _00228_DS_:
002906   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	284; glcd.c	_latch_3_data &= 0b11111110;
002908   9106     bcf     0x6, 0, 0x1      	BCF	__latch_3_data, 0, B
                                           ;	.line	285; glcd.c	LATCH_DATA = _latch_3_data;
00290a   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00290c   ff8c
                                           _00229_DS_:
                                           ;	.line	287; glcd.c	LATCH_3 = LATCH_3_ENABLED;
00290e   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	288; glcd.c	LATCH_3 = LATCH_3_DISABLED;
002910   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	289; glcd.c	LATCH_DATA = 0x00;
002912   6a8c     clrf    0x8c, 0          	CLRF	_LATD
002914   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002916   f000
002918   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00291a   ffd9
00291c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__latched_lcd_power	code
                                           _latched_lcd_power:
                                           ;	.line	262; glcd.c	void latched_lcd_power(unsigned char value) {
00291e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002920   ffe5
002922   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002924   ffd9
002926   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002928   ffe5
00292a   0e02     movlw   0x2              	MOVLW	0x02
00292c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00292e   f000
                                           ;	.line	263; glcd.c	LATCH_DATA_TRIS = 0x00;		// outputs
002930   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	264; glcd.c	if (value) {	// set it
002932   5000     movf    0, 0, 0          	MOVF	r0x00, W
002934   e005     bz      0x2940           	BZ	_00220_DS_
002936   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	265; glcd.c	_latch_3_data |= 0b10000000;
002938   8f06     bsf     0x6, 0x7, 0x1    	BSF	__latch_3_data, 7, B
                                           ;	.line	266; glcd.c	LATCH_DATA = _latch_3_data;
00293a   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
00293c   ff8c
00293e   d004     bra     0x2948           	BRA	_00221_DS_
                                           _00220_DS_:
002940   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	269; glcd.c	_latch_3_data &= 0b01111111;
002942   9f06     bcf     0x6, 0x7, 0x1    	BCF	__latch_3_data, 7, B
                                           ;	.line	270; glcd.c	LATCH_DATA = _latch_3_data;
002944   c806     movff   0x806, 0xf8c     	MOVFF	__latch_3_data, _LATD
002946   ff8c
                                           _00221_DS_:
                                           ;	.line	272; glcd.c	LATCH_3 = LATCH_3_ENABLED;
002948   8c89     bsf     0x89, 0x6, 0     	BSF	_LATAbits, 6
                                           ;	.line	273; glcd.c	LATCH_3 = LATCH_3_DISABLED;
00294a   9c89     bcf     0x89, 0x6, 0     	BCF	_LATAbits, 6
                                           ;	.line	274; glcd.c	LATCH_DATA = 0x00;
00294c   6a8c     clrf    0x8c, 0          	CLRF	_LATD
00294e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002950   f000
002952   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002954   ffd9
002956   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_plot_pixel	code
                                           _lcd_plot_pixel:
                                           ;	.line	242; glcd.c	void lcd_plot_pixel(unsigned char rx, unsigned char ry) {
002002   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002004   ffe5
002006   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002008   ffd9
00200a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00200c   ffe5
00200e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
002010   ffe5
002012   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
002014   ffe5
002016   0e02     movlw   0x2              	MOVLW	0x02
002018   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00201a   f000
00201c   0e03     movlw   0x3              	MOVLW	0x03
00201e   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
002020   f001
                                           ;	.line	247; glcd.c	if (rx & 64) {
002022   ac00     btfss   0, 0x6, 0        	BTFSS	r0x00, 6
002024   d006     bra     0x2032           	BRA	_00203_DS_
                                           ;	.line	248; glcd.c	lcd_selectside(LCD_RIGHT);
002026   0e02     movlw   0x2              	MOVLW	0x02
002028   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00202a   ecef     call    0x25de, 0        	CALL	_lcd_selectside
00202c   f012
00202e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002030   d005     bra     0x203c           	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	251; glcd.c	lcd_selectside(LCD_LEFT);
002032   0e01     movlw   0x1              	MOVLW	0x01
002034   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002036   ecef     call    0x25de, 0        	CALL	_lcd_selectside
002038   f012
00203a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00204_DS_:
                                           ;	.line	254; glcd.c	lcd_setpage( ry >> 3);		// fast /8
00203c   3801     swapf   0x1, 0, 0        	SWAPF	r0x01, W
00203e   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
002040   0b1f     andlw   0x1f             	ANDLW	0x1f
002042   6e02     movwf   0x2, 0           	MOVWF	r0x02
002044   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
002046   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002048   ec3b     call    0x2676, 0        	CALL	_lcd_setpage
00204a   f013
00204c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	255; glcd.c	lcd_setyaddr( rx & 0b00111111);
00204e   0e3f     movlw   0x3f             	MOVLW	0x3f
002050   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
002052   5000     movf    0, 0, 0          	MOVF	r0x00, W
002054   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002056   ec17     call    0x262e, 0        	CALL	_lcd_setyaddr
002058   f013
00205a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	256; glcd.c	d = lcd_read();				// read to move data to GLCD buffer,
00205c   ec67     call    0x2cce, 0        	CALL	_lcd_read
00205e   f016
                                           ;	.line	257; glcd.c	d = lcd_read();				// read again to transfer to pic
002060   ec67     call    0x2cce, 0        	CALL	_lcd_read
002062   f016
002064   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ;	.line	258; glcd.c	lcd_setyaddr( rx & 0b00111111); 
002066   5000     movf    0, 0, 0          	MOVF	r0x00, W
002068   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00206a   ec17     call    0x262e, 0        	CALL	_lcd_setyaddr
00206c   f013
00206e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	259; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
002070   0e07     movlw   0x7              	MOVLW	0x07
002072   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
002074   0e01     movlw   0x1              	MOVLW	0x01
002076   6e00     movwf   0, 0             	MOVWF	r0x00
002078   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00207a   e005     bz      0x2086           	BZ	_00213_DS_
00207c   6ce8     negf    0xe8, 0          	NEGF	WREG
00207e   90d8     bcf     0xd8, 0, 0       	BCF	STATUS, 0
                                           _00214_DS_:
002080   3600     rlcf    0, 0x1, 0        	RLCF	r0x00, F
002082   0f01     addlw   0x1              	ADDLW	0x01
002084   e3fd     bnc     0x2080           	BNC	_00214_DS_
                                           _00213_DS_:
002086   5000     movf    0, 0, 0          	MOVF	r0x00, W
002088   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
00208a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00208c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00208e   ec5e     call    0x26bc, 0        	CALL	_lcd_write
002090   f013
002092   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002094   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
002096   f002
002098   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00209a   f001
00209c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00209e   f000
0020a0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020a2   ffd9
0020a4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_read	code
                                           _lcd_read:
                                           ;	.line	223; glcd.c	unsigned char lcd_read (void) {
002cce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cd0   ffe5
002cd2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cd4   ffd9
                                           ;	.line	237; glcd.c	lcd_enable();
002cd6   ec7f     call    0x26fe, 0        	CALL	_lcd_enable
002cd8   f013
                                           ;	.line	238; glcd.c	return 0;
002cda   6ae8     clrf    0xe8, 0          	CLRF	WREG
002cdc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cde   ffd9
002ce0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_selectside	code
                                           _lcd_selectside:
                                           ;	.line	198; glcd.c	void lcd_selectside(unsigned char sides) {
0025de   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0025e0   ffe5
0025e2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0025e4   ffd9
0025e6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0025e8   ffe5
0025ea   0e02     movlw   0x2              	MOVLW	0x02
0025ec   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0025ee   f000
                                           ;	.line	201; glcd.c	if (sides & LCD_LEFT) {
0025f0   a000     btfss   0, 0, 0          	BTFSS	r0x00, 0
0025f2   d006     bra     0x2600           	BRA	_00178_DS_
                                           ;	.line	203; glcd.c	latched_lcd_cs1(1);
0025f4   0e01     movlw   0x1              	MOVLW	0x01
0025f6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025f8   ece1     call    0x27c2, 0        	CALL	_latched_lcd_cs1
0025fa   f013
0025fc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0025fe   d005     bra     0x260a           	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	207; glcd.c	latched_lcd_cs1(0);
002600   0e00     movlw   0                	MOVLW	0x00
002602   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002604   ece1     call    0x27c2, 0        	CALL	_latched_lcd_cs1
002606   f013
002608   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00179_DS_:
                                           ;	.line	210; glcd.c	if (sides & LCD_RIGHT) {
00260a   a200     btfss   0, 0x1, 0        	BTFSS	r0x00, 1
00260c   d006     bra     0x261a           	BRA	_00181_DS_
                                           ;	.line	212; glcd.c	latched_lcd_cs2(1);
00260e   0e01     movlw   0x1              	MOVLW	0x01
002610   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002612   ecfe     call    0x27fc, 0        	CALL	_latched_lcd_cs2
002614   f013
002616   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002618   d005     bra     0x2624           	BRA	_00183_DS_
                                           _00181_DS_:
                                           ;	.line	216; glcd.c	latched_lcd_cs2(0);
00261a   0e00     movlw   0                	MOVLW	0x00
00261c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00261e   ecfe     call    0x27fc, 0        	CALL	_latched_lcd_cs2
002620   f013
002622   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00183_DS_:
002624   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002626   f000
002628   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00262a   ffd9
00262c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_write	code
                                           _lcd_write:
                                           ;	.line	185; glcd.c	void lcd_write (unsigned char d) {
0026bc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0026be   ffe5
0026c0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0026c2   ffd9
0026c4   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0026c6   ffe5
0026c8   0e02     movlw   0x2              	MOVLW	0x02
0026ca   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0026cc   f000
                                           ;	.line	186; glcd.c	lcd_waitbusy();
0026ce   ece5     call    0x29ca, 0        	CALL	_lcd_waitbusy
0026d0   f014
                                           ;	.line	188; glcd.c	latched_lcd_di(1);
0026d2   0e01     movlw   0x1              	MOVLW	0x01
0026d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026d6   ec55     call    0x28aa, 0        	CALL	_latched_lcd_di
0026d8   f014
0026da   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	190; glcd.c	latched_lcd_rw(0);
0026dc   0e00     movlw   0                	MOVLW	0x00
0026de   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026e0   ec38     call    0x2870, 0        	CALL	_latched_lcd_rw
0026e2   f014
0026e4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	193; glcd.c	latched_lcd_data(d);
0026e6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0026e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026ea   ecbb     call    0x2b76, 0        	CALL	_latched_lcd_data
0026ec   f015
0026ee   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	194; glcd.c	lcd_enable();
0026f0   ec7f     call    0x26fe, 0        	CALL	_lcd_enable
0026f2   f013
0026f4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0026f6   f000
0026f8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026fa   ffd9
0026fc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_waitbusy	code
                                           _lcd_waitbusy:
                                           ;	.line	177; glcd.c	void lcd_waitbusy(void) {
0029ca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0029cc   ffe5
0029ce   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0029d0   ffd9
0029d2   0000     nop                      	nop 
0029d4   0000     nop                      	nop 
0029d6   0000     nop                      	nop 
0029d8   0000     nop                      	nop 
0029da   0000     nop                      	nop 
0029dc   0000     nop                      	nop 
0029de   0000     nop                      	nop 
0029e0   0000     nop                      	nop 
                                           ;	.line	180; glcd.c	sleep_ms(10);
0029e2   0e00     movlw   0                	MOVLW	0x00
0029e4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0029e6   0e00     movlw   0                	MOVLW	0x00
0029e8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0029ea   0e00     movlw   0                	MOVLW	0x00
0029ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0029ee   0e0a     movlw   0xa              	MOVLW	0x0a
0029f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0029f2   ecdf     call    0x15be, 0        	CALL	_sleep_ms
0029f4   f00a
0029f6   0e04     movlw   0x4              	MOVLW	0x04
0029f8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0029fa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029fc   ffd9
0029fe   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setyaddr	code
                                           _lcd_setyaddr:
                                           ;	.line	163; glcd.c	void lcd_setyaddr(unsigned char y) {
00262e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002630   ffe5
002632   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002634   ffd9
002636   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002638   ffe5
00263a   0e02     movlw   0x2              	MOVLW	0x02
00263c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00263e   f000
                                           ;	.line	165; glcd.c	lcd_waitbusy();
002640   ece5     call    0x29ca, 0        	CALL	_lcd_waitbusy
002642   f014
                                           ;	.line	167; glcd.c	latched_lcd_di(0);
002644   0e00     movlw   0                	MOVLW	0x00
002646   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002648   ec55     call    0x28aa, 0        	CALL	_latched_lcd_di
00264a   f014
00264c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	168; glcd.c	latched_lcd_rw(0);
00264e   0e00     movlw   0                	MOVLW	0x00
002650   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002652   ec38     call    0x2870, 0        	CALL	_latched_lcd_rw
002654   f014
002656   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	170; glcd.c	latched_lcd_data(0b01000000 | (y & 0b00111111));
002658   0e3f     movlw   0x3f             	MOVLW	0x3f
00265a   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
00265c   8c00     bsf     0, 0x6, 0        	BSF	r0x00, 6
00265e   5000     movf    0, 0, 0          	MOVF	r0x00, W
002660   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002662   ecbb     call    0x2b76, 0        	CALL	_latched_lcd_data
002664   f015
002666   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	171; glcd.c	lcd_enable();
002668   ec7f     call    0x26fe, 0        	CALL	_lcd_enable
00266a   f013
00266c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00266e   f000
002670   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002672   ffd9
002674   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_setpage	code
                                           _lcd_setpage:
                                           ;	.line	148; glcd.c	void lcd_setpage(unsigned char page) {
002676   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002678   ffe5
00267a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00267c   ffd9
00267e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002680   ffe5
002682   0e02     movlw   0x2              	MOVLW	0x02
002684   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
002686   f000
                                           ;	.line	150; glcd.c	lcd_waitbusy();
002688   ece5     call    0x29ca, 0        	CALL	_lcd_waitbusy
00268a   f014
                                           ;	.line	152; glcd.c	latched_lcd_di(0);
00268c   0e00     movlw   0                	MOVLW	0x00
00268e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002690   ec55     call    0x28aa, 0        	CALL	_latched_lcd_di
002692   f014
002694   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	153; glcd.c	latched_lcd_rw(0);
002696   0e00     movlw   0                	MOVLW	0x00
002698   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00269a   ec38     call    0x2870, 0        	CALL	_latched_lcd_rw
00269c   f014
00269e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	155; glcd.c	latched_lcd_data(0b10111000 | page);
0026a0   0eb8     movlw   0xb8             	MOVLW	0xb8
0026a2   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
0026a4   5000     movf    0, 0, 0          	MOVF	r0x00, W
0026a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0026a8   ecbb     call    0x2b76, 0        	CALL	_latched_lcd_data
0026aa   f015
0026ac   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	156; glcd.c	lcd_enable();
0026ae   ec7f     call    0x26fe, 0        	CALL	_lcd_enable
0026b0   f013
0026b2   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0026b4   f000
0026b6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026b8   ffd9
0026ba   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_cls	code
                                           _lcd_cls:
                                           ;	.line	117; glcd.c	void lcd_cls(void) {
0021e4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021e6   ffe5
0021e8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021ea   ffd9
0021ec   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0021ee   ffe5
0021f0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0021f2   ffe5
0021f4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0021f6   ffe5
                                           ;	.line	121; glcd.c	lcd_selectside(LCD_BOTH);
0021f8   0e03     movlw   0x3              	MOVLW	0x03
0021fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0021fc   ecef     call    0x25de, 0        	CALL	_lcd_selectside
0021fe   f012
002200   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
002202   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00135_DS_:
                                           ;	.line	124; glcd.c	lcd_setpage(x);
002204   5000     movf    0, 0, 0          	MOVF	r0x00, W
002206   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002208   ec3b     call    0x2676, 0        	CALL	_lcd_setpage
00220a   f013
00220c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	127; glcd.c	lcd_setyaddr(0);
00220e   0e00     movlw   0                	MOVLW	0x00
002210   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002212   ec17     call    0x262e, 0        	CALL	_lcd_setyaddr
002214   f013
002216   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	131; glcd.c	latched_lcd_data(0);
002218   0e00     movlw   0                	MOVLW	0x00
00221a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00221c   ecbb     call    0x2b76, 0        	CALL	_latched_lcd_data
00221e   f015
002220   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	132; glcd.c	latched_lcd_rw(0);
002222   0e00     movlw   0                	MOVLW	0x00
002224   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002226   ec38     call    0x2870, 0        	CALL	_latched_lcd_rw
002228   f014
00222a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	133; glcd.c	latched_lcd_di(1);
00222c   0e01     movlw   0x1              	MOVLW	0x01
00222e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002230   ec55     call    0x28aa, 0        	CALL	_latched_lcd_di
002232   f014
002234   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002236   0e40     movlw   0x40             	MOVLW	0x40
002238   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00134_DS_:
                                           ;	.line	137; glcd.c	lcd_enable(); 
00223a   ec7f     call    0x26fe, 0        	CALL	_lcd_enable
00223c   f013
00223e   0000     nop                      	nop 
002240   0000     nop                      	nop 
002242   0000     nop                      	nop 
002244   0000     nop                      	nop 
002246   0000     nop                      	nop 
002248   0000     nop                      	nop 
00224a   0000     nop                      	nop 
00224c   0000     nop                      	nop 
00224e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002250   6e02     movwf   0x2, 0           	MOVWF	r0x02
002252   0402     decf    0x2, 0, 0        	DECF	r0x02, W
002254   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           ;	.line	136; glcd.c	for (y = 0; y < 64; y++) {
002256   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
002258   e1f0     bnz     0x223a           	BNZ	_00134_DS_
                                           ;	.line	122; glcd.c	for (x = 0; x < 8; x++) {
00225a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00225c   0e08     movlw   0x8              	MOVLW	0x08
00225e   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
002260   e3d1     bnc     0x2204           	BNC	_00135_DS_
                                           ;	.line	143; glcd.c	lcd_selectside(LCD_LEFT);
002262   0e01     movlw   0x1              	MOVLW	0x01
002264   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002266   ecef     call    0x25de, 0        	CALL	_lcd_selectside
002268   f012
00226a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00226c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00226e   f002
002270   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
002272   f001
002274   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
002276   f000
002278   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00227a   ffd9
00227c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_screenon	code
                                           _lcd_screenon:
                                           ;	.line	100; glcd.c	void lcd_screenon(unsigned char on) {
00248a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00248c   ffe5
00248e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002490   ffd9
002492   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
002494   ffe5
002496   0e02     movlw   0x2              	MOVLW	0x02
002498   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00249a   f000
                                           ;	.line	103; glcd.c	latched_lcd_cs1(1);
00249c   0e01     movlw   0x1              	MOVLW	0x01
00249e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024a0   ece1     call    0x27c2, 0        	CALL	_latched_lcd_cs1
0024a2   f013
0024a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	105; glcd.c	latched_lcd_cs2(1);
0024a6   0e01     movlw   0x1              	MOVLW	0x01
0024a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024aa   ecfe     call    0x27fc, 0        	CALL	_latched_lcd_cs2
0024ac   f013
0024ae   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	107; glcd.c	latched_lcd_rw(0);
0024b0   0e00     movlw   0                	MOVLW	0x00
0024b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024b4   ec38     call    0x2870, 0        	CALL	_latched_lcd_rw
0024b6   f014
0024b8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	109; glcd.c	latched_lcd_di(0);
0024ba   0e00     movlw   0                	MOVLW	0x00
0024bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024be   ec55     call    0x28aa, 0        	CALL	_latched_lcd_di
0024c0   f014
0024c2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	112; glcd.c	latched_lcd_data(0b00111110 | (on & 0b00000001));
0024c4   0e01     movlw   0x1              	MOVLW	0x01
0024c6   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
0024c8   0e3e     movlw   0x3e             	MOVLW	0x3e
0024ca   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
0024cc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0024ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0024d0   ecbb     call    0x2b76, 0        	CALL	_latched_lcd_data
0024d2   f015
0024d4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	113; glcd.c	lcd_enable();
0024d6   ec7f     call    0x26fe, 0        	CALL	_lcd_enable
0024d8   f013
0024da   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0024dc   f000
0024de   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0024e0   ffd9
0024e2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_reset	code
                                           _lcd_reset:
                                           ;	.line	79; glcd.c	void lcd_reset(void) {
00258c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00258e   ffe5
002590   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002592   ffd9
                                           ;	.line	86; glcd.c	sleep_ms(1);
002594   0e00     movlw   0                	MOVLW	0x00
002596   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002598   0e00     movlw   0                	MOVLW	0x00
00259a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00259c   0e00     movlw   0                	MOVLW	0x00
00259e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a0   0e01     movlw   0x1              	MOVLW	0x01
0025a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025a4   ecdf     call    0x15be, 0        	CALL	_sleep_ms
0025a6   f00a
0025a8   0e04     movlw   0x4              	MOVLW	0x04
0025aa   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; glcd.c	latched_lcd_rst(0);
0025ac   0e00     movlw   0                	MOVLW	0x00
0025ae   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025b0   ec1b     call    0x2836, 0        	CALL	_latched_lcd_rst
0025b2   f014
0025b4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	89; glcd.c	sleep_ms(1);
0025b6   0e00     movlw   0                	MOVLW	0x00
0025b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025ba   0e00     movlw   0                	MOVLW	0x00
0025bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025be   0e00     movlw   0                	MOVLW	0x00
0025c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025c2   0e01     movlw   0x1              	MOVLW	0x01
0025c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025c6   ecdf     call    0x15be, 0        	CALL	_sleep_ms
0025c8   f00a
0025ca   0e04     movlw   0x4              	MOVLW	0x04
0025cc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	91; glcd.c	latched_lcd_rst(1);
0025ce   0e01     movlw   0x1              	MOVLW	0x01
0025d0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0025d2   ec1b     call    0x2836, 0        	CALL	_latched_lcd_rst
0025d4   f014
0025d6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0025d8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025da   ffd9
0025dc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_status	code
                                           _lcd_status:
                                           ;	.line	52; glcd.c	unsigned char lcd_status(void) {
002b9e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ba0   ffe5
002ba2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ba4   ffd9
                                           ;	.line	74; glcd.c	sleep_ms(10);	
002ba6   0e00     movlw   0                	MOVLW	0x00
002ba8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002baa   0e00     movlw   0                	MOVLW	0x00
002bac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002bae   0e00     movlw   0                	MOVLW	0x00
002bb0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002bb2   0e0a     movlw   0xa              	MOVLW	0x0a
002bb4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002bb6   ecdf     call    0x15be, 0        	CALL	_sleep_ms
002bb8   f00a
002bba   0e04     movlw   0x4              	MOVLW	0x04
002bbc   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	75; glcd.c	return 1;	// no hardware support for reading from latch 4
002bbe   0e01     movlw   0x1              	MOVLW	0x01
002bc0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bc2   ffd9
002bc4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_enable	code
                                           _lcd_enable:
                                           ;	.line	42; glcd.c	void lcd_enable(void) {
0026fe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002700   ffe5
002702   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002704   ffd9
                                           ;	.line	44; glcd.c	latched_lcd_enable(1);
002706   0e01     movlw   0x1              	MOVLW	0x01
002708   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00270a   ec72     call    0x28e4, 0        	CALL	_latched_lcd_enable
00270c   f014
00270e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002710   0000     nop                      	nop 
002712   0000     nop                      	nop 
002714   0000     nop                      	nop 
002716   0000     nop                      	nop 
002718   0000     nop                      	nop 
00271a   0000     nop                      	nop 
00271c   0000     nop                      	nop 
00271e   0000     nop                      	nop 
                                           ;	.line	47; glcd.c	latched_lcd_enable(0);
002720   0e00     movlw   0                	MOVLW	0x00
002722   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002724   ec72     call    0x28e4, 0        	CALL	_latched_lcd_enable
002726   f014
002728   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00272a   0000     nop                      	nop 
00272c   0000     nop                      	nop 
00272e   0000     nop                      	nop 
002730   0000     nop                      	nop 
002732   0000     nop                      	nop 
002734   0000     nop                      	nop 
002736   0000     nop                      	nop 
002738   0000     nop                      	nop 
00273a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00273c   ffd9
00273e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_glcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	17; glcd.c	void lcd_init(void) {
002740   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002742   ffe5
002744   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002746   ffd9
                                           ;	.line	18; glcd.c	latched_lcd_power(1);
002748   0e01     movlw   0x1              	MOVLW	0x01
00274a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00274c   ec8f     call    0x291e, 0        	CALL	_latched_lcd_power
00274e   f014
002750   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
002752   0108     movlb   0x8              	BANKSEL	__latch_3_data
                                           ;	.line	26; glcd.c	_latch_3_data = 0x00;
002754   6b06     clrf    0x6, 0x1         	CLRF	__latch_3_data, B
                                           ;	.line	29; glcd.c	latched_lcd_cs1(0);
002756   0e00     movlw   0                	MOVLW	0x00
002758   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00275a   ece1     call    0x27c2, 0        	CALL	_latched_lcd_cs1
00275c   f013
00275e   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	31; glcd.c	latched_lcd_cs2(0);
002760   0e00     movlw   0                	MOVLW	0x00
002762   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002764   ecfe     call    0x27fc, 0        	CALL	_latched_lcd_cs2
002766   f013
002768   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	37; glcd.c	lcd_reset();
00276a   ecc6     call    0x258c, 0        	CALL	_lcd_reset
00276c   f012
                                           ;	.line	38; glcd.c	lcd_screenon(1);
00276e   0e01     movlw   0x1              	MOVLW	0x01
002770   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
002772   ec45     call    0x248a, 0        	CALL	_lcd_screenon
002774   f012
002776   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	39; glcd.c	lcd_cls();
002778   ecf2     call    0x21e4, 0        	CALL	_lcd_cls
00277a   f010
00277c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00277e   ffd9
002780   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1470 (0x05be) bytes ( 1.12%)
                                           ;           	  735 (0x02df) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.05%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
