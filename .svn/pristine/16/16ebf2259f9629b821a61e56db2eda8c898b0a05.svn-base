;--------------------------------------------------------
; File Created by SDCC : free open source ANSI-C Compiler
; Version 3.0.0 #6037 (Jul 16 2012) (Mac OS X x86_64)
; This file was generated Sat Dec 15 23:24:12 2012
;--------------------------------------------------------
; PIC16 port for the Microchip 16-bit core micros
;--------------------------------------------------------
	list	p=18f4620

	radix dec

;--------------------------------------------------------
; public variables in this module
;--------------------------------------------------------
	global _lcd_init
	global _lcd_enable
	global _lcd_status
	global _lcd_reset
	global _lcd_screenon
	global _lcd_cls
	global _lcd_setpage
	global _lcd_setyaddr
	global _lcd_waitbusy
	global _lcd_write
	global _lcd_selectside
	global _lcd_read
	global _lcd_plotpixel
	global _lcd_debug
	global _delay_20us
	global _delay_500us
	global _font8x5

;--------------------------------------------------------
; extern variables in this module
;--------------------------------------------------------
	extern __gptrget1
	extern _PORTAbits
	extern _PORTBbits
	extern _PORTCbits
	extern _PORTDbits
	extern _PORTEbits
	extern _LATAbits
	extern _LATBbits
	extern _LATCbits
	extern _LATDbits
	extern _LATEbits
	extern _TRISAbits
	extern _TRISBbits
	extern _TRISCbits
	extern _TRISDbits
	extern _TRISEbits
	extern _OSCTUNEbits
	extern _PIE1bits
	extern _PIR1bits
	extern _IPR1bits
	extern _PIE2bits
	extern _PIR2bits
	extern _IPR2bits
	extern _EECON1bits
	extern _RCSTAbits
	extern _TXSTAbits
	extern _T3CONbits
	extern _CMCONbits
	extern _CVRCONbits
	extern _ECCP1ASbits
	extern _PWM1CONbits
	extern _BAUDCONbits
	extern _CCP2CONbits
	extern _CCP1CONbits
	extern _ADCON2bits
	extern _ADCON1bits
	extern _ADCON0bits
	extern _SSPCON2bits
	extern _SSPCON1bits
	extern _SSPSTATbits
	extern _T2CONbits
	extern _T1CONbits
	extern _RCONbits
	extern _WDTCONbits
	extern _HLVDCONbits
	extern _OSCCONbits
	extern _T0CONbits
	extern _STATUSbits
	extern _FSR2Hbits
	extern _BSRbits
	extern _FSR1Hbits
	extern _FSR0Hbits
	extern _INTCON3bits
	extern _INTCON2bits
	extern _INTCONbits
	extern _TBLPTRUbits
	extern _PCLATHbits
	extern _PCLATUbits
	extern _STKPTRbits
	extern _TOSUbits
	extern _PORTA
	extern _PORTB
	extern _PORTC
	extern _PORTD
	extern _PORTE
	extern _LATA
	extern _LATB
	extern _LATC
	extern _LATD
	extern _LATE
	extern _TRISA
	extern _TRISB
	extern _TRISC
	extern _TRISD
	extern _TRISE
	extern _OSCTUNE
	extern _PIE1
	extern _PIR1
	extern _IPR1
	extern _PIE2
	extern _PIR2
	extern _IPR2
	extern _EECON1
	extern _EECON2
	extern _EEDATA
	extern _EEADR
	extern _EEADRH
	extern _RCSTA
	extern _TXSTA
	extern _TXREG
	extern _RCREG
	extern _SPBRG
	extern _SPBRGH
	extern _T3CON
	extern _TMR3L
	extern _TMR3H
	extern _CMCON
	extern _CVRCON
	extern _ECCP1AS
	extern _PWM1CON
	extern _BAUDCON
	extern _CCP2CON
	extern _CCPR2L
	extern _CCPR2H
	extern _CCP1CON
	extern _CCPR1L
	extern _CCPR1H
	extern _ADCON2
	extern _ADCON1
	extern _ADCON0
	extern _ADRESL
	extern _ADRESH
	extern _SSPCON2
	extern _SSPCON1
	extern _SSPSTAT
	extern _SSPADD
	extern _SSPBUF
	extern _T2CON
	extern _PR2
	extern _TMR2
	extern _T1CON
	extern _TMR1L
	extern _TMR1H
	extern _RCON
	extern _WDTCON
	extern _HLVDCON
	extern _OSCCON
	extern _T0CON
	extern _TMR0L
	extern _TMR0H
	extern _STATUS
	extern _FSR2L
	extern _FSR2H
	extern _PLUSW2
	extern _PREINC2
	extern _POSTDEC2
	extern _POSTINC2
	extern _INDF2
	extern _BSR
	extern _FSR1L
	extern _FSR1H
	extern _PLUSW1
	extern _PREINC1
	extern _POSTDEC1
	extern _POSTINC1
	extern _INDF1
	extern _WREG
	extern _FSR0L
	extern _FSR0H
	extern _PLUSW0
	extern _PREINC0
	extern _POSTDEC0
	extern _POSTINC0
	extern _INDF0
	extern _INTCON3
	extern _INTCON2
	extern _INTCON
	extern _PRODL
	extern _PRODH
	extern _TABLAT
	extern _TBLPTRL
	extern _TBLPTRH
	extern _TBLPTRU
	extern _PCL
	extern _PCLATH
	extern _PCLATU
	extern _STKPTR
	extern _TOSL
	extern _TOSH
	extern _TOSU
	extern _strlen
;--------------------------------------------------------
;	Equates to used internal registers
;--------------------------------------------------------
STATUS	equ	0xfd8
WREG	equ	0xfe8
TBLPTRL	equ	0xff6
TBLPTRH	equ	0xff7
TBLPTRU	equ	0xff8
TABLAT	equ	0xff5
FSR0L	equ	0xfe9
FSR1L	equ	0xfe1
FSR2L	equ	0xfd9
POSTDEC1	equ	0xfe5
PREINC1	equ	0xfe4
PLUSW2	equ	0xfdb
PRODL	equ	0xff3
PRODH	equ	0xff4


; Internal registers
.registers	udata_ovr	0x0000
r0x00	res	1
r0x01	res	1
r0x02	res	1
r0x03	res	1
r0x04	res	1
r0x05	res	1
r0x06	res	1
r0x07	res	1
r0x08	res	1
r0x09	res	1
r0x0a	res	1
r0x0b	res	1
r0x0c	res	1
r0x0d	res	1
r0x0e	res	1
r0x0f	res	1
r0x10	res	1

;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
; I code from now on!
; ; Starting pCode block
S_glcd__delay_500us	code
_delay_500us:
;	.line	263; glcd.c	void delay_500us() {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__delay_20us	code
_delay_20us:
;	.line	248; glcd.c	void delay_20us() {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_debug	code
_lcd_debug:
;	.line	230; glcd.c	void lcd_debug(unsigned char *s, unsigned char line) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVFF	r0x02, POSTDEC1
	MOVFF	r0x03, POSTDEC1
	MOVFF	r0x04, POSTDEC1
	MOVFF	r0x05, POSTDEC1
	MOVFF	r0x06, POSTDEC1
	MOVFF	r0x07, POSTDEC1
	MOVFF	r0x08, POSTDEC1
	MOVFF	r0x09, POSTDEC1
	MOVFF	r0x0a, POSTDEC1
	MOVFF	r0x0b, POSTDEC1
	MOVFF	r0x0c, POSTDEC1
	MOVFF	r0x0d, POSTDEC1
	MOVFF	r0x0e, POSTDEC1
	MOVFF	r0x0f, POSTDEC1
	MOVFF	r0x10, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
	MOVLW	0x04
	MOVFF	PLUSW2, r0x02
	MOVLW	0x05
	MOVFF	PLUSW2, r0x03
; ;multiply lit val:0x08 by variable r0x03 and store in r0x03
; ;Unrolled 8 X 8 multiplication
; ;FIXME: the function does not support result==WREG
;	.line	236; glcd.c	for (n = 0; n < strlen(s); n++) {
	MOVF	r0x03, W
	MULLW	0x08
	MOVFF	PRODL, r0x03
	CLRF	r0x04
	CLRF	r0x05
_00242_DS_:
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_strlen
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVLW	0x03
	ADDWF	FSR1L, F
	MOVFF	r0x04, r0x08
	CLRF	r0x09
	MOVF	r0x09, W
	ADDLW	0x80
	MOVWF	PRODL
	MOVF	r0x07, W
	ADDLW	0x80
	SUBWF	PRODL, W
	BNZ	_00258_DS_
	MOVF	r0x06, W
	SUBWF	r0x08, W
_00258_DS_:
	BTFSC	STATUS, 0
	BRA	_00246_DS_
;	.line	237; glcd.c	for (x = 0; x < FONT_WIDTH; x++) {
	MOVF	r0x04, W
	ADDWF	r0x00, W
	MOVWF	r0x06
	CLRF	WREG
	ADDWFC	r0x01, W
	MOVWF	r0x07
	CLRF	WREG
	ADDWFC	r0x02, W
	MOVWF	r0x08
	CLRF	r0x09
_00238_DS_:
	MOVLW	0x06
	SUBWF	r0x09, W
	BTFSC	STATUS, 0
	BRA	_00244_DS_
;	.line	238; glcd.c	for (y = 0; y < FONT_HEIGHT; y++) {
	MOVF	r0x05, W
	ADDWF	r0x09, W
	MOVWF	r0x0a
	CLRF	r0x0b
_00234_DS_:
	MOVLW	0x08
	SUBWF	r0x0b, W
	BTFSC	STATUS, 0
	BRA	_00240_DS_
;	.line	239; glcd.c	if ((font8x5[ s[n] ][x] & (1 << y)) >> y) {
	MOVFF	r0x06, FSR0L
	MOVFF	r0x07, PRODL
	MOVF	r0x08, W
	CALL	__gptrget1
	MOVWF	r0x0c
; ;multiply lit val:0x06 by variable r0x0c and store in r0x0c
; ;Unrolled 8 X 8 multiplication
; ;FIXME: the function does not support result==WREG
	MOVF	r0x0c, W
	MULLW	0x06
	MOVFF	PRODL, r0x0c
	MOVFF	PRODH, r0x0d
	CLRF	r0x0e
	MOVLW	LOW(_font8x5)
	ADDWF	r0x0c, F
	MOVLW	HIGH(_font8x5)
	ADDWFC	r0x0d, F
	MOVLW	UPPER(_font8x5)
	ADDWFC	r0x0e, F
	MOVF	r0x09, W
	ADDWF	r0x0c, F
	CLRF	WREG
	ADDWFC	r0x0d, F
	CLRF	WREG
	ADDWFC	r0x0e, F
	MOVLW	0x01
	MOVWF	r0x0f
	MOVLW	0x00
	MOVWF	r0x10
	MOVF	r0x0b, W
	BZ	_00261_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00262_DS_:
	RLCF	r0x0f, F
	RLCF	r0x10, F
	ADDLW	0x01
	BNC	_00262_DS_
_00261_DS_:
	MOVFF	r0x0c, TBLPTRL
	MOVFF	r0x0d, TBLPTRH
	MOVFF	r0x0e, TBLPTRU
	TBLRD*+	
	MOVFF	TABLAT, r0x0c
	CLRF	r0x0d
	MOVF	r0x0c, W
	ANDWF	r0x0f, F
	MOVF	r0x0d, W
	ANDWF	r0x10, F
	MOVF	r0x0b, W
	BZ	_00264_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00265_DS_:
	BTFSC	r0x10, 7
	BSF	STATUS, 0
	RRCF	r0x10, F
	RRCF	r0x0f, F
	ADDLW	0x01
	BNC	_00265_DS_
_00264_DS_:
	MOVF	r0x0f, W
	IORWF	r0x10, W
	BZ	_00236_DS_
;	.line	240; glcd.c	lcd_plotpixel(x + n * FONT_WIDTH, y + line * FONT_HEIGHT);
	MOVF	r0x03, W
	ADDWF	r0x0b, W
	MOVWF	r0x0c
	MOVF	r0x0c, W
	MOVWF	POSTDEC1
	MOVF	r0x0a, W
	MOVWF	POSTDEC1
	CALL	_lcd_plotpixel
	MOVLW	0x02
	ADDWF	FSR1L, F
_00236_DS_:
;	.line	238; glcd.c	for (y = 0; y < FONT_HEIGHT; y++) {
	INCF	r0x0b, F
	BRA	_00234_DS_
_00240_DS_:
;	.line	237; glcd.c	for (x = 0; x < FONT_WIDTH; x++) {
	INCF	r0x09, F
	BRA	_00238_DS_
_00244_DS_:
;	.line	236; glcd.c	for (n = 0; n < strlen(s); n++) {
	MOVLW	0x06
	ADDWF	r0x05, F
	INCF	r0x04, F
	BRA	_00242_DS_
_00246_DS_:
	MOVFF	PREINC1, r0x10
	MOVFF	PREINC1, r0x0f
	MOVFF	PREINC1, r0x0e
	MOVFF	PREINC1, r0x0d
	MOVFF	PREINC1, r0x0c
	MOVFF	PREINC1, r0x0b
	MOVFF	PREINC1, r0x0a
	MOVFF	PREINC1, r0x09
	MOVFF	PREINC1, r0x08
	MOVFF	PREINC1, r0x07
	MOVFF	PREINC1, r0x06
	MOVFF	PREINC1, r0x05
	MOVFF	PREINC1, r0x04
	MOVFF	PREINC1, r0x03
	MOVFF	PREINC1, r0x02
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_plotpixel	code
_lcd_plotpixel:
;	.line	209; glcd.c	void lcd_plotpixel(unsigned char rx, unsigned char ry) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVFF	r0x02, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
;	.line	215; glcd.c	if (rx & 64) {
	BTFSS	r0x00, 6
	BRA	_00218_DS_
;	.line	216; glcd.c	lcd_selectside(RIGHT);
	MOVLW	0x02
	MOVWF	POSTDEC1
	CALL	_lcd_selectside
	INCF	FSR1L, F
	BRA	_00219_DS_
_00218_DS_:
;	.line	219; glcd.c	lcd_selectside(LEFT);
	MOVLW	0x01
	MOVWF	POSTDEC1
	CALL	_lcd_selectside
	INCF	FSR1L, F
_00219_DS_:
;	.line	222; glcd.c	lcd_setpage( ry >> 3);
	SWAPF	r0x01, W
	RLNCF	WREG, W
	ANDLW	0x1f
	MOVWF	r0x02
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	_lcd_setpage
	INCF	FSR1L, F
;	.line	223; glcd.c	lcd_setyaddr( rx & 0b00111111);
	MOVLW	0x3f
	ANDWF	r0x00, F
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_lcd_setyaddr
	INCF	FSR1L, F
;	.line	224; glcd.c	d = lcd_read(); // dummy read needed here
	CALL	_lcd_read
;	.line	225; glcd.c	d = lcd_read();
	CALL	_lcd_read
	MOVWF	r0x02
;	.line	226; glcd.c	lcd_setyaddr( rx & 0b00111111); 
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_lcd_setyaddr
	INCF	FSR1L, F
;	.line	227; glcd.c	lcd_write (d | (1 << (ry & 0b111)));
	MOVLW	0x07
	ANDWF	r0x01, F
	MOVLW	0x01
	MOVWF	r0x00
	MOVF	r0x01, W
	BZ	_00226_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00227_DS_:
	RLCF	r0x00, F
	ADDLW	0x01
	BNC	_00227_DS_
_00226_DS_:
	MOVF	r0x00, W
	IORWF	r0x02, F
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	_lcd_write
	INCF	FSR1L, F
	MOVFF	PREINC1, r0x02
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_read	code
_lcd_read:
;	.line	194; glcd.c	unsigned char lcd_read (void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
;	.line	197; glcd.c	LCD_TRIS = 0xFF;
	MOVLW	0xff
	MOVWF	_TRISD
;	.line	198; glcd.c	RW = 1;	// read
	BSF	_PORTEbits, 1
;	.line	199; glcd.c	DI = 1;	// data
	BSF	_PORTEbits, 0
;	.line	201; glcd.c	lcd_enable();
	CALL	_lcd_enable
;	.line	202; glcd.c	d = LCD_DATA;
	MOVFF	_PORTD, r0x00
;	.line	203; glcd.c	LCD_TRIS = 0x00;
	CLRF	_TRISD
;	.line	205; glcd.c	return d;
	MOVF	r0x00, W
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_selectside	code
_lcd_selectside:
;	.line	176; glcd.c	void lcd_selectside(unsigned char sides) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	178; glcd.c	if (sides & LEFT) {
	BTFSS	r0x00, 0
	BRA	_00197_DS_
;	.line	179; glcd.c	CS1 = 0;
	BCF	_PORTCbits, 0
	BRA	_00198_DS_
_00197_DS_:
;	.line	182; glcd.c	CS1 = 1;
	BSF	_PORTCbits, 0
_00198_DS_:
;	.line	185; glcd.c	if (sides & RIGHT) {
	BTFSS	r0x00, 1
	BRA	_00200_DS_
;	.line	186; glcd.c	CS2 = 0;
	BCF	_PORTCbits, 1
	BRA	_00202_DS_
_00200_DS_:
;	.line	189; glcd.c	CS2 = 1;
	BSF	_PORTCbits, 1
_00202_DS_:
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_write	code
_lcd_write:
;	.line	166; glcd.c	void lcd_write (unsigned char d) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	167; glcd.c	lcd_waitbusy();
	CALL	_lcd_waitbusy
;	.line	168; glcd.c	DI = 1;	// data
	BSF	_PORTEbits, 0
;	.line	169; glcd.c	RW = 0;	// write
	BCF	_PORTEbits, 1
;	.line	170; glcd.c	LCD_TRIS = 0; 
	CLRF	_TRISD
;	.line	171; glcd.c	LCD_DATA = d;
	MOVFF	r0x00, _PORTD
;	.line	172; glcd.c	lcd_enable();
	CALL	_lcd_enable
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_waitbusy	code
_lcd_waitbusy:
;	.line	159; glcd.c	void lcd_waitbusy(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
_00179_DS_:
;	.line	160; glcd.c	while (lcd_status() & 0b10000000) {
	CALL	_lcd_status
	MOVWF	r0x00
	BTFSS	r0x00, 7
	BRA	_00182_DS_
;	.line	161; glcd.c	delay_500us();
	CALL	_delay_500us
	BRA	_00179_DS_
_00182_DS_:
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_setyaddr	code
_lcd_setyaddr:
;	.line	151; glcd.c	void lcd_setyaddr(unsigned char y) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	152; glcd.c	lcd_waitbusy();
	CALL	_lcd_waitbusy
;	.line	153; glcd.c	DI = 0; RW = 0;
	BCF	_PORTEbits, 0
	BCF	_PORTEbits, 1
;	.line	154; glcd.c	LCD_DATA = 0b01000000 | (y & 0b00111111);
	MOVLW	0x3f
	ANDWF	r0x00, F
	MOVLW	0x40
	IORWF	r0x00, W
	MOVWF	_PORTD
;	.line	155; glcd.c	lcd_enable();
	CALL	_lcd_enable
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_setpage	code
_lcd_setpage:
;	.line	142; glcd.c	void lcd_setpage(unsigned char page) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	143; glcd.c	lcd_waitbusy();
	CALL	_lcd_waitbusy
;	.line	144; glcd.c	DI = 0; RW = 0; 
	BCF	_PORTEbits, 0
	BCF	_PORTEbits, 1
;	.line	145; glcd.c	LCD_DATA = 0b10111000 | page;
	MOVLW	0xb8
	IORWF	r0x00, W
	MOVWF	_PORTD
;	.line	146; glcd.c	lcd_enable();
	CALL	_lcd_enable
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_cls	code
_lcd_cls:
;	.line	95; glcd.c	void lcd_cls(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
;	.line	99; glcd.c	lcd_selectside(LEFT);
	MOVLW	0x01
	MOVWF	POSTDEC1
	CALL	_lcd_selectside
	INCF	FSR1L, F
;	.line	100; glcd.c	for (x=0; x<8; x++) {
	CLRF	r0x00
_00140_DS_:
	MOVLW	0x08
	SUBWF	r0x00, W
	BC	_00143_DS_
;	.line	102; glcd.c	lcd_setpage(x);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_lcd_setpage
	INCF	FSR1L, F
;	.line	105; glcd.c	lcd_setyaddr(0);
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_lcd_setyaddr
	INCF	FSR1L, F
;	.line	108; glcd.c	LCD_DATA = 0; RW = 0; DI = 1;
	CLRF	_PORTD
	BCF	_PORTEbits, 1
	BSF	_PORTEbits, 0
;	.line	111; glcd.c	for (y=0; y<64; y++) {
	MOVLW	0x40
	MOVWF	r0x01
_00139_DS_:
;	.line	112; glcd.c	lcd_enable(); 
	CALL	_lcd_enable
;	.line	113; glcd.c	delay_20us();
	CALL	_delay_20us
	DECF	r0x01, F
;	.line	111; glcd.c	for (y=0; y<64; y++) {
	MOVF	r0x01, W
	BNZ	_00139_DS_
;	.line	100; glcd.c	for (x=0; x<8; x++) {
	INCF	r0x00, F
	BRA	_00140_DS_
_00143_DS_:
;	.line	118; glcd.c	lcd_selectside(RIGHT);
	MOVLW	0x02
	MOVWF	POSTDEC1
	CALL	_lcd_selectside
	INCF	FSR1L, F
;	.line	119; glcd.c	for (x=0; x<8; x++) {
	CLRF	r0x00
_00147_DS_:
	MOVLW	0x08
	SUBWF	r0x00, W
	BC	_00150_DS_
;	.line	121; glcd.c	lcd_setpage(x);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_lcd_setpage
	INCF	FSR1L, F
;	.line	124; glcd.c	lcd_setyaddr(0);
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_lcd_setyaddr
	INCF	FSR1L, F
;	.line	127; glcd.c	LCD_DATA = 0; RW = 0; DI = 1;
	CLRF	_PORTD
	BCF	_PORTEbits, 1
	BSF	_PORTEbits, 0
;	.line	130; glcd.c	for (y=0; y<64; y++) {
	MOVLW	0x40
	MOVWF	r0x01
_00146_DS_:
;	.line	131; glcd.c	lcd_enable(); 
	CALL	_lcd_enable
;	.line	132; glcd.c	delay_20us();
	CALL	_delay_20us
	DECFSZ	r0x01, F
	BRA	_00146_DS_
;	.line	119; glcd.c	for (x=0; x<8; x++) {
	INCF	r0x00, F
	BRA	_00147_DS_
_00150_DS_:
;	.line	137; glcd.c	lcd_selectside(LEFT);
	MOVLW	0x01
	MOVWF	POSTDEC1
	CALL	_lcd_selectside
	INCF	FSR1L, F
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_screenon	code
_lcd_screenon:
;	.line	83; glcd.c	void lcd_screenon(unsigned char on) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	85; glcd.c	CS1 = 0;
	BCF	_PORTCbits, 0
;	.line	86; glcd.c	CS2 = 0;
	BCF	_PORTCbits, 1
;	.line	87; glcd.c	RW = 0;
	BCF	_PORTEbits, 1
;	.line	88; glcd.c	DI = 0;
	BCF	_PORTEbits, 0
;	.line	89; glcd.c	LCD_TRIS = 0;	// all outputs	
	CLRF	_TRISD
;	.line	90; glcd.c	LATD = 0b00111110 | (on & 0b00000001);	// main screen turn on!
	MOVLW	0x01
	ANDWF	r0x00, F
	MOVLW	0x3e
	IORWF	r0x00, W
	MOVWF	_LATD
;	.line	91; glcd.c	lcd_enable();
	CALL	_lcd_enable
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_reset	code
_lcd_reset:
;	.line	64; glcd.c	void lcd_reset(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
;	.line	71; glcd.c	delay_500us();	
	CALL	_delay_500us
;	.line	72; glcd.c	RESET = 1;
	BSF	_PORTCbits, 5
;	.line	73; glcd.c	delay_500us();
	CALL	_delay_500us
;	.line	74; glcd.c	RESET = 0;
	BCF	_PORTCbits, 5
_00120_DS_:
;	.line	77; glcd.c	while (lcd_status() & 0b00010000) {
	CALL	_lcd_status
	MOVWF	r0x00
	BTFSS	r0x00, 4
	BRA	_00123_DS_
;	.line	78; glcd.c	delay_500us();
	CALL	_delay_500us
	BRA	_00120_DS_
_00123_DS_:
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_status	code
_lcd_status:
;	.line	41; glcd.c	unsigned char lcd_status(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
;	.line	48; glcd.c	_lcd_tris = LCD_TRIS;
	MOVFF	_TRISD, r0x00
;	.line	51; glcd.c	LCD_TRIS = 0xFF;	// all inputs
	MOVLW	0xff
	MOVWF	_TRISD
;	.line	52; glcd.c	DI = 0; RW = 1;		// command/read
	BCF	_PORTEbits, 0
	BSF	_PORTEbits, 1
;	.line	54; glcd.c	lcd_enable();
	CALL	_lcd_enable
;	.line	55; glcd.c	_status = LCD_DATA;
	MOVFF	_PORTD, r0x01
;	.line	58; glcd.c	LCD_TRIS = _lcd_tris;
	MOVFF	r0x00, _TRISD
;	.line	60; glcd.c	return _status;
	MOVF	r0x01, W
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_enable	code
_lcd_enable:
;	.line	33; glcd.c	void lcd_enable(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
;	.line	34; glcd.c	ENABLE = 1;
	BSF	_PORTEbits, 2
;	.line	35; glcd.c	delay_20us();
	CALL	_delay_20us
;	.line	36; glcd.c	ENABLE = 0;
	BCF	_PORTEbits, 2
;	.line	37; glcd.c	delay_20us();
	CALL	_delay_20us
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_glcd__lcd_init	code
_lcd_init:
;	.line	16; glcd.c	void lcd_init(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
;	.line	17; glcd.c	LCD_TRIS = 0x00;
	CLRF	_TRISD
;	.line	18; glcd.c	ENABLE_TRIS = 0;
	BCF	_TRISEbits, 2
;	.line	19; glcd.c	RW_TRIS	= 0;
	BCF	_TRISEbits, 1
;	.line	20; glcd.c	DI_TRIS = 0;
	BCF	_TRISEbits, 0
;	.line	21; glcd.c	RESET_TRIS = 0;
	BCF	_TRISCbits, 5
;	.line	22; glcd.c	CS1_TRIS = 0;
	BCF	_TRISCbits, 0
;	.line	23; glcd.c	CS2_TRIS = 0;
	BCF	_TRISCbits, 1
;	.line	25; glcd.c	CS1 = 1;
	BSF	_PORTCbits, 0
;	.line	26; glcd.c	CS2 = 1;
	BSF	_PORTCbits, 1
;	.line	28; glcd.c	lcd_reset();
	CALL	_lcd_reset
;	.line	29; glcd.c	lcd_screenon(1);
	MOVLW	0x01
	MOVWF	POSTDEC1
	CALL	_lcd_screenon
	INCF	FSR1L, F
;	.line	30; glcd.c	lcd_cls();
	CALL	_lcd_cls
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block for Ival
	code
_font8x5:
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x18, 0x04, 0x64, 0x18
	DB	0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c, 0x00, 0x0c, 0x30, 0x40, 0x30, 0x0c
	DB	0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c, 0x00, 0x00, 0x3e, 0x1c, 0x08, 0x00
	DB	0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04, 0x00, 0x10, 0x3c, 0x7c, 0x3c, 0x10
	DB	0x00, 0x20, 0x40, 0x3e, 0x01, 0x02, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22
	DB	0x00, 0x00, 0x38, 0x28, 0x38, 0x00, 0x00, 0x00, 0x10, 0x38, 0x10, 0x00
	DB	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x78, 0x08, 0x00, 0x00
	DB	0x00, 0x00, 0x15, 0x15, 0x0a, 0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01
	DB	0x00, 0x10, 0x20, 0x7f, 0x01, 0x01, 0x00, 0x04, 0x04, 0x00, 0x01, 0x1f
	DB	0x00, 0x00, 0x19, 0x15, 0x12, 0x00, 0x00, 0x40, 0x60, 0x50, 0x48, 0x44
	DB	0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x0f, 0x02, 0x01, 0x01, 0x00
	DB	0x00, 0x00, 0x01, 0x1f, 0x01, 0x00, 0x00, 0x44, 0x44, 0x4a, 0x4a, 0x51
	DB	0x00, 0x14, 0x74, 0x1c, 0x17, 0x14, 0x00, 0x51, 0x4a, 0x4a, 0x44, 0x44
	DB	0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x7c, 0x54, 0x54, 0x44
	DB	0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08, 0x00, 0x7c, 0x00, 0x7c, 0x44, 0x7c
	DB	0x00, 0x04, 0x02, 0x7f, 0x02, 0x04, 0x00, 0x10, 0x20, 0x7f, 0x20, 0x10
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00
	DB	0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14
	DB	0x00, 0x00, 0x07, 0x04, 0x1e, 0x00, 0x00, 0x23, 0x13, 0x08, 0x64, 0x62
	DB	0x00, 0x36, 0x49, 0x56, 0x20, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00
	DB	0x00, 0x00, 0x1c, 0x22, 0x41, 0x00, 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00
	DB	0x00, 0x14, 0x08, 0x3e, 0x08, 0x14, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08
	DB	0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08
	DB	0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02
	DB	0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e, 0x00, 0x00, 0x42, 0x7f, 0x40, 0x00
	DB	0x00, 0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x21, 0x41, 0x45, 0x4b, 0x31
	DB	0x00, 0x18, 0x14, 0x12, 0x7f, 0x10, 0x00, 0x27, 0x45, 0x45, 0x45, 0x39
	DB	0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30, 0x00, 0x01, 0x71, 0x09, 0x05, 0x03
	DB	0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x06, 0x49, 0x49, 0x29, 0x1e
	DB	0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x56, 0x36, 0x00, 0x00
	DB	0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x14, 0x14, 0x14, 0x14, 0x14
	DB	0x00, 0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x02, 0x01, 0x51, 0x09, 0x06
	DB	0x00, 0x3e, 0x41, 0x5d, 0x49, 0x4e, 0x00, 0x7e, 0x09, 0x09, 0x09, 0x7e
	DB	0x00, 0x7f, 0x49, 0x49, 0x49, 0x36, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x22
	DB	0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x7f, 0x49, 0x49, 0x49, 0x41
	DB	0x00, 0x7f, 0x09, 0x09, 0x09, 0x01, 0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a
	DB	0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x41, 0x7f, 0x41, 0x00
	DB	0x00, 0x20, 0x40, 0x41, 0x3f, 0x01, 0x00, 0x7f, 0x08, 0x14, 0x22, 0x41
	DB	0x00, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f
	DB	0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e
	DB	0x00, 0x7f, 0x09, 0x09, 0x09, 0x06, 0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e
	DB	0x00, 0x7f, 0x09, 0x19, 0x29, 0x46, 0x00, 0x46, 0x49, 0x49, 0x49, 0x31
	DB	0x00, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f
	DB	0x00, 0x0f, 0x30, 0x40, 0x30, 0x0f, 0x00, 0x3f, 0x40, 0x30, 0x40, 0x3f
	DB	0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x07, 0x08, 0x70, 0x08, 0x07
	DB	0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x3c, 0x4a, 0x49, 0x29, 0x1e
	DB	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x41, 0x7f, 0x00, 0x00
	DB	0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40
	DB	0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x20, 0x54, 0x54, 0x54, 0x78
	DB	0x00, 0x7f, 0x48, 0x44, 0x44, 0x38, 0x00, 0x38, 0x44, 0x44, 0x44, 0x20
	DB	0x00, 0x38, 0x44, 0x44, 0x48, 0x7f, 0x00, 0x38, 0x54, 0x54, 0x54, 0x18
	DB	0x00, 0x08, 0x7e, 0x09, 0x01, 0x02, 0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e
	DB	0x00, 0x7f, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00, 0x44, 0x7d, 0x40, 0x00
	DB	0x00, 0x20, 0x40, 0x44, 0x3d, 0x00, 0x00, 0x00, 0x7f, 0x10, 0x28, 0x44
	DB	0x00, 0x00, 0x41, 0x7f, 0x40, 0x00, 0x00, 0x7c, 0x04, 0x18, 0x04, 0x78
	DB	0x00, 0x7c, 0x08, 0x04, 0x04, 0x78, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38
	DB	0x00, 0x7c, 0x14, 0x14, 0x14, 0x08, 0x00, 0x08, 0x14, 0x14, 0x18, 0x7c
	DB	0x00, 0x7c, 0x08, 0x04, 0x04, 0x08, 0x00, 0x48, 0x54, 0x54, 0x54, 0x20
	DB	0x00, 0x04, 0x3f, 0x44, 0x40, 0x20, 0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c
	DB	0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c, 0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c
	DB	0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c
	DB	0x00, 0x44, 0x64, 0x54, 0x4c, 0x44, 0x00, 0x00, 0x08, 0x36, 0x41, 0x41
	DB	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x41, 0x41, 0x36, 0x08, 0x00
	DB	0x00, 0x04, 0x02, 0x04, 0x08, 0x04, 0x00, 0x7f, 0x6b, 0x6b, 0x6b, 0x7f
	DB	0x00, 0x00, 0x7c, 0x44, 0x7c, 0x00, 0x00, 0x00, 0x08, 0x7c, 0x00, 0x00
	DB	0x00, 0x00, 0x64, 0x54, 0x48, 0x00, 0x00, 0x00, 0x44, 0x54, 0x28, 0x00
	DB	0x00, 0x00, 0x1c, 0x10, 0x78, 0x00, 0x00, 0x00, 0x5c, 0x54, 0x24, 0x00
	DB	0x00, 0x00, 0x78, 0x54, 0x74, 0x00, 0x00, 0x00, 0x64, 0x14, 0x0c, 0x00
	DB	0x00, 0x00, 0x7c, 0x54, 0x7c, 0x00, 0x00, 0x00, 0x5c, 0x54, 0x3c, 0x00
	DB	0x00, 0x78, 0x24, 0x26, 0x25, 0x78, 0x00, 0x78, 0x25, 0x26, 0x24, 0x78
	DB	0x00, 0x70, 0x2a, 0x29, 0x2a, 0x70, 0x00, 0x78, 0x25, 0x24, 0x25, 0x78
	DB	0x00, 0x20, 0x54, 0x56, 0x55, 0x78, 0x00, 0x20, 0x55, 0x56, 0x54, 0x78
	DB	0x00, 0x20, 0x56, 0x55, 0x56, 0x78, 0x00, 0x20, 0x55, 0x54, 0x55, 0x78
	DB	0x00, 0x7c, 0x54, 0x56, 0x55, 0x44, 0x00, 0x7c, 0x55, 0x56, 0x54, 0x44
	DB	0x00, 0x7c, 0x56, 0x55, 0x56, 0x44, 0x00, 0x7c, 0x55, 0x54, 0x55, 0x44
	DB	0x00, 0x38, 0x54, 0x56, 0x55, 0x18, 0x00, 0x38, 0x55, 0x56, 0x54, 0x18
	DB	0x00, 0x38, 0x56, 0x55, 0x56, 0x18, 0x00, 0x38, 0x55, 0x54, 0x55, 0x18
	DB	0x00, 0x00, 0x44, 0x7e, 0x45, 0x00, 0x00, 0x00, 0x45, 0x7e, 0x44, 0x00
	DB	0x00, 0x00, 0x46, 0x7d, 0x46, 0x00, 0x00, 0x00, 0x45, 0x7c, 0x45, 0x00
	DB	0x00, 0x00, 0x48, 0x7a, 0x41, 0x00, 0x00, 0x00, 0x49, 0x7a, 0x40, 0x00
	DB	0x00, 0x00, 0x4a, 0x79, 0x42, 0x00, 0x00, 0x00, 0x49, 0x78, 0x41, 0x00
	DB	0x00, 0x38, 0x44, 0x46, 0x45, 0x38, 0x00, 0x38, 0x45, 0x46, 0x44, 0x38
	DB	0x00, 0x38, 0x46, 0x45, 0x46, 0x38, 0x00, 0x38, 0x45, 0x44, 0x45, 0x38
	DB	0x00, 0x30, 0x48, 0x4a, 0x49, 0x30, 0x00, 0x30, 0x49, 0x4a, 0x48, 0x30
	DB	0x00, 0x30, 0x4a, 0x49, 0x4a, 0x30, 0x00, 0x30, 0x49, 0x48, 0x49, 0x30
	DB	0x00, 0x3c, 0x40, 0x42, 0x41, 0x3c, 0x00, 0x3c, 0x41, 0x42, 0x40, 0x3c
	DB	0x00, 0x3c, 0x42, 0x41, 0x42, 0x3c, 0x00, 0x3c, 0x41, 0x40, 0x41, 0x3c
	DB	0x00, 0x3c, 0x40, 0x42, 0x21, 0x7c, 0x00, 0x3c, 0x41, 0x42, 0x20, 0x7c
	DB	0x00, 0x38, 0x42, 0x41, 0x22, 0x78, 0x00, 0x3c, 0x41, 0x40, 0x21, 0x7c
	DB	0x00, 0x4e, 0x51, 0x71, 0x11, 0x0a, 0x00, 0x58, 0x64, 0x64, 0x24, 0x10
	DB	0x00, 0x7c, 0x0a, 0x11, 0x22, 0x7d, 0x00, 0x78, 0x12, 0x09, 0x0a, 0x71
	DB	0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00
	DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x30, 0x48, 0x45, 0x40, 0x20
	DB	0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x38, 0x44
	DB	0x00, 0x40, 0x3e, 0x49, 0x49, 0x36, 0x00, 0x08, 0x04, 0x08, 0x70, 0x0c
	DB	0x00, 0x60, 0x50, 0x48, 0x50, 0x60, 0x00, 0x20, 0x52, 0x55, 0x59, 0x30
	DB	0x00, 0x38, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x41, 0x00
	DB	0x00, 0x40, 0x22, 0x14, 0x18, 0x60, 0x00, 0x7c, 0x20, 0x20, 0x1c, 0x20
	DB	0x00, 0x44, 0x3c, 0x04, 0x7c, 0x44, 0x00, 0x40, 0x3c, 0x12, 0x12, 0x0c
	DB	0x00, 0x41, 0x63, 0x55, 0x49, 0x41, 0x00, 0x38, 0x44, 0x44, 0x3c, 0x04
	DB	0x00, 0x08, 0x04, 0x3c, 0x44, 0x24, 0x00, 0x08, 0x14, 0x7f, 0x14, 0x08
	DB	0x00, 0x4e, 0x71, 0x01, 0x71, 0x4e, 0x00, 0x45, 0x29, 0x11, 0x29, 0x45
	DB	0x00, 0x0d, 0x51, 0x51, 0x51, 0x3d, 0x00, 0x00, 0x00, 0x05, 0x02, 0x05
	DB	0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0x1c, 0x3e, 0x00
	DB	0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x08, 0x07, 0x00
	DB	0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x1d, 0x15, 0x17, 0x00
	DB	0x00, 0x00, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00, 0x11, 0x15, 0x0a, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 0x41, 0x20, 0x00
	DB	0x00, 0x7c, 0x16, 0x15, 0x16, 0x08, 0x00, 0x21, 0x16, 0x08, 0x34, 0x42
	DB	0x00, 0x7f, 0x09, 0x1d, 0x01, 0x03, 0x00, 0x38, 0x54, 0x54, 0x14, 0x08
	DB	0x00, 0x00, 0x00, 0x7c, 0x40, 0x40, 0x00, 0x7f, 0x0e, 0x1c, 0x38, 0x7f
	DB	0x00, 0x41, 0x22, 0x5d, 0x22, 0x1c, 0x00, 0x1c, 0x3e, 0x1c, 0x08, 0x00
	DB	0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x77, 0x7b, 0x01, 0x7b, 0x77
	DB	0x00, 0x7f, 0x43, 0x75, 0x43, 0x7f, 0x00, 0x7f, 0x6f, 0x55, 0x43, 0x7f
	DB	0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x44, 0x42, 0x5f, 0x42, 0x44
	DB	0x00, 0x40, 0x5e, 0x45, 0x5e, 0x40, 0x00, 0x40, 0x48, 0x55, 0x5e, 0x40
	DB	0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x00, 0x03, 0x07, 0x0e, 0x1c, 0x38
	DB	0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x00, 0x7c, 0x78, 0x70, 0x60, 0x40
	DB	0x00, 0x08, 0x08, 0x1c, 0x22, 0x1c, 0x00, 0x00, 0x1c, 0x22, 0x1c, 0x00
	DB	0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x04, 0x3e, 0x3f, 0x3e, 0x04
	DB	0x00, 0x10, 0x3e, 0x7e, 0x3e, 0x10, 0x00, 0x55, 0x2a, 0x55, 0x2a, 0x55
	DB	0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


; Statistics:
; code size:	 2582 (0x0a16) bytes ( 1.97%)
;           	 1291 (0x050b) words
; udata size:	    0 (0x0000) bytes ( 0.00%)
; access size:	   17 (0x0011) bytes


	end
